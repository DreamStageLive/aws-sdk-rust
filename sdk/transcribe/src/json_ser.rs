// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_call_analytics_category_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCallAnalyticsCategoryInput,
) {
    if let Some(var_1) = &input.category_name {
        object.key("CategoryName").string(var_1);
    }
    if let Some(var_2) = &input.rules {
        let mut array_3 = object.key("Rules").start_array();
        for item_4 in var_2 {
            {
                let mut object_5 = array_3.value().start_object();
                crate::json_ser::serialize_union_rule(&mut object_5, item_4);
                object_5.finish();
            }
        }
        array_3.finish();
    }
}

pub fn serialize_structure_create_language_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLanguageModelInput,
) {
    if let Some(var_6) = &input.language_code {
        object.key("LanguageCode").string(var_6.as_str());
    }
    if let Some(var_7) = &input.base_model_name {
        object.key("BaseModelName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.model_name {
        object.key("ModelName").string(var_8);
    }
    if let Some(var_9) = &input.input_data_config {
        let mut object_10 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_10, var_9);
        object_10.finish();
    }
}

pub fn serialize_structure_create_medical_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMedicalVocabularyInput,
) {
    if let Some(var_11) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_11);
    }
    if let Some(var_12) = &input.language_code {
        object.key("LanguageCode").string(var_12.as_str());
    }
    if let Some(var_13) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_13);
    }
}

pub fn serialize_structure_create_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVocabularyInput,
) {
    if let Some(var_14) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_14);
    }
    if let Some(var_15) = &input.language_code {
        object.key("LanguageCode").string(var_15.as_str());
    }
    if let Some(var_16) = &input.phrases {
        let mut array_17 = object.key("Phrases").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18);
            }
        }
        array_17.finish();
    }
    if let Some(var_19) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_19);
    }
}

pub fn serialize_structure_create_vocabulary_filter_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVocabularyFilterInput,
) {
    if let Some(var_20) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_20);
    }
    if let Some(var_21) = &input.language_code {
        object.key("LanguageCode").string(var_21.as_str());
    }
    if let Some(var_22) = &input.words {
        let mut array_23 = object.key("Words").start_array();
        for item_24 in var_22 {
            {
                array_23.value().string(item_24);
            }
        }
        array_23.finish();
    }
    if let Some(var_25) = &input.vocabulary_filter_file_uri {
        object.key("VocabularyFilterFileUri").string(var_25);
    }
}

pub fn serialize_structure_delete_call_analytics_category_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCallAnalyticsCategoryInput,
) {
    if let Some(var_26) = &input.category_name {
        object.key("CategoryName").string(var_26);
    }
}

pub fn serialize_structure_delete_call_analytics_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCallAnalyticsJobInput,
) {
    if let Some(var_27) = &input.call_analytics_job_name {
        object.key("CallAnalyticsJobName").string(var_27);
    }
}

pub fn serialize_structure_delete_language_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLanguageModelInput,
) {
    if let Some(var_28) = &input.model_name {
        object.key("ModelName").string(var_28);
    }
}

pub fn serialize_structure_delete_medical_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMedicalTranscriptionJobInput,
) {
    if let Some(var_29) = &input.medical_transcription_job_name {
        object.key("MedicalTranscriptionJobName").string(var_29);
    }
}

pub fn serialize_structure_delete_medical_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMedicalVocabularyInput,
) {
    if let Some(var_30) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_30);
    }
}

pub fn serialize_structure_delete_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTranscriptionJobInput,
) {
    if let Some(var_31) = &input.transcription_job_name {
        object.key("TranscriptionJobName").string(var_31);
    }
}

pub fn serialize_structure_delete_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteVocabularyInput,
) {
    if let Some(var_32) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_32);
    }
}

pub fn serialize_structure_delete_vocabulary_filter_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteVocabularyFilterInput,
) {
    if let Some(var_33) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_33);
    }
}

pub fn serialize_structure_describe_language_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLanguageModelInput,
) {
    if let Some(var_34) = &input.model_name {
        object.key("ModelName").string(var_34);
    }
}

pub fn serialize_structure_get_call_analytics_category_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCallAnalyticsCategoryInput,
) {
    if let Some(var_35) = &input.category_name {
        object.key("CategoryName").string(var_35);
    }
}

pub fn serialize_structure_get_call_analytics_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCallAnalyticsJobInput,
) {
    if let Some(var_36) = &input.call_analytics_job_name {
        object.key("CallAnalyticsJobName").string(var_36);
    }
}

pub fn serialize_structure_get_medical_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMedicalTranscriptionJobInput,
) {
    if let Some(var_37) = &input.medical_transcription_job_name {
        object.key("MedicalTranscriptionJobName").string(var_37);
    }
}

pub fn serialize_structure_get_medical_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMedicalVocabularyInput,
) {
    if let Some(var_38) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_38);
    }
}

pub fn serialize_structure_get_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTranscriptionJobInput,
) {
    if let Some(var_39) = &input.transcription_job_name {
        object.key("TranscriptionJobName").string(var_39);
    }
}

pub fn serialize_structure_get_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetVocabularyInput,
) {
    if let Some(var_40) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_40);
    }
}

pub fn serialize_structure_get_vocabulary_filter_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetVocabularyFilterInput,
) {
    if let Some(var_41) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_41);
    }
}

pub fn serialize_structure_list_call_analytics_categories_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCallAnalyticsCategoriesInput,
) {
    if let Some(var_42) = &input.next_token {
        object.key("NextToken").string(var_42);
    }
    if let Some(var_43) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_43).into()),
        );
    }
}

pub fn serialize_structure_list_call_analytics_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCallAnalyticsJobsInput,
) {
    if let Some(var_44) = &input.status {
        object.key("Status").string(var_44.as_str());
    }
    if let Some(var_45) = &input.job_name_contains {
        object.key("JobNameContains").string(var_45);
    }
    if let Some(var_46) = &input.next_token {
        object.key("NextToken").string(var_46);
    }
    if let Some(var_47) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_47).into()),
        );
    }
}

pub fn serialize_structure_list_language_models_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLanguageModelsInput,
) {
    if let Some(var_48) = &input.status_equals {
        object.key("StatusEquals").string(var_48.as_str());
    }
    if let Some(var_49) = &input.name_contains {
        object.key("NameContains").string(var_49);
    }
    if let Some(var_50) = &input.next_token {
        object.key("NextToken").string(var_50);
    }
    if let Some(var_51) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_51).into()),
        );
    }
}

pub fn serialize_structure_list_medical_transcription_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMedicalTranscriptionJobsInput,
) {
    if let Some(var_52) = &input.status {
        object.key("Status").string(var_52.as_str());
    }
    if let Some(var_53) = &input.job_name_contains {
        object.key("JobNameContains").string(var_53);
    }
    if let Some(var_54) = &input.next_token {
        object.key("NextToken").string(var_54);
    }
    if let Some(var_55) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_55).into()),
        );
    }
}

pub fn serialize_structure_list_medical_vocabularies_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMedicalVocabulariesInput,
) {
    if let Some(var_56) = &input.next_token {
        object.key("NextToken").string(var_56);
    }
    if let Some(var_57) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_57).into()),
        );
    }
    if let Some(var_58) = &input.state_equals {
        object.key("StateEquals").string(var_58.as_str());
    }
    if let Some(var_59) = &input.name_contains {
        object.key("NameContains").string(var_59);
    }
}

pub fn serialize_structure_list_transcription_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTranscriptionJobsInput,
) {
    if let Some(var_60) = &input.status {
        object.key("Status").string(var_60.as_str());
    }
    if let Some(var_61) = &input.job_name_contains {
        object.key("JobNameContains").string(var_61);
    }
    if let Some(var_62) = &input.next_token {
        object.key("NextToken").string(var_62);
    }
    if let Some(var_63) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_63).into()),
        );
    }
}

pub fn serialize_structure_list_vocabularies_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListVocabulariesInput,
) {
    if let Some(var_64) = &input.next_token {
        object.key("NextToken").string(var_64);
    }
    if let Some(var_65) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_65).into()),
        );
    }
    if let Some(var_66) = &input.state_equals {
        object.key("StateEquals").string(var_66.as_str());
    }
    if let Some(var_67) = &input.name_contains {
        object.key("NameContains").string(var_67);
    }
}

pub fn serialize_structure_list_vocabulary_filters_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListVocabularyFiltersInput,
) {
    if let Some(var_68) = &input.next_token {
        object.key("NextToken").string(var_68);
    }
    if let Some(var_69) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_69).into()),
        );
    }
    if let Some(var_70) = &input.name_contains {
        object.key("NameContains").string(var_70);
    }
}

pub fn serialize_structure_start_call_analytics_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCallAnalyticsJobInput,
) {
    if let Some(var_71) = &input.call_analytics_job_name {
        object.key("CallAnalyticsJobName").string(var_71);
    }
    if let Some(var_72) = &input.media {
        let mut object_73 = object.key("Media").start_object();
        crate::json_ser::serialize_structure_media(&mut object_73, var_72);
        object_73.finish();
    }
    if let Some(var_74) = &input.output_location {
        object.key("OutputLocation").string(var_74);
    }
    if let Some(var_75) = &input.output_encryption_kms_key_id {
        object.key("OutputEncryptionKMSKeyId").string(var_75);
    }
    if let Some(var_76) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_76);
    }
    if let Some(var_77) = &input.settings {
        let mut object_78 = object.key("Settings").start_object();
        crate::json_ser::serialize_structure_call_analytics_job_settings(&mut object_78, var_77);
        object_78.finish();
    }
    if let Some(var_79) = &input.channel_definitions {
        let mut array_80 = object.key("ChannelDefinitions").start_array();
        for item_81 in var_79 {
            {
                let mut object_82 = array_80.value().start_object();
                crate::json_ser::serialize_structure_channel_definition(&mut object_82, item_81);
                object_82.finish();
            }
        }
        array_80.finish();
    }
}

pub fn serialize_structure_start_medical_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMedicalTranscriptionJobInput,
) {
    if let Some(var_83) = &input.medical_transcription_job_name {
        object.key("MedicalTranscriptionJobName").string(var_83);
    }
    if let Some(var_84) = &input.language_code {
        object.key("LanguageCode").string(var_84.as_str());
    }
    if let Some(var_85) = &input.media_sample_rate_hertz {
        object.key("MediaSampleRateHertz").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_85).into()),
        );
    }
    if let Some(var_86) = &input.media_format {
        object.key("MediaFormat").string(var_86.as_str());
    }
    if let Some(var_87) = &input.media {
        let mut object_88 = object.key("Media").start_object();
        crate::json_ser::serialize_structure_media(&mut object_88, var_87);
        object_88.finish();
    }
    if let Some(var_89) = &input.output_bucket_name {
        object.key("OutputBucketName").string(var_89);
    }
    if let Some(var_90) = &input.output_key {
        object.key("OutputKey").string(var_90);
    }
    if let Some(var_91) = &input.output_encryption_kms_key_id {
        object.key("OutputEncryptionKMSKeyId").string(var_91);
    }
    if let Some(var_92) = &input.settings {
        let mut object_93 = object.key("Settings").start_object();
        crate::json_ser::serialize_structure_medical_transcription_setting(&mut object_93, var_92);
        object_93.finish();
    }
    if let Some(var_94) = &input.content_identification_type {
        object
            .key("ContentIdentificationType")
            .string(var_94.as_str());
    }
    if let Some(var_95) = &input.specialty {
        object.key("Specialty").string(var_95.as_str());
    }
    if let Some(var_96) = &input.r#type {
        object.key("Type").string(var_96.as_str());
    }
}

pub fn serialize_structure_start_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTranscriptionJobInput,
) {
    if let Some(var_97) = &input.transcription_job_name {
        object.key("TranscriptionJobName").string(var_97);
    }
    if let Some(var_98) = &input.language_code {
        object.key("LanguageCode").string(var_98.as_str());
    }
    if let Some(var_99) = &input.media_sample_rate_hertz {
        object.key("MediaSampleRateHertz").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_99).into()),
        );
    }
    if let Some(var_100) = &input.media_format {
        object.key("MediaFormat").string(var_100.as_str());
    }
    if let Some(var_101) = &input.media {
        let mut object_102 = object.key("Media").start_object();
        crate::json_ser::serialize_structure_media(&mut object_102, var_101);
        object_102.finish();
    }
    if let Some(var_103) = &input.output_bucket_name {
        object.key("OutputBucketName").string(var_103);
    }
    if let Some(var_104) = &input.output_key {
        object.key("OutputKey").string(var_104);
    }
    if let Some(var_105) = &input.output_encryption_kms_key_id {
        object.key("OutputEncryptionKMSKeyId").string(var_105);
    }
    if let Some(var_106) = &input.settings {
        let mut object_107 = object.key("Settings").start_object();
        crate::json_ser::serialize_structure_settings(&mut object_107, var_106);
        object_107.finish();
    }
    if let Some(var_108) = &input.model_settings {
        let mut object_109 = object.key("ModelSettings").start_object();
        crate::json_ser::serialize_structure_model_settings(&mut object_109, var_108);
        object_109.finish();
    }
    if let Some(var_110) = &input.job_execution_settings {
        let mut object_111 = object.key("JobExecutionSettings").start_object();
        crate::json_ser::serialize_structure_job_execution_settings(&mut object_111, var_110);
        object_111.finish();
    }
    if let Some(var_112) = &input.content_redaction {
        let mut object_113 = object.key("ContentRedaction").start_object();
        crate::json_ser::serialize_structure_content_redaction(&mut object_113, var_112);
        object_113.finish();
    }
    if let Some(var_114) = &input.identify_language {
        object.key("IdentifyLanguage").boolean(*var_114);
    }
    if let Some(var_115) = &input.language_options {
        let mut array_116 = object.key("LanguageOptions").start_array();
        for item_117 in var_115 {
            {
                array_116.value().string(item_117.as_str());
            }
        }
        array_116.finish();
    }
}

pub fn serialize_structure_update_call_analytics_category_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCallAnalyticsCategoryInput,
) {
    if let Some(var_118) = &input.category_name {
        object.key("CategoryName").string(var_118);
    }
    if let Some(var_119) = &input.rules {
        let mut array_120 = object.key("Rules").start_array();
        for item_121 in var_119 {
            {
                let mut object_122 = array_120.value().start_object();
                crate::json_ser::serialize_union_rule(&mut object_122, item_121);
                object_122.finish();
            }
        }
        array_120.finish();
    }
}

pub fn serialize_structure_update_medical_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMedicalVocabularyInput,
) {
    if let Some(var_123) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_123);
    }
    if let Some(var_124) = &input.language_code {
        object.key("LanguageCode").string(var_124.as_str());
    }
    if let Some(var_125) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_125);
    }
}

pub fn serialize_structure_update_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVocabularyInput,
) {
    if let Some(var_126) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_126);
    }
    if let Some(var_127) = &input.language_code {
        object.key("LanguageCode").string(var_127.as_str());
    }
    if let Some(var_128) = &input.phrases {
        let mut array_129 = object.key("Phrases").start_array();
        for item_130 in var_128 {
            {
                array_129.value().string(item_130);
            }
        }
        array_129.finish();
    }
    if let Some(var_131) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_131);
    }
}

pub fn serialize_structure_update_vocabulary_filter_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVocabularyFilterInput,
) {
    if let Some(var_132) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_132);
    }
    if let Some(var_133) = &input.words {
        let mut array_134 = object.key("Words").start_array();
        for item_135 in var_133 {
            {
                array_134.value().string(item_135);
            }
        }
        array_134.finish();
    }
    if let Some(var_136) = &input.vocabulary_filter_file_uri {
        object.key("VocabularyFilterFileUri").string(var_136);
    }
}

pub fn serialize_union_rule(
    object_5: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Rule,
) {
    match input {
        crate::model::Rule::NonTalkTimeFilter(inner) => {
            let mut object_137 = object_5.key("NonTalkTimeFilter").start_object();
            crate::json_ser::serialize_structure_non_talk_time_filter(&mut object_137, inner);
            object_137.finish();
        }
        crate::model::Rule::InterruptionFilter(inner) => {
            let mut object_138 = object_5.key("InterruptionFilter").start_object();
            crate::json_ser::serialize_structure_interruption_filter(&mut object_138, inner);
            object_138.finish();
        }
        crate::model::Rule::TranscriptFilter(inner) => {
            let mut object_139 = object_5.key("TranscriptFilter").start_object();
            crate::json_ser::serialize_structure_transcript_filter(&mut object_139, inner);
            object_139.finish();
        }
        crate::model::Rule::SentimentFilter(inner) => {
            let mut object_140 = object_5.key("SentimentFilter").start_object();
            crate::json_ser::serialize_structure_sentiment_filter(&mut object_140, inner);
            object_140.finish();
        }
    }
}

pub fn serialize_structure_input_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputDataConfig,
) {
    if let Some(var_141) = &input.s3_uri {
        object.key("S3Uri").string(var_141);
    }
    if let Some(var_142) = &input.tuning_data_s3_uri {
        object.key("TuningDataS3Uri").string(var_142);
    }
    if let Some(var_143) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_143);
    }
}

pub fn serialize_structure_media(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Media,
) {
    if let Some(var_144) = &input.media_file_uri {
        object.key("MediaFileUri").string(var_144);
    }
    if let Some(var_145) = &input.redacted_media_file_uri {
        object.key("RedactedMediaFileUri").string(var_145);
    }
}

pub fn serialize_structure_call_analytics_job_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CallAnalyticsJobSettings,
) {
    if let Some(var_146) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_146);
    }
    if let Some(var_147) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_147);
    }
    if let Some(var_148) = &input.vocabulary_filter_method {
        object
            .key("VocabularyFilterMethod")
            .string(var_148.as_str());
    }
    if let Some(var_149) = &input.language_model_name {
        object.key("LanguageModelName").string(var_149);
    }
    if let Some(var_150) = &input.content_redaction {
        let mut object_151 = object.key("ContentRedaction").start_object();
        crate::json_ser::serialize_structure_content_redaction(&mut object_151, var_150);
        object_151.finish();
    }
    if let Some(var_152) = &input.language_options {
        let mut array_153 = object.key("LanguageOptions").start_array();
        for item_154 in var_152 {
            {
                array_153.value().string(item_154.as_str());
            }
        }
        array_153.finish();
    }
}

pub fn serialize_structure_channel_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChannelDefinition,
) {
    if input.channel_id != 0 {
        object.key("ChannelId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.channel_id).into()),
        );
    }
    if let Some(var_155) = &input.participant_role {
        object.key("ParticipantRole").string(var_155.as_str());
    }
}

pub fn serialize_structure_medical_transcription_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MedicalTranscriptionSetting,
) {
    if let Some(var_156) = &input.show_speaker_labels {
        object.key("ShowSpeakerLabels").boolean(*var_156);
    }
    if let Some(var_157) = &input.max_speaker_labels {
        object.key("MaxSpeakerLabels").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_157).into()),
        );
    }
    if let Some(var_158) = &input.channel_identification {
        object.key("ChannelIdentification").boolean(*var_158);
    }
    if let Some(var_159) = &input.show_alternatives {
        object.key("ShowAlternatives").boolean(*var_159);
    }
    if let Some(var_160) = &input.max_alternatives {
        object.key("MaxAlternatives").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_160).into()),
        );
    }
    if let Some(var_161) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_161);
    }
}

pub fn serialize_structure_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Settings,
) {
    if let Some(var_162) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_162);
    }
    if let Some(var_163) = &input.show_speaker_labels {
        object.key("ShowSpeakerLabels").boolean(*var_163);
    }
    if let Some(var_164) = &input.max_speaker_labels {
        object.key("MaxSpeakerLabels").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    if let Some(var_165) = &input.channel_identification {
        object.key("ChannelIdentification").boolean(*var_165);
    }
    if let Some(var_166) = &input.show_alternatives {
        object.key("ShowAlternatives").boolean(*var_166);
    }
    if let Some(var_167) = &input.max_alternatives {
        object.key("MaxAlternatives").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_167).into()),
        );
    }
    if let Some(var_168) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_168);
    }
    if let Some(var_169) = &input.vocabulary_filter_method {
        object
            .key("VocabularyFilterMethod")
            .string(var_169.as_str());
    }
}

pub fn serialize_structure_model_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelSettings,
) {
    if let Some(var_170) = &input.language_model_name {
        object.key("LanguageModelName").string(var_170);
    }
}

pub fn serialize_structure_job_execution_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobExecutionSettings,
) {
    if let Some(var_171) = &input.allow_deferred_execution {
        object.key("AllowDeferredExecution").boolean(*var_171);
    }
    if let Some(var_172) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_172);
    }
}

pub fn serialize_structure_content_redaction(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContentRedaction,
) {
    if let Some(var_173) = &input.redaction_type {
        object.key("RedactionType").string(var_173.as_str());
    }
    if let Some(var_174) = &input.redaction_output {
        object.key("RedactionOutput").string(var_174.as_str());
    }
}

pub fn serialize_structure_non_talk_time_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NonTalkTimeFilter,
) {
    if let Some(var_175) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_175).into()),
        );
    }
    if let Some(var_176) = &input.absolute_time_range {
        let mut object_177 = object.key("AbsoluteTimeRange").start_object();
        crate::json_ser::serialize_structure_absolute_time_range(&mut object_177, var_176);
        object_177.finish();
    }
    if let Some(var_178) = &input.relative_time_range {
        let mut object_179 = object.key("RelativeTimeRange").start_object();
        crate::json_ser::serialize_structure_relative_time_range(&mut object_179, var_178);
        object_179.finish();
    }
    if let Some(var_180) = &input.negate {
        object.key("Negate").boolean(*var_180);
    }
}

pub fn serialize_structure_interruption_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InterruptionFilter,
) {
    if let Some(var_181) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_181).into()),
        );
    }
    if let Some(var_182) = &input.participant_role {
        object.key("ParticipantRole").string(var_182.as_str());
    }
    if let Some(var_183) = &input.absolute_time_range {
        let mut object_184 = object.key("AbsoluteTimeRange").start_object();
        crate::json_ser::serialize_structure_absolute_time_range(&mut object_184, var_183);
        object_184.finish();
    }
    if let Some(var_185) = &input.relative_time_range {
        let mut object_186 = object.key("RelativeTimeRange").start_object();
        crate::json_ser::serialize_structure_relative_time_range(&mut object_186, var_185);
        object_186.finish();
    }
    if let Some(var_187) = &input.negate {
        object.key("Negate").boolean(*var_187);
    }
}

pub fn serialize_structure_transcript_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TranscriptFilter,
) {
    if let Some(var_188) = &input.transcript_filter_type {
        object.key("TranscriptFilterType").string(var_188.as_str());
    }
    if let Some(var_189) = &input.absolute_time_range {
        let mut object_190 = object.key("AbsoluteTimeRange").start_object();
        crate::json_ser::serialize_structure_absolute_time_range(&mut object_190, var_189);
        object_190.finish();
    }
    if let Some(var_191) = &input.relative_time_range {
        let mut object_192 = object.key("RelativeTimeRange").start_object();
        crate::json_ser::serialize_structure_relative_time_range(&mut object_192, var_191);
        object_192.finish();
    }
    if let Some(var_193) = &input.participant_role {
        object.key("ParticipantRole").string(var_193.as_str());
    }
    if let Some(var_194) = &input.negate {
        object.key("Negate").boolean(*var_194);
    }
    if let Some(var_195) = &input.targets {
        let mut array_196 = object.key("Targets").start_array();
        for item_197 in var_195 {
            {
                array_196.value().string(item_197);
            }
        }
        array_196.finish();
    }
}

pub fn serialize_structure_sentiment_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SentimentFilter,
) {
    if let Some(var_198) = &input.sentiments {
        let mut array_199 = object.key("Sentiments").start_array();
        for item_200 in var_198 {
            {
                array_199.value().string(item_200.as_str());
            }
        }
        array_199.finish();
    }
    if let Some(var_201) = &input.absolute_time_range {
        let mut object_202 = object.key("AbsoluteTimeRange").start_object();
        crate::json_ser::serialize_structure_absolute_time_range(&mut object_202, var_201);
        object_202.finish();
    }
    if let Some(var_203) = &input.relative_time_range {
        let mut object_204 = object.key("RelativeTimeRange").start_object();
        crate::json_ser::serialize_structure_relative_time_range(&mut object_204, var_203);
        object_204.finish();
    }
    if let Some(var_205) = &input.participant_role {
        object.key("ParticipantRole").string(var_205.as_str());
    }
    if let Some(var_206) = &input.negate {
        object.key("Negate").boolean(*var_206);
    }
}

pub fn serialize_structure_absolute_time_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbsoluteTimeRange,
) {
    if let Some(var_207) = &input.start_time {
        object.key("StartTime").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_207).into()),
        );
    }
    if let Some(var_208) = &input.end_time {
        object.key("EndTime").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_208).into()),
        );
    }
    if let Some(var_209) = &input.first {
        object.key("First").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_209).into()),
        );
    }
    if let Some(var_210) = &input.last {
        object.key("Last").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_210).into()),
        );
    }
}

pub fn serialize_structure_relative_time_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelativeTimeRange,
) {
    if let Some(var_211) = &input.start_percentage {
        object.key("StartPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_211).into()),
        );
    }
    if let Some(var_212) = &input.end_percentage {
        object.key("EndPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_212).into()),
        );
    }
    if let Some(var_213) = &input.first {
        object.key("First").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_213).into()),
        );
    }
    if let Some(var_214) = &input.last {
        object.key("Last").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_214).into()),
        );
    }
}
