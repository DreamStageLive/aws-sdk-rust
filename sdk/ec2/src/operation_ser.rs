// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_target_configuration_request(entry_12, item_10);
        }
        list_11.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AcceptTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_65, item_63);
        }
        list_64.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_82, item_80);
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_86) = &input.client_vpn_endpoint_id {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("VpcId");
    if let Some(var_88) = &input.vpc_id {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("SecurityGroupId");
    if let Some(var_90) = &input.security_group_ids {
        let mut list_92 = scope_89.start_list(true, Some("item"));
        for item_91 in var_90 {
            #[allow(unused_mut)]
            let mut entry_93 = list_92.entry();
            entry_93.string(item_91);
        }
        list_92.finish();
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("DryRun");
    if let Some(var_95) = &input.dry_run {
        scope_94.boolean(*var_95);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_96 = writer.prefix("Ipv6AddressCount");
    if let Some(var_97) = &input.ipv6_address_count {
        scope_96.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_97).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("Ipv6Addresses");
    if let Some(var_99) = &input.ipv6_addresses {
        let mut list_101 = scope_98.start_list(true, Some("item"));
        for item_100 in var_99 {
            #[allow(unused_mut)]
            let mut entry_102 = list_101.entry();
            entry_102.string(item_100);
        }
        list_101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_104) = &input.ipv6_prefix_count {
        scope_103.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("Ipv6Prefix");
    if let Some(var_106) = &input.ipv6_prefixes {
        let mut list_108 = scope_105.start_list(true, Some("item"));
        for item_107 in var_106 {
            #[allow(unused_mut)]
            let mut entry_109 = list_108.entry();
            entry_109.string(item_107);
        }
        list_108.finish();
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("NetworkInterfaceId");
    if let Some(var_111) = &input.network_interface_id {
        scope_110.string(var_111);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("AllowReassignment");
    if let Some(var_113) = &input.allow_reassignment {
        scope_112.boolean(*var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("NetworkInterfaceId");
    if let Some(var_115) = &input.network_interface_id {
        scope_114.string(var_115);
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("PrivateIpAddress");
    if let Some(var_117) = &input.private_ip_addresses {
        let mut list_119 = scope_116.start_list(true, Some("PrivateIpAddress"));
        for item_118 in var_117 {
            #[allow(unused_mut)]
            let mut entry_120 = list_119.entry();
            entry_120.string(item_118);
        }
        list_119.finish();
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_122) = &input.secondary_private_ip_address_count {
        scope_121.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_122).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("Ipv4Prefix");
    if let Some(var_124) = &input.ipv4_prefixes {
        let mut list_126 = scope_123.start_list(true, Some("item"));
        for item_125 in var_124 {
            #[allow(unused_mut)]
            let mut entry_127 = list_126.entry();
            entry_127.string(item_125);
        }
        list_126.finish();
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_129) = &input.ipv4_prefix_count {
        scope_128.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_129).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("AllocationId");
    if let Some(var_131) = &input.allocation_id {
        scope_130.string(var_131);
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("InstanceId");
    if let Some(var_133) = &input.instance_id {
        scope_132.string(var_133);
    }
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("PublicIp");
    if let Some(var_135) = &input.public_ip {
        scope_134.string(var_135);
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("AllowReassociation");
    if let Some(var_137) = &input.allow_reassociation {
        scope_136.boolean(*var_137);
    }
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("DryRun");
    if let Some(var_139) = &input.dry_run {
        scope_138.boolean(*var_139);
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("NetworkInterfaceId");
    if let Some(var_141) = &input.network_interface_id {
        scope_140.string(var_141);
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("PrivateIpAddress");
    if let Some(var_143) = &input.private_ip_address {
        scope_142.string(var_143);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateClientVpnTargetNetwork", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_145) = &input.client_vpn_endpoint_id {
        scope_144.string(var_145);
    }
    #[allow(unused_mut)]
    let mut scope_146 = writer.prefix("SubnetId");
    if let Some(var_147) = &input.subnet_id {
        scope_146.string(var_147);
    }
    #[allow(unused_mut)]
    let mut scope_148 = writer.prefix("ClientToken");
    if let Some(var_149) = &input.client_token {
        scope_148.string(var_149);
    }
    #[allow(unused_mut)]
    let mut scope_150 = writer.prefix("DryRun");
    if let Some(var_151) = &input.dry_run {
        scope_150.boolean(*var_151);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_152 = writer.prefix("DhcpOptionsId");
    if let Some(var_153) = &input.dhcp_options_id {
        scope_152.string(var_153);
    }
    #[allow(unused_mut)]
    let mut scope_154 = writer.prefix("VpcId");
    if let Some(var_155) = &input.vpc_id {
        scope_154.string(var_155);
    }
    #[allow(unused_mut)]
    let mut scope_156 = writer.prefix("DryRun");
    if let Some(var_157) = &input.dry_run {
        scope_156.boolean(*var_157);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_158 = writer.prefix("CertificateArn");
    if let Some(var_159) = &input.certificate_arn {
        scope_158.string(var_159);
    }
    #[allow(unused_mut)]
    let mut scope_160 = writer.prefix("RoleArn");
    if let Some(var_161) = &input.role_arn {
        scope_160.string(var_161);
    }
    #[allow(unused_mut)]
    let mut scope_162 = writer.prefix("DryRun");
    if let Some(var_163) = &input.dry_run {
        scope_162.boolean(*var_163);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("IamInstanceProfile");
    if let Some(var_165) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_iam_instance_profile_specification(
            scope_164, var_165,
        );
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("InstanceId");
    if let Some(var_167) = &input.instance_id {
        scope_166.string(var_167);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_instance_event_window(
    input: &crate::input::AssociateInstanceEventWindowInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("DryRun");
    if let Some(var_169) = &input.dry_run {
        scope_168.boolean(*var_169);
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("InstanceEventWindowId");
    if let Some(var_171) = &input.instance_event_window_id {
        scope_170.string(var_171);
    }
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("AssociationTarget");
    if let Some(var_173) = &input.association_target {
        crate::query_ser::serialize_structure_instance_event_window_association_request(
            scope_172, var_173,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("DryRun");
    if let Some(var_175) = &input.dry_run {
        scope_174.boolean(*var_175);
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("RouteTableId");
    if let Some(var_177) = &input.route_table_id {
        scope_176.string(var_177);
    }
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("SubnetId");
    if let Some(var_179) = &input.subnet_id {
        scope_178.string(var_179);
    }
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("GatewayId");
    if let Some(var_181) = &input.gateway_id {
        scope_180.string(var_181);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_183) = &input.ipv6_cidr_block {
        scope_182.string(var_183);
    }
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("SubnetId");
    if let Some(var_185) = &input.subnet_id {
        scope_184.string(var_185);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_187) = &input.transit_gateway_multicast_domain_id {
        scope_186.string(var_187);
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_189) = &input.transit_gateway_attachment_id {
        scope_188.string(var_189);
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("SubnetIds");
    if let Some(var_191) = &input.subnet_ids {
        let mut list_193 = scope_190.start_list(true, Some("item"));
        for item_192 in var_191 {
            #[allow(unused_mut)]
            let mut entry_194 = list_193.entry();
            entry_194.string(item_192);
        }
        list_193.finish();
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("DryRun");
    if let Some(var_196) = &input.dry_run {
        scope_195.boolean(*var_196);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_198) = &input.transit_gateway_route_table_id {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_200) = &input.transit_gateway_attachment_id {
        scope_199.string(var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("DryRun");
    if let Some(var_202) = &input.dry_run {
        scope_201.boolean(*var_202);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_trunk_interface(
    input: &crate::input::AssociateTrunkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("BranchInterfaceId");
    if let Some(var_204) = &input.branch_interface_id {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("TrunkInterfaceId");
    if let Some(var_206) = &input.trunk_interface_id {
        scope_205.string(var_206);
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("VlanId");
    if let Some(var_208) = &input.vlan_id {
        scope_207.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_208).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("GreKey");
    if let Some(var_210) = &input.gre_key {
        scope_209.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_210).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("ClientToken");
    if let Some(var_212) = &input.client_token {
        scope_211.string(var_212);
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("DryRun");
    if let Some(var_214) = &input.dry_run {
        scope_213.boolean(*var_214);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_216) = &input.amazon_provided_ipv6_cidr_block {
        scope_215.boolean(*var_216);
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("CidrBlock");
    if let Some(var_218) = &input.cidr_block {
        scope_217.string(var_218);
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("VpcId");
    if let Some(var_220) = &input.vpc_id {
        scope_219.string(var_220);
    }
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_222) = &input.ipv6_cidr_block_network_border_group {
        scope_221.string(var_222);
    }
    #[allow(unused_mut)]
    let mut scope_223 = writer.prefix("Ipv6Pool");
    if let Some(var_224) = &input.ipv6_pool {
        scope_223.string(var_224);
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_226) = &input.ipv6_cidr_block {
        scope_225.string(var_226);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("DryRun");
    if let Some(var_228) = &input.dry_run {
        scope_227.boolean(*var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("SecurityGroupId");
    if let Some(var_230) = &input.groups {
        let mut list_232 = scope_229.start_list(true, Some("groupId"));
        for item_231 in var_230 {
            #[allow(unused_mut)]
            let mut entry_233 = list_232.entry();
            entry_233.string(item_231);
        }
        list_232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("InstanceId");
    if let Some(var_235) = &input.instance_id {
        scope_234.string(var_235);
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("VpcId");
    if let Some(var_237) = &input.vpc_id {
        scope_236.string(var_237);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("DryRun");
    if let Some(var_239) = &input.dry_run {
        scope_238.boolean(*var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("InternetGatewayId");
    if let Some(var_241) = &input.internet_gateway_id {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("VpcId");
    if let Some(var_243) = &input.vpc_id {
        scope_242.string(var_243);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("DeviceIndex");
    if let Some(var_245) = &input.device_index {
        scope_244.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_245).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("DryRun");
    if let Some(var_247) = &input.dry_run {
        scope_246.boolean(*var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("InstanceId");
    if let Some(var_249) = &input.instance_id {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("NetworkInterfaceId");
    if let Some(var_251) = &input.network_interface_id {
        scope_250.string(var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("NetworkCardIndex");
    if let Some(var_253) = &input.network_card_index {
        scope_252.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_253).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("Device");
    if let Some(var_255) = &input.device {
        scope_254.string(var_255);
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("InstanceId");
    if let Some(var_257) = &input.instance_id {
        scope_256.string(var_257);
    }
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("VolumeId");
    if let Some(var_259) = &input.volume_id {
        scope_258.string(var_259);
    }
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("DryRun");
    if let Some(var_261) = &input.dry_run {
        scope_260.boolean(*var_261);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("VpcId");
    if let Some(var_263) = &input.vpc_id {
        scope_262.string(var_263);
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("VpnGatewayId");
    if let Some(var_265) = &input.vpn_gateway_id {
        scope_264.string(var_265);
    }
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("DryRun");
    if let Some(var_267) = &input.dry_run {
        scope_266.boolean(*var_267);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_269) = &input.client_vpn_endpoint_id {
        scope_268.string(var_269);
    }
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("TargetNetworkCidr");
    if let Some(var_271) = &input.target_network_cidr {
        scope_270.string(var_271);
    }
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("AccessGroupId");
    if let Some(var_273) = &input.access_group_id {
        scope_272.string(var_273);
    }
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_275) = &input.authorize_all_groups {
        scope_274.boolean(*var_275);
    }
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("Description");
    if let Some(var_277) = &input.description {
        scope_276.string(var_277);
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("ClientToken");
    if let Some(var_279) = &input.client_token {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("DryRun");
    if let Some(var_281) = &input.dry_run {
        scope_280.boolean(*var_281);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("DryRun");
    if let Some(var_283) = &input.dry_run {
        scope_282.boolean(*var_283);
    }
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("GroupId");
    if let Some(var_285) = &input.group_id {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("IpPermissions");
    if let Some(var_287) = &input.ip_permissions {
        let mut list_289 = scope_286.start_list(true, Some("item"));
        for item_288 in var_287 {
            #[allow(unused_mut)]
            let mut entry_290 = list_289.entry();
            crate::query_ser::serialize_structure_ip_permission(entry_290, item_288);
        }
        list_289.finish();
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("TagSpecification");
    if let Some(var_292) = &input.tag_specifications {
        let mut list_294 = scope_291.start_list(true, Some("item"));
        for item_293 in var_292 {
            #[allow(unused_mut)]
            let mut entry_295 = list_294.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_295, item_293);
        }
        list_294.finish();
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("CidrIp");
    if let Some(var_297) = &input.cidr_ip {
        scope_296.string(var_297);
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("FromPort");
    if let Some(var_299) = &input.from_port {
        scope_298.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_299).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("IpProtocol");
    if let Some(var_301) = &input.ip_protocol {
        scope_300.string(var_301);
    }
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("ToPort");
    if let Some(var_303) = &input.to_port {
        scope_302.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_303).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_305) = &input.source_security_group_name {
        scope_304.string(var_305);
    }
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_307) = &input.source_security_group_owner_id {
        scope_306.string(var_307);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("CidrIp");
    if let Some(var_309) = &input.cidr_ip {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("FromPort");
    if let Some(var_311) = &input.from_port {
        scope_310.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_311).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("GroupId");
    if let Some(var_313) = &input.group_id {
        scope_312.string(var_313);
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("GroupName");
    if let Some(var_315) = &input.group_name {
        scope_314.string(var_315);
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("IpPermissions");
    if let Some(var_317) = &input.ip_permissions {
        let mut list_319 = scope_316.start_list(true, Some("item"));
        for item_318 in var_317 {
            #[allow(unused_mut)]
            let mut entry_320 = list_319.entry();
            crate::query_ser::serialize_structure_ip_permission(entry_320, item_318);
        }
        list_319.finish();
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("IpProtocol");
    if let Some(var_322) = &input.ip_protocol {
        scope_321.string(var_322);
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_324) = &input.source_security_group_name {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_326) = &input.source_security_group_owner_id {
        scope_325.string(var_326);
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("ToPort");
    if let Some(var_328) = &input.to_port {
        scope_327.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_328).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("DryRun");
    if let Some(var_330) = &input.dry_run {
        scope_329.boolean(*var_330);
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("TagSpecification");
    if let Some(var_332) = &input.tag_specifications {
        let mut list_334 = scope_331.start_list(true, Some("item"));
        for item_333 in var_332 {
            #[allow(unused_mut)]
            let mut entry_335 = list_334.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_335, item_333);
        }
        list_334.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("InstanceId");
    if let Some(var_337) = &input.instance_id {
        scope_336.string(var_337);
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("Storage");
    if let Some(var_339) = &input.storage {
        crate::query_ser::serialize_structure_storage(scope_338, var_339);
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("DryRun");
    if let Some(var_341) = &input.dry_run {
        scope_340.boolean(*var_341);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("BundleId");
    if let Some(var_343) = &input.bundle_id {
        scope_342.string(var_343);
    }
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("DryRun");
    if let Some(var_345) = &input.dry_run {
        scope_344.boolean(*var_345);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("CapacityReservationId");
    if let Some(var_347) = &input.capacity_reservation_id {
        scope_346.string(var_347);
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("DryRun");
    if let Some(var_349) = &input.dry_run {
        scope_348.boolean(*var_349);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("ConversionTaskId");
    if let Some(var_351) = &input.conversion_task_id {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("DryRun");
    if let Some(var_353) = &input.dry_run {
        scope_352.boolean(*var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("ReasonMessage");
    if let Some(var_355) = &input.reason_message {
        scope_354.string(var_355);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("ExportTaskId");
    if let Some(var_357) = &input.export_task_id {
        scope_356.string(var_357);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("CancelReason");
    if let Some(var_359) = &input.cancel_reason {
        scope_358.string(var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("DryRun");
    if let Some(var_361) = &input.dry_run {
        scope_360.boolean(*var_361);
    }
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("ImportTaskId");
    if let Some(var_363) = &input.import_task_id {
        scope_362.string(var_363);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelReservedInstancesListing", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_365) = &input.reserved_instances_listing_id {
        scope_364.string(var_365);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("DryRun");
    if let Some(var_367) = &input.dry_run {
        scope_366.boolean(*var_367);
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("SpotFleetRequestId");
    if let Some(var_369) = &input.spot_fleet_request_ids {
        let mut list_371 = scope_368.start_list(true, Some("item"));
        for item_370 in var_369 {
            #[allow(unused_mut)]
            let mut entry_372 = list_371.entry();
            entry_372.string(item_370);
        }
        list_371.finish();
    }
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("TerminateInstances");
    if let Some(var_374) = &input.terminate_instances {
        scope_373.boolean(*var_374);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("DryRun");
    if let Some(var_376) = &input.dry_run {
        scope_375.boolean(*var_376);
    }
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_378) = &input.spot_instance_request_ids {
        let mut list_380 = scope_377.start_list(true, Some("SpotInstanceRequestId"));
        for item_379 in var_378 {
            #[allow(unused_mut)]
            let mut entry_381 = list_380.entry();
            entry_381.string(item_379);
        }
        list_380.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("InstanceId");
    if let Some(var_383) = &input.instance_id {
        scope_382.string(var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("ProductCode");
    if let Some(var_385) = &input.product_code {
        scope_384.string(var_385);
    }
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("DryRun");
    if let Some(var_387) = &input.dry_run {
        scope_386.boolean(*var_387);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("DryRun");
    if let Some(var_389) = &input.dry_run {
        scope_388.boolean(*var_389);
    }
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("SourceFpgaImageId");
    if let Some(var_391) = &input.source_fpga_image_id {
        scope_390.string(var_391);
    }
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("Description");
    if let Some(var_393) = &input.description {
        scope_392.string(var_393);
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("Name");
    if let Some(var_395) = &input.name {
        scope_394.string(var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("SourceRegion");
    if let Some(var_397) = &input.source_region {
        scope_396.string(var_397);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("ClientToken");
    if let Some(var_399) = &input.client_token {
        scope_398.string(var_399);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("ClientToken");
    if let Some(var_401) = &input.client_token {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("Description");
    if let Some(var_403) = &input.description {
        scope_402.string(var_403);
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("Encrypted");
    if let Some(var_405) = &input.encrypted {
        scope_404.boolean(*var_405);
    }
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("KmsKeyId");
    if let Some(var_407) = &input.kms_key_id {
        scope_406.string(var_407);
    }
    #[allow(unused_mut)]
    let mut scope_408 = writer.prefix("Name");
    if let Some(var_409) = &input.name {
        scope_408.string(var_409);
    }
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("SourceImageId");
    if let Some(var_411) = &input.source_image_id {
        scope_410.string(var_411);
    }
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("SourceRegion");
    if let Some(var_413) = &input.source_region {
        scope_412.string(var_413);
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("DestinationOutpostArn");
    if let Some(var_415) = &input.destination_outpost_arn {
        scope_414.string(var_415);
    }
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("DryRun");
    if let Some(var_417) = &input.dry_run {
        scope_416.boolean(*var_417);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("Description");
    if let Some(var_419) = &input.description {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("DestinationOutpostArn");
    if let Some(var_421) = &input.destination_outpost_arn {
        scope_420.string(var_421);
    }
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("DestinationRegion");
    if let Some(var_423) = &input.destination_region {
        scope_422.string(var_423);
    }
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("Encrypted");
    if let Some(var_425) = &input.encrypted {
        scope_424.boolean(*var_425);
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("KmsKeyId");
    if let Some(var_427) = &input.kms_key_id {
        scope_426.string(var_427);
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("PresignedUrl");
    if let Some(var_429) = &input.presigned_url {
        scope_428.string(var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("SourceRegion");
    if let Some(var_431) = &input.source_region {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("SourceSnapshotId");
    if let Some(var_433) = &input.source_snapshot_id {
        scope_432.string(var_433);
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("TagSpecification");
    if let Some(var_435) = &input.tag_specifications {
        let mut list_437 = scope_434.start_list(true, Some("item"));
        for item_436 in var_435 {
            #[allow(unused_mut)]
            let mut entry_438 = list_437.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_438, item_436);
        }
        list_437.finish();
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("DryRun");
    if let Some(var_440) = &input.dry_run {
        scope_439.boolean(*var_440);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("ClientToken");
    if let Some(var_442) = &input.client_token {
        scope_441.string(var_442);
    }
    #[allow(unused_mut)]
    let mut scope_443 = writer.prefix("InstanceType");
    if let Some(var_444) = &input.instance_type {
        scope_443.string(var_444);
    }
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("InstancePlatform");
    if let Some(var_446) = &input.instance_platform {
        scope_445.string(var_446.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("AvailabilityZone");
    if let Some(var_448) = &input.availability_zone {
        scope_447.string(var_448);
    }
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("AvailabilityZoneId");
    if let Some(var_450) = &input.availability_zone_id {
        scope_449.string(var_450);
    }
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("Tenancy");
    if let Some(var_452) = &input.tenancy {
        scope_451.string(var_452.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("InstanceCount");
    if let Some(var_454) = &input.instance_count {
        scope_453.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_454).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("EbsOptimized");
    if let Some(var_456) = &input.ebs_optimized {
        scope_455.boolean(*var_456);
    }
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("EphemeralStorage");
    if let Some(var_458) = &input.ephemeral_storage {
        scope_457.boolean(*var_458);
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("EndDate");
    if let Some(var_460) = &input.end_date {
        scope_459.instant(var_460, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("EndDateType");
    if let Some(var_462) = &input.end_date_type {
        scope_461.string(var_462.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_464) = &input.instance_match_criteria {
        scope_463.string(var_464.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("TagSpecifications");
    if let Some(var_466) = &input.tag_specifications {
        let mut list_468 = scope_465.start_list(true, Some("item"));
        for item_467 in var_466 {
            #[allow(unused_mut)]
            let mut entry_469 = list_468.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_469, item_467);
        }
        list_468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("DryRun");
    if let Some(var_471) = &input.dry_run {
        scope_470.boolean(*var_471);
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("OutpostArn");
    if let Some(var_473) = &input.outpost_arn {
        scope_472.string(var_473);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("VpcId");
    if let Some(var_475) = &input.vpc_id {
        scope_474.string(var_475);
    }
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("TagSpecification");
    if let Some(var_477) = &input.tag_specifications {
        let mut list_479 = scope_476.start_list(true, Some("item"));
        for item_478 in var_477 {
            #[allow(unused_mut)]
            let mut entry_480 = list_479.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_480, item_478);
        }
        list_479.finish();
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("DryRun");
    if let Some(var_482) = &input.dry_run {
        scope_481.boolean(*var_482);
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("ClientToken");
    if let Some(var_484) = &input.client_token {
        scope_483.string(var_484);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("ClientCidrBlock");
    if let Some(var_486) = &input.client_cidr_block {
        scope_485.string(var_486);
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("ServerCertificateArn");
    if let Some(var_488) = &input.server_certificate_arn {
        scope_487.string(var_488);
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("Authentication");
    if let Some(var_490) = &input.authentication_options {
        let mut list_492 = scope_489.start_list(true, None);
        for item_491 in var_490 {
            #[allow(unused_mut)]
            let mut entry_493 = list_492.entry();
            crate::query_ser::serialize_structure_client_vpn_authentication_request(
                entry_493, item_491,
            );
        }
        list_492.finish();
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("ConnectionLogOptions");
    if let Some(var_495) = &input.connection_log_options {
        crate::query_ser::serialize_structure_connection_log_options(scope_494, var_495);
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("DnsServers");
    if let Some(var_497) = &input.dns_servers {
        let mut list_499 = scope_496.start_list(true, Some("item"));
        for item_498 in var_497 {
            #[allow(unused_mut)]
            let mut entry_500 = list_499.entry();
            entry_500.string(item_498);
        }
        list_499.finish();
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("TransportProtocol");
    if let Some(var_502) = &input.transport_protocol {
        scope_501.string(var_502.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("VpnPort");
    if let Some(var_504) = &input.vpn_port {
        scope_503.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_504).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("Description");
    if let Some(var_506) = &input.description {
        scope_505.string(var_506);
    }
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("SplitTunnel");
    if let Some(var_508) = &input.split_tunnel {
        scope_507.boolean(*var_508);
    }
    #[allow(unused_mut)]
    let mut scope_509 = writer.prefix("DryRun");
    if let Some(var_510) = &input.dry_run {
        scope_509.boolean(*var_510);
    }
    #[allow(unused_mut)]
    let mut scope_511 = writer.prefix("ClientToken");
    if let Some(var_512) = &input.client_token {
        scope_511.string(var_512);
    }
    #[allow(unused_mut)]
    let mut scope_513 = writer.prefix("TagSpecification");
    if let Some(var_514) = &input.tag_specifications {
        let mut list_516 = scope_513.start_list(true, Some("item"));
        for item_515 in var_514 {
            #[allow(unused_mut)]
            let mut entry_517 = list_516.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_517, item_515);
        }
        list_516.finish();
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("SecurityGroupId");
    if let Some(var_519) = &input.security_group_ids {
        let mut list_521 = scope_518.start_list(true, Some("item"));
        for item_520 in var_519 {
            #[allow(unused_mut)]
            let mut entry_522 = list_521.entry();
            entry_522.string(item_520);
        }
        list_521.finish();
    }
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("VpcId");
    if let Some(var_524) = &input.vpc_id {
        scope_523.string(var_524);
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("SelfServicePortal");
    if let Some(var_526) = &input.self_service_portal {
        scope_525.string(var_526.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("ClientConnectOptions");
    if let Some(var_528) = &input.client_connect_options {
        crate::query_ser::serialize_structure_client_connect_options(scope_527, var_528);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_530) = &input.client_vpn_endpoint_id {
        scope_529.string(var_530);
    }
    #[allow(unused_mut)]
    let mut scope_531 = writer.prefix("DestinationCidrBlock");
    if let Some(var_532) = &input.destination_cidr_block {
        scope_531.string(var_532);
    }
    #[allow(unused_mut)]
    let mut scope_533 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_534) = &input.target_vpc_subnet_id {
        scope_533.string(var_534);
    }
    #[allow(unused_mut)]
    let mut scope_535 = writer.prefix("Description");
    if let Some(var_536) = &input.description {
        scope_535.string(var_536);
    }
    #[allow(unused_mut)]
    let mut scope_537 = writer.prefix("ClientToken");
    if let Some(var_538) = &input.client_token {
        scope_537.string(var_538);
    }
    #[allow(unused_mut)]
    let mut scope_539 = writer.prefix("DryRun");
    if let Some(var_540) = &input.dry_run {
        scope_539.boolean(*var_540);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_541 = writer.prefix("BgpAsn");
    if let Some(var_542) = &input.bgp_asn {
        scope_541.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_542).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("IpAddress");
    if let Some(var_544) = &input.public_ip {
        scope_543.string(var_544);
    }
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("CertificateArn");
    if let Some(var_546) = &input.certificate_arn {
        scope_545.string(var_546);
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("Type");
    if let Some(var_548) = &input.r#type {
        scope_547.string(var_548.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("TagSpecification");
    if let Some(var_550) = &input.tag_specifications {
        let mut list_552 = scope_549.start_list(true, Some("item"));
        for item_551 in var_550 {
            #[allow(unused_mut)]
            let mut entry_553 = list_552.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_553, item_551);
        }
        list_552.finish();
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("DeviceName");
    if let Some(var_555) = &input.device_name {
        scope_554.string(var_555);
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("DryRun");
    if let Some(var_557) = &input.dry_run {
        scope_556.boolean(*var_557);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("AvailabilityZone");
    if let Some(var_559) = &input.availability_zone {
        scope_558.string(var_559);
    }
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("DryRun");
    if let Some(var_561) = &input.dry_run {
        scope_560.boolean(*var_561);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("DryRun");
    if let Some(var_563) = &input.dry_run {
        scope_562.boolean(*var_563);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("DhcpConfiguration");
    if let Some(var_565) = &input.dhcp_configurations {
        let mut list_567 = scope_564.start_list(true, Some("item"));
        for item_566 in var_565 {
            #[allow(unused_mut)]
            let mut entry_568 = list_567.entry();
            crate::query_ser::serialize_structure_new_dhcp_configuration(entry_568, item_566);
        }
        list_567.finish();
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("TagSpecification");
    if let Some(var_570) = &input.tag_specifications {
        let mut list_572 = scope_569.start_list(true, Some("item"));
        for item_571 in var_570 {
            #[allow(unused_mut)]
            let mut entry_573 = list_572.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_573, item_571);
        }
        list_572.finish();
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("DryRun");
    if let Some(var_575) = &input.dry_run {
        scope_574.boolean(*var_575);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateEgressOnlyInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("ClientToken");
    if let Some(var_577) = &input.client_token {
        scope_576.string(var_577);
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("DryRun");
    if let Some(var_579) = &input.dry_run {
        scope_578.boolean(*var_579);
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("VpcId");
    if let Some(var_581) = &input.vpc_id {
        scope_580.string(var_581);
    }
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("TagSpecification");
    if let Some(var_583) = &input.tag_specifications {
        let mut list_585 = scope_582.start_list(true, Some("item"));
        for item_584 in var_583 {
            #[allow(unused_mut)]
            let mut entry_586 = list_585.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_586, item_584);
        }
        list_585.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("DryRun");
    if let Some(var_588) = &input.dry_run {
        scope_587.boolean(*var_588);
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("ClientToken");
    if let Some(var_590) = &input.client_token {
        scope_589.string(var_590);
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("SpotOptions");
    if let Some(var_592) = &input.spot_options {
        crate::query_ser::serialize_structure_spot_options_request(scope_591, var_592);
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("OnDemandOptions");
    if let Some(var_594) = &input.on_demand_options {
        crate::query_ser::serialize_structure_on_demand_options_request(scope_593, var_594);
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_596) = &input.excess_capacity_termination_policy {
        scope_595.string(var_596.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_598) = &input.launch_template_configs {
        let mut list_600 = scope_597.start_list(true, Some("item"));
        for item_599 in var_598 {
            #[allow(unused_mut)]
            let mut entry_601 = list_600.entry();
            crate::query_ser::serialize_structure_fleet_launch_template_config_request(
                entry_601, item_599,
            );
        }
        list_600.finish();
    }
    #[allow(unused_mut)]
    let mut scope_602 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_603) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_target_capacity_specification_request(
            scope_602, var_603,
        );
    }
    #[allow(unused_mut)]
    let mut scope_604 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_605) = &input.terminate_instances_with_expiration {
        scope_604.boolean(*var_605);
    }
    #[allow(unused_mut)]
    let mut scope_606 = writer.prefix("Type");
    if let Some(var_607) = &input.r#type {
        scope_606.string(var_607.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_608 = writer.prefix("ValidFrom");
    if let Some(var_609) = &input.valid_from {
        scope_608.instant(var_609, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_610 = writer.prefix("ValidUntil");
    if let Some(var_611) = &input.valid_until {
        scope_610.instant(var_611, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_612 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_613) = &input.replace_unhealthy_instances {
        scope_612.boolean(*var_613);
    }
    #[allow(unused_mut)]
    let mut scope_614 = writer.prefix("TagSpecification");
    if let Some(var_615) = &input.tag_specifications {
        let mut list_617 = scope_614.start_list(true, Some("item"));
        for item_616 in var_615 {
            #[allow(unused_mut)]
            let mut entry_618 = list_617.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_618, item_616);
        }
        list_617.finish();
    }
    #[allow(unused_mut)]
    let mut scope_619 = writer.prefix("Context");
    if let Some(var_620) = &input.context {
        scope_619.string(var_620);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_621 = writer.prefix("DryRun");
    if let Some(var_622) = &input.dry_run {
        scope_621.boolean(*var_622);
    }
    #[allow(unused_mut)]
    let mut scope_623 = writer.prefix("ClientToken");
    if let Some(var_624) = &input.client_token {
        scope_623.string(var_624);
    }
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_626) = &input.deliver_logs_permission_arn {
        scope_625.string(var_626);
    }
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("LogGroupName");
    if let Some(var_628) = &input.log_group_name {
        scope_627.string(var_628);
    }
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("ResourceId");
    if let Some(var_630) = &input.resource_ids {
        let mut list_632 = scope_629.start_list(true, Some("item"));
        for item_631 in var_630 {
            #[allow(unused_mut)]
            let mut entry_633 = list_632.entry();
            entry_633.string(item_631);
        }
        list_632.finish();
    }
    #[allow(unused_mut)]
    let mut scope_634 = writer.prefix("ResourceType");
    if let Some(var_635) = &input.resource_type {
        scope_634.string(var_635.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_636 = writer.prefix("TrafficType");
    if let Some(var_637) = &input.traffic_type {
        scope_636.string(var_637.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_638 = writer.prefix("LogDestinationType");
    if let Some(var_639) = &input.log_destination_type {
        scope_638.string(var_639.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_640 = writer.prefix("LogDestination");
    if let Some(var_641) = &input.log_destination {
        scope_640.string(var_641);
    }
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("LogFormat");
    if let Some(var_643) = &input.log_format {
        scope_642.string(var_643);
    }
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("TagSpecification");
    if let Some(var_645) = &input.tag_specifications {
        let mut list_647 = scope_644.start_list(true, Some("item"));
        for item_646 in var_645 {
            #[allow(unused_mut)]
            let mut entry_648 = list_647.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_648, item_646);
        }
        list_647.finish();
    }
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("MaxAggregationInterval");
    if let Some(var_650) = &input.max_aggregation_interval {
        scope_649.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_650).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("DryRun");
    if let Some(var_652) = &input.dry_run {
        scope_651.boolean(*var_652);
    }
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("InputStorageLocation");
    if let Some(var_654) = &input.input_storage_location {
        crate::query_ser::serialize_structure_storage_location(scope_653, var_654);
    }
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("LogsStorageLocation");
    if let Some(var_656) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_storage_location(scope_655, var_656);
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("Description");
    if let Some(var_658) = &input.description {
        scope_657.string(var_658);
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("Name");
    if let Some(var_660) = &input.name {
        scope_659.string(var_660);
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("ClientToken");
    if let Some(var_662) = &input.client_token {
        scope_661.string(var_662);
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("TagSpecification");
    if let Some(var_664) = &input.tag_specifications {
        let mut list_666 = scope_663.start_list(true, Some("item"));
        for item_665 in var_664 {
            #[allow(unused_mut)]
            let mut entry_667 = list_666.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_667, item_665);
        }
        list_666.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_668 = writer.prefix("BlockDeviceMapping");
    if let Some(var_669) = &input.block_device_mappings {
        let mut list_671 = scope_668.start_list(true, Some("BlockDeviceMapping"));
        for item_670 in var_669 {
            #[allow(unused_mut)]
            let mut entry_672 = list_671.entry();
            crate::query_ser::serialize_structure_block_device_mapping(entry_672, item_670);
        }
        list_671.finish();
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("Description");
    if let Some(var_674) = &input.description {
        scope_673.string(var_674);
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("DryRun");
    if let Some(var_676) = &input.dry_run {
        scope_675.boolean(*var_676);
    }
    #[allow(unused_mut)]
    let mut scope_677 = writer.prefix("InstanceId");
    if let Some(var_678) = &input.instance_id {
        scope_677.string(var_678);
    }
    #[allow(unused_mut)]
    let mut scope_679 = writer.prefix("Name");
    if let Some(var_680) = &input.name {
        scope_679.string(var_680);
    }
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("NoReboot");
    if let Some(var_682) = &input.no_reboot {
        scope_681.boolean(*var_682);
    }
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("TagSpecification");
    if let Some(var_684) = &input.tag_specifications {
        let mut list_686 = scope_683.start_list(true, Some("item"));
        for item_685 in var_684 {
            #[allow(unused_mut)]
            let mut entry_687 = list_686.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_687, item_685);
        }
        list_686.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_instance_event_window(
    input: &crate::input::CreateInstanceEventWindowInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("DryRun");
    if let Some(var_689) = &input.dry_run {
        scope_688.boolean(*var_689);
    }
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("Name");
    if let Some(var_691) = &input.name {
        scope_690.string(var_691);
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("TimeRange");
    if let Some(var_693) = &input.time_ranges {
        let mut list_695 = scope_692.start_list(true, None);
        for item_694 in var_693 {
            #[allow(unused_mut)]
            let mut entry_696 = list_695.entry();
            crate::query_ser::serialize_structure_instance_event_window_time_range_request(
                entry_696, item_694,
            );
        }
        list_695.finish();
    }
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("CronExpression");
    if let Some(var_698) = &input.cron_expression {
        scope_697.string(var_698);
    }
    #[allow(unused_mut)]
    let mut scope_699 = writer.prefix("TagSpecification");
    if let Some(var_700) = &input.tag_specifications {
        let mut list_702 = scope_699.start_list(true, Some("item"));
        for item_701 in var_700 {
            #[allow(unused_mut)]
            let mut entry_703 = list_702.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_703, item_701);
        }
        list_702.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("Description");
    if let Some(var_705) = &input.description {
        scope_704.string(var_705);
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("ExportToS3");
    if let Some(var_707) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_export_to_s3_task_specification(scope_706, var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("InstanceId");
    if let Some(var_709) = &input.instance_id {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("TargetEnvironment");
    if let Some(var_711) = &input.target_environment {
        scope_710.string(var_711.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("TagSpecification");
    if let Some(var_713) = &input.tag_specifications {
        let mut list_715 = scope_712.start_list(true, Some("item"));
        for item_714 in var_713 {
            #[allow(unused_mut)]
            let mut entry_716 = list_715.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_716, item_714);
        }
        list_715.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_717 = writer.prefix("TagSpecification");
    if let Some(var_718) = &input.tag_specifications {
        let mut list_720 = scope_717.start_list(true, Some("item"));
        for item_719 in var_718 {
            #[allow(unused_mut)]
            let mut entry_721 = list_720.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_721, item_719);
        }
        list_720.finish();
    }
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("DryRun");
    if let Some(var_723) = &input.dry_run {
        scope_722.boolean(*var_723);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("KeyName");
    if let Some(var_725) = &input.key_name {
        scope_724.string(var_725);
    }
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("DryRun");
    if let Some(var_727) = &input.dry_run {
        scope_726.boolean(*var_727);
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("TagSpecification");
    if let Some(var_729) = &input.tag_specifications {
        let mut list_731 = scope_728.start_list(true, Some("item"));
        for item_730 in var_729 {
            #[allow(unused_mut)]
            let mut entry_732 = list_731.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_732, item_730);
        }
        list_731.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_733 = writer.prefix("DryRun");
    if let Some(var_734) = &input.dry_run {
        scope_733.boolean(*var_734);
    }
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("ClientToken");
    if let Some(var_736) = &input.client_token {
        scope_735.string(var_736);
    }
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("LaunchTemplateName");
    if let Some(var_738) = &input.launch_template_name {
        scope_737.string(var_738);
    }
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("VersionDescription");
    if let Some(var_740) = &input.version_description {
        scope_739.string(var_740);
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("LaunchTemplateData");
    if let Some(var_742) = &input.launch_template_data {
        crate::query_ser::serialize_structure_request_launch_template_data(scope_741, var_742);
    }
    #[allow(unused_mut)]
    let mut scope_743 = writer.prefix("TagSpecification");
    if let Some(var_744) = &input.tag_specifications {
        let mut list_746 = scope_743.start_list(true, Some("item"));
        for item_745 in var_744 {
            #[allow(unused_mut)]
            let mut entry_747 = list_746.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_747, item_745);
        }
        list_746.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_748 = writer.prefix("DryRun");
    if let Some(var_749) = &input.dry_run {
        scope_748.boolean(*var_749);
    }
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("ClientToken");
    if let Some(var_751) = &input.client_token {
        scope_750.string(var_751);
    }
    #[allow(unused_mut)]
    let mut scope_752 = writer.prefix("LaunchTemplateId");
    if let Some(var_753) = &input.launch_template_id {
        scope_752.string(var_753);
    }
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("LaunchTemplateName");
    if let Some(var_755) = &input.launch_template_name {
        scope_754.string(var_755);
    }
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("SourceVersion");
    if let Some(var_757) = &input.source_version {
        scope_756.string(var_757);
    }
    #[allow(unused_mut)]
    let mut scope_758 = writer.prefix("VersionDescription");
    if let Some(var_759) = &input.version_description {
        scope_758.string(var_759);
    }
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("LaunchTemplateData");
    if let Some(var_761) = &input.launch_template_data {
        crate::query_ser::serialize_structure_request_launch_template_data(scope_760, var_761);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_762 = writer.prefix("DestinationCidrBlock");
    if let Some(var_763) = &input.destination_cidr_block {
        scope_762.string(var_763);
    }
    #[allow(unused_mut)]
    let mut scope_764 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_765) = &input.local_gateway_route_table_id {
        scope_764.string(var_765);
    }
    #[allow(unused_mut)]
    let mut scope_766 = writer.prefix("DryRun");
    if let Some(var_767) = &input.dry_run {
        scope_766.boolean(*var_767);
    }
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_769) = &input.local_gateway_virtual_interface_group_id {
        scope_768.string(var_769);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_771) = &input.local_gateway_route_table_id {
        scope_770.string(var_771);
    }
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("VpcId");
    if let Some(var_773) = &input.vpc_id {
        scope_772.string(var_773);
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("TagSpecification");
    if let Some(var_775) = &input.tag_specifications {
        let mut list_777 = scope_774.start_list(true, Some("item"));
        for item_776 in var_775 {
            #[allow(unused_mut)]
            let mut entry_778 = list_777.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_778, item_776);
        }
        list_777.finish();
    }
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("DryRun");
    if let Some(var_780) = &input.dry_run {
        scope_779.boolean(*var_780);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("DryRun");
    if let Some(var_782) = &input.dry_run {
        scope_781.boolean(*var_782);
    }
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("PrefixListName");
    if let Some(var_784) = &input.prefix_list_name {
        scope_783.string(var_784);
    }
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("Entry");
    if let Some(var_786) = &input.entries {
        let mut list_788 = scope_785.start_list(true, None);
        for item_787 in var_786 {
            #[allow(unused_mut)]
            let mut entry_789 = list_788.entry();
            crate::query_ser::serialize_structure_add_prefix_list_entry(entry_789, item_787);
        }
        list_788.finish();
    }
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("MaxEntries");
    if let Some(var_791) = &input.max_entries {
        scope_790.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_791).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("TagSpecification");
    if let Some(var_793) = &input.tag_specifications {
        let mut list_795 = scope_792.start_list(true, Some("item"));
        for item_794 in var_793 {
            #[allow(unused_mut)]
            let mut entry_796 = list_795.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_796, item_794);
        }
        list_795.finish();
    }
    #[allow(unused_mut)]
    let mut scope_797 = writer.prefix("AddressFamily");
    if let Some(var_798) = &input.address_family {
        scope_797.string(var_798);
    }
    #[allow(unused_mut)]
    let mut scope_799 = writer.prefix("ClientToken");
    if let Some(var_800) = &input.client_token {
        scope_799.string(var_800);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("AllocationId");
    if let Some(var_802) = &input.allocation_id {
        scope_801.string(var_802);
    }
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("ClientToken");
    if let Some(var_804) = &input.client_token {
        scope_803.string(var_804);
    }
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("DryRun");
    if let Some(var_806) = &input.dry_run {
        scope_805.boolean(*var_806);
    }
    #[allow(unused_mut)]
    let mut scope_807 = writer.prefix("SubnetId");
    if let Some(var_808) = &input.subnet_id {
        scope_807.string(var_808);
    }
    #[allow(unused_mut)]
    let mut scope_809 = writer.prefix("TagSpecification");
    if let Some(var_810) = &input.tag_specifications {
        let mut list_812 = scope_809.start_list(true, Some("item"));
        for item_811 in var_810 {
            #[allow(unused_mut)]
            let mut entry_813 = list_812.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_813, item_811);
        }
        list_812.finish();
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("ConnectivityType");
    if let Some(var_815) = &input.connectivity_type {
        scope_814.string(var_815.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("DryRun");
    if let Some(var_817) = &input.dry_run {
        scope_816.boolean(*var_817);
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("VpcId");
    if let Some(var_819) = &input.vpc_id {
        scope_818.string(var_819);
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("TagSpecification");
    if let Some(var_821) = &input.tag_specifications {
        let mut list_823 = scope_820.start_list(true, Some("item"));
        for item_822 in var_821 {
            #[allow(unused_mut)]
            let mut entry_824 = list_823.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_824, item_822);
        }
        list_823.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_825 = writer.prefix("CidrBlock");
    if let Some(var_826) = &input.cidr_block {
        scope_825.string(var_826);
    }
    #[allow(unused_mut)]
    let mut scope_827 = writer.prefix("DryRun");
    if let Some(var_828) = &input.dry_run {
        scope_827.boolean(*var_828);
    }
    #[allow(unused_mut)]
    let mut scope_829 = writer.prefix("Egress");
    if let Some(var_830) = &input.egress {
        scope_829.boolean(*var_830);
    }
    #[allow(unused_mut)]
    let mut scope_831 = writer.prefix("Icmp");
    if let Some(var_832) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_icmp_type_code(scope_831, var_832);
    }
    #[allow(unused_mut)]
    let mut scope_833 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_834) = &input.ipv6_cidr_block {
        scope_833.string(var_834);
    }
    #[allow(unused_mut)]
    let mut scope_835 = writer.prefix("NetworkAclId");
    if let Some(var_836) = &input.network_acl_id {
        scope_835.string(var_836);
    }
    #[allow(unused_mut)]
    let mut scope_837 = writer.prefix("PortRange");
    if let Some(var_838) = &input.port_range {
        crate::query_ser::serialize_structure_port_range(scope_837, var_838);
    }
    #[allow(unused_mut)]
    let mut scope_839 = writer.prefix("Protocol");
    if let Some(var_840) = &input.protocol {
        scope_839.string(var_840);
    }
    #[allow(unused_mut)]
    let mut scope_841 = writer.prefix("RuleAction");
    if let Some(var_842) = &input.rule_action {
        scope_841.string(var_842.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_843 = writer.prefix("RuleNumber");
    if let Some(var_844) = &input.rule_number {
        scope_843.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_844).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_845 = writer.prefix("SourceIp");
    if let Some(var_846) = &input.source_ip {
        scope_845.string(var_846);
    }
    #[allow(unused_mut)]
    let mut scope_847 = writer.prefix("DestinationIp");
    if let Some(var_848) = &input.destination_ip {
        scope_847.string(var_848);
    }
    #[allow(unused_mut)]
    let mut scope_849 = writer.prefix("Source");
    if let Some(var_850) = &input.source {
        scope_849.string(var_850);
    }
    #[allow(unused_mut)]
    let mut scope_851 = writer.prefix("Destination");
    if let Some(var_852) = &input.destination {
        scope_851.string(var_852);
    }
    #[allow(unused_mut)]
    let mut scope_853 = writer.prefix("Protocol");
    if let Some(var_854) = &input.protocol {
        scope_853.string(var_854.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("DestinationPort");
    if let Some(var_856) = &input.destination_port {
        scope_855.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_856).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_857 = writer.prefix("TagSpecification");
    if let Some(var_858) = &input.tag_specifications {
        let mut list_860 = scope_857.start_list(true, Some("item"));
        for item_859 in var_858 {
            #[allow(unused_mut)]
            let mut entry_861 = list_860.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_861, item_859);
        }
        list_860.finish();
    }
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("DryRun");
    if let Some(var_863) = &input.dry_run {
        scope_862.boolean(*var_863);
    }
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("ClientToken");
    if let Some(var_865) = &input.client_token {
        scope_864.string(var_865);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_866 = writer.prefix("Description");
    if let Some(var_867) = &input.description {
        scope_866.string(var_867);
    }
    #[allow(unused_mut)]
    let mut scope_868 = writer.prefix("DryRun");
    if let Some(var_869) = &input.dry_run {
        scope_868.boolean(*var_869);
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("SecurityGroupId");
    if let Some(var_871) = &input.groups {
        let mut list_873 = scope_870.start_list(true, Some("SecurityGroupId"));
        for item_872 in var_871 {
            #[allow(unused_mut)]
            let mut entry_874 = list_873.entry();
            entry_874.string(item_872);
        }
        list_873.finish();
    }
    #[allow(unused_mut)]
    let mut scope_875 = writer.prefix("Ipv6AddressCount");
    if let Some(var_876) = &input.ipv6_address_count {
        scope_875.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_876).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_877 = writer.prefix("Ipv6Addresses");
    if let Some(var_878) = &input.ipv6_addresses {
        let mut list_880 = scope_877.start_list(true, Some("item"));
        for item_879 in var_878 {
            #[allow(unused_mut)]
            let mut entry_881 = list_880.entry();
            crate::query_ser::serialize_structure_instance_ipv6_address(entry_881, item_879);
        }
        list_880.finish();
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("PrivateIpAddress");
    if let Some(var_883) = &input.private_ip_address {
        scope_882.string(var_883);
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("PrivateIpAddresses");
    if let Some(var_885) = &input.private_ip_addresses {
        let mut list_887 = scope_884.start_list(true, Some("item"));
        for item_886 in var_885 {
            #[allow(unused_mut)]
            let mut entry_888 = list_887.entry();
            crate::query_ser::serialize_structure_private_ip_address_specification(
                entry_888, item_886,
            );
        }
        list_887.finish();
    }
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_890) = &input.secondary_private_ip_address_count {
        scope_889.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_890).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("Ipv4Prefix");
    if let Some(var_892) = &input.ipv4_prefixes {
        let mut list_894 = scope_891.start_list(true, Some("item"));
        for item_893 in var_892 {
            #[allow(unused_mut)]
            let mut entry_895 = list_894.entry();
            crate::query_ser::serialize_structure_ipv4_prefix_specification_request(
                entry_895, item_893,
            );
        }
        list_894.finish();
    }
    #[allow(unused_mut)]
    let mut scope_896 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_897) = &input.ipv4_prefix_count {
        scope_896.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_897).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_898 = writer.prefix("Ipv6Prefix");
    if let Some(var_899) = &input.ipv6_prefixes {
        let mut list_901 = scope_898.start_list(true, Some("item"));
        for item_900 in var_899 {
            #[allow(unused_mut)]
            let mut entry_902 = list_901.entry();
            crate::query_ser::serialize_structure_ipv6_prefix_specification_request(
                entry_902, item_900,
            );
        }
        list_901.finish();
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_904) = &input.ipv6_prefix_count {
        scope_903.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_904).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("InterfaceType");
    if let Some(var_906) = &input.interface_type {
        scope_905.string(var_906.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("SubnetId");
    if let Some(var_908) = &input.subnet_id {
        scope_907.string(var_908);
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("TagSpecification");
    if let Some(var_910) = &input.tag_specifications {
        let mut list_912 = scope_909.start_list(true, Some("item"));
        for item_911 in var_910 {
            #[allow(unused_mut)]
            let mut entry_913 = list_912.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_913, item_911);
        }
        list_912.finish();
    }
    #[allow(unused_mut)]
    let mut scope_914 = writer.prefix("ClientToken");
    if let Some(var_915) = &input.client_token {
        scope_914.string(var_915);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterfacePermission", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_916 = writer.prefix("NetworkInterfaceId");
    if let Some(var_917) = &input.network_interface_id {
        scope_916.string(var_917);
    }
    #[allow(unused_mut)]
    let mut scope_918 = writer.prefix("AwsAccountId");
    if let Some(var_919) = &input.aws_account_id {
        scope_918.string(var_919);
    }
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("AwsService");
    if let Some(var_921) = &input.aws_service {
        scope_920.string(var_921);
    }
    #[allow(unused_mut)]
    let mut scope_922 = writer.prefix("Permission");
    if let Some(var_923) = &input.permission {
        scope_922.string(var_923.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_924 = writer.prefix("DryRun");
    if let Some(var_925) = &input.dry_run {
        scope_924.boolean(*var_925);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_926 = writer.prefix("DryRun");
    if let Some(var_927) = &input.dry_run {
        scope_926.boolean(*var_927);
    }
    #[allow(unused_mut)]
    let mut scope_928 = writer.prefix("GroupName");
    if let Some(var_929) = &input.group_name {
        scope_928.string(var_929);
    }
    #[allow(unused_mut)]
    let mut scope_930 = writer.prefix("Strategy");
    if let Some(var_931) = &input.strategy {
        scope_930.string(var_931.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_932 = writer.prefix("PartitionCount");
    if let Some(var_933) = &input.partition_count {
        scope_932.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_933).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_934 = writer.prefix("TagSpecification");
    if let Some(var_935) = &input.tag_specifications {
        let mut list_937 = scope_934.start_list(true, Some("item"));
        for item_936 in var_935 {
            #[allow(unused_mut)]
            let mut entry_938 = list_937.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_938, item_936);
        }
        list_937.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_939 = writer.prefix("InstanceId");
    if let Some(var_940) = &input.instance_id {
        scope_939.string(var_940);
    }
    #[allow(unused_mut)]
    let mut scope_941 = writer.prefix("SnapshotId");
    if let Some(var_942) = &input.snapshot_id {
        scope_941.string(var_942);
    }
    #[allow(unused_mut)]
    let mut scope_943 = writer.prefix("ClientToken");
    if let Some(var_944) = &input.client_token {
        scope_943.string(var_944);
    }
    #[allow(unused_mut)]
    let mut scope_945 = writer.prefix("DryRun");
    if let Some(var_946) = &input.dry_run {
        scope_945.boolean(*var_946);
    }
    #[allow(unused_mut)]
    let mut scope_947 = writer.prefix("TagSpecification");
    if let Some(var_948) = &input.tag_specifications {
        let mut list_950 = scope_947.start_list(true, Some("item"));
        for item_949 in var_948 {
            #[allow(unused_mut)]
            let mut entry_951 = list_950.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_951, item_949);
        }
        list_950.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateReservedInstancesListing", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_952 = writer.prefix("ClientToken");
    if let Some(var_953) = &input.client_token {
        scope_952.string(var_953);
    }
    #[allow(unused_mut)]
    let mut scope_954 = writer.prefix("InstanceCount");
    if let Some(var_955) = &input.instance_count {
        scope_954.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_955).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("PriceSchedules");
    if let Some(var_957) = &input.price_schedules {
        let mut list_959 = scope_956.start_list(true, Some("item"));
        for item_958 in var_957 {
            #[allow(unused_mut)]
            let mut entry_960 = list_959.entry();
            crate::query_ser::serialize_structure_price_schedule_specification(entry_960, item_958);
        }
        list_959.finish();
    }
    #[allow(unused_mut)]
    let mut scope_961 = writer.prefix("ReservedInstancesId");
    if let Some(var_962) = &input.reserved_instances_id {
        scope_961.string(var_962);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_963 = writer.prefix("Bucket");
    if let Some(var_964) = &input.bucket {
        scope_963.string(var_964);
    }
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("ObjectKey");
    if let Some(var_966) = &input.object_key {
        scope_965.string(var_966);
    }
    #[allow(unused_mut)]
    let mut scope_967 = writer.prefix("Name");
    if let Some(var_968) = &input.name {
        scope_967.string(var_968);
    }
    #[allow(unused_mut)]
    let mut scope_969 = writer.prefix("TagSpecification");
    if let Some(var_970) = &input.tag_specifications {
        let mut list_972 = scope_969.start_list(true, Some("item"));
        for item_971 in var_970 {
            #[allow(unused_mut)]
            let mut entry_973 = list_972.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_973, item_971);
        }
        list_972.finish();
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("DryRun");
    if let Some(var_975) = &input.dry_run {
        scope_974.boolean(*var_975);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("DestinationCidrBlock");
    if let Some(var_977) = &input.destination_cidr_block {
        scope_976.string(var_977);
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_979) = &input.destination_ipv6_cidr_block {
        scope_978.string(var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("DestinationPrefixListId");
    if let Some(var_981) = &input.destination_prefix_list_id {
        scope_980.string(var_981);
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("DryRun");
    if let Some(var_983) = &input.dry_run {
        scope_982.boolean(*var_983);
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("VpcEndpointId");
    if let Some(var_985) = &input.vpc_endpoint_id {
        scope_984.string(var_985);
    }
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_987) = &input.egress_only_internet_gateway_id {
        scope_986.string(var_987);
    }
    #[allow(unused_mut)]
    let mut scope_988 = writer.prefix("GatewayId");
    if let Some(var_989) = &input.gateway_id {
        scope_988.string(var_989);
    }
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("InstanceId");
    if let Some(var_991) = &input.instance_id {
        scope_990.string(var_991);
    }
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("NatGatewayId");
    if let Some(var_993) = &input.nat_gateway_id {
        scope_992.string(var_993);
    }
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("TransitGatewayId");
    if let Some(var_995) = &input.transit_gateway_id {
        scope_994.string(var_995);
    }
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("LocalGatewayId");
    if let Some(var_997) = &input.local_gateway_id {
        scope_996.string(var_997);
    }
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("CarrierGatewayId");
    if let Some(var_999) = &input.carrier_gateway_id {
        scope_998.string(var_999);
    }
    #[allow(unused_mut)]
    let mut scope_1000 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1001) = &input.network_interface_id {
        scope_1000.string(var_1001);
    }
    #[allow(unused_mut)]
    let mut scope_1002 = writer.prefix("RouteTableId");
    if let Some(var_1003) = &input.route_table_id {
        scope_1002.string(var_1003);
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1005) = &input.vpc_peering_connection_id {
        scope_1004.string(var_1005);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1006 = writer.prefix("DryRun");
    if let Some(var_1007) = &input.dry_run {
        scope_1006.boolean(*var_1007);
    }
    #[allow(unused_mut)]
    let mut scope_1008 = writer.prefix("VpcId");
    if let Some(var_1009) = &input.vpc_id {
        scope_1008.string(var_1009);
    }
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("TagSpecification");
    if let Some(var_1011) = &input.tag_specifications {
        let mut list_1013 = scope_1010.start_list(true, Some("item"));
        for item_1012 in var_1011 {
            #[allow(unused_mut)]
            let mut entry_1014 = list_1013.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1014, item_1012);
        }
        list_1013.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1015 = writer.prefix("GroupDescription");
    if let Some(var_1016) = &input.description {
        scope_1015.string(var_1016);
    }
    #[allow(unused_mut)]
    let mut scope_1017 = writer.prefix("GroupName");
    if let Some(var_1018) = &input.group_name {
        scope_1017.string(var_1018);
    }
    #[allow(unused_mut)]
    let mut scope_1019 = writer.prefix("VpcId");
    if let Some(var_1020) = &input.vpc_id {
        scope_1019.string(var_1020);
    }
    #[allow(unused_mut)]
    let mut scope_1021 = writer.prefix("TagSpecification");
    if let Some(var_1022) = &input.tag_specifications {
        let mut list_1024 = scope_1021.start_list(true, Some("item"));
        for item_1023 in var_1022 {
            #[allow(unused_mut)]
            let mut entry_1025 = list_1024.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1025, item_1023);
        }
        list_1024.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1026 = writer.prefix("DryRun");
    if let Some(var_1027) = &input.dry_run {
        scope_1026.boolean(*var_1027);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1028 = writer.prefix("Description");
    if let Some(var_1029) = &input.description {
        scope_1028.string(var_1029);
    }
    #[allow(unused_mut)]
    let mut scope_1030 = writer.prefix("OutpostArn");
    if let Some(var_1031) = &input.outpost_arn {
        scope_1030.string(var_1031);
    }
    #[allow(unused_mut)]
    let mut scope_1032 = writer.prefix("VolumeId");
    if let Some(var_1033) = &input.volume_id {
        scope_1032.string(var_1033);
    }
    #[allow(unused_mut)]
    let mut scope_1034 = writer.prefix("TagSpecification");
    if let Some(var_1035) = &input.tag_specifications {
        let mut list_1037 = scope_1034.start_list(true, Some("item"));
        for item_1036 in var_1035 {
            #[allow(unused_mut)]
            let mut entry_1038 = list_1037.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1038, item_1036);
        }
        list_1037.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1039 = writer.prefix("DryRun");
    if let Some(var_1040) = &input.dry_run {
        scope_1039.boolean(*var_1040);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1041 = writer.prefix("Description");
    if let Some(var_1042) = &input.description {
        scope_1041.string(var_1042);
    }
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("InstanceSpecification");
    if let Some(var_1044) = &input.instance_specification {
        crate::query_ser::serialize_structure_instance_specification(scope_1043, var_1044);
    }
    #[allow(unused_mut)]
    let mut scope_1045 = writer.prefix("OutpostArn");
    if let Some(var_1046) = &input.outpost_arn {
        scope_1045.string(var_1046);
    }
    #[allow(unused_mut)]
    let mut scope_1047 = writer.prefix("TagSpecification");
    if let Some(var_1048) = &input.tag_specifications {
        let mut list_1050 = scope_1047.start_list(true, Some("item"));
        for item_1049 in var_1048 {
            #[allow(unused_mut)]
            let mut entry_1051 = list_1050.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1051, item_1049);
        }
        list_1050.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1052 = writer.prefix("DryRun");
    if let Some(var_1053) = &input.dry_run {
        scope_1052.boolean(*var_1053);
    }
    #[allow(unused_mut)]
    let mut scope_1054 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1055) = &input.copy_tags_from_source {
        scope_1054.string(var_1055.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1056 = writer.prefix("Bucket");
    if let Some(var_1057) = &input.bucket {
        scope_1056.string(var_1057);
    }
    #[allow(unused_mut)]
    let mut scope_1058 = writer.prefix("DryRun");
    if let Some(var_1059) = &input.dry_run {
        scope_1058.boolean(*var_1059);
    }
    #[allow(unused_mut)]
    let mut scope_1060 = writer.prefix("Prefix");
    if let Some(var_1061) = &input.prefix {
        scope_1060.string(var_1061);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1062 = writer.prefix("ImageId");
    if let Some(var_1063) = &input.image_id {
        scope_1062.string(var_1063);
    }
    #[allow(unused_mut)]
    let mut scope_1064 = writer.prefix("Bucket");
    if let Some(var_1065) = &input.bucket {
        scope_1064.string(var_1065);
    }
    #[allow(unused_mut)]
    let mut scope_1066 = writer.prefix("S3ObjectTag");
    if let Some(var_1067) = &input.s3_object_tags {
        let mut list_1069 = scope_1066.start_list(true, Some("item"));
        for item_1068 in var_1067 {
            #[allow(unused_mut)]
            let mut entry_1070 = list_1069.entry();
            crate::query_ser::serialize_structure_s3_object_tag(entry_1070, item_1068);
        }
        list_1069.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1071 = writer.prefix("DryRun");
    if let Some(var_1072) = &input.dry_run {
        scope_1071.boolean(*var_1072);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1073 = writer.prefix("TagSpecification");
    if let Some(var_1074) = &input.tag_specifications {
        let mut list_1076 = scope_1073.start_list(true, Some("item"));
        for item_1075 in var_1074 {
            #[allow(unused_mut)]
            let mut entry_1077 = list_1076.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1077, item_1075);
        }
        list_1076.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("AvailabilityZone");
    if let Some(var_1079) = &input.availability_zone {
        scope_1078.string(var_1079);
    }
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1081) = &input.availability_zone_id {
        scope_1080.string(var_1081);
    }
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1083) = &input.ipv6_cidr_block {
        scope_1082.string(var_1083);
    }
    #[allow(unused_mut)]
    let mut scope_1084 = writer.prefix("OutpostArn");
    if let Some(var_1085) = &input.outpost_arn {
        scope_1084.string(var_1085);
    }
    #[allow(unused_mut)]
    let mut scope_1086 = writer.prefix("VpcId");
    if let Some(var_1087) = &input.vpc_id {
        scope_1086.string(var_1087);
    }
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("DryRun");
    if let Some(var_1089) = &input.dry_run {
        scope_1088.boolean(*var_1089);
    }
    #[allow(unused_mut)]
    let mut scope_1090 = writer.prefix("CidrBlock");
    if let Some(var_1091) = &input.cidr_block {
        scope_1090.string(var_1091);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_subnet_cidr_reservation(
    input: &crate::input::CreateSubnetCidrReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1092 = writer.prefix("TagSpecification");
    if let Some(var_1093) = &input.tag_specifications {
        let mut list_1095 = scope_1092.start_list(true, Some("item"));
        for item_1094 in var_1093 {
            #[allow(unused_mut)]
            let mut entry_1096 = list_1095.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1096, item_1094);
        }
        list_1095.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1097 = writer.prefix("SubnetId");
    if let Some(var_1098) = &input.subnet_id {
        scope_1097.string(var_1098);
    }
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("Cidr");
    if let Some(var_1100) = &input.cidr {
        scope_1099.string(var_1100);
    }
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("ReservationType");
    if let Some(var_1102) = &input.reservation_type {
        scope_1101.string(var_1102.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1103 = writer.prefix("Description");
    if let Some(var_1104) = &input.description {
        scope_1103.string(var_1104);
    }
    #[allow(unused_mut)]
    let mut scope_1105 = writer.prefix("DryRun");
    if let Some(var_1106) = &input.dry_run {
        scope_1105.boolean(*var_1106);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1107 = writer.prefix("DryRun");
    if let Some(var_1108) = &input.dry_run {
        scope_1107.boolean(*var_1108);
    }
    #[allow(unused_mut)]
    let mut scope_1109 = writer.prefix("ResourceId");
    if let Some(var_1110) = &input.resources {
        let mut list_1112 = scope_1109.start_list(true, None);
        for item_1111 in var_1110 {
            #[allow(unused_mut)]
            let mut entry_1113 = list_1112.entry();
            entry_1113.string(item_1111);
        }
        list_1112.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1114 = writer.prefix("Tag");
    if let Some(var_1115) = &input.tags {
        let mut list_1117 = scope_1114.start_list(true, Some("item"));
        for item_1116 in var_1115 {
            #[allow(unused_mut)]
            let mut entry_1118 = list_1117.entry();
            crate::query_ser::serialize_structure_tag(entry_1118, item_1116);
        }
        list_1117.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("Description");
    if let Some(var_1120) = &input.description {
        scope_1119.string(var_1120);
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("TagSpecification");
    if let Some(var_1122) = &input.tag_specifications {
        let mut list_1124 = scope_1121.start_list(true, Some("item"));
        for item_1123 in var_1122 {
            #[allow(unused_mut)]
            let mut entry_1125 = list_1124.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1125, item_1123);
        }
        list_1124.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1126 = writer.prefix("DryRun");
    if let Some(var_1127) = &input.dry_run {
        scope_1126.boolean(*var_1127);
    }
    #[allow(unused_mut)]
    let mut scope_1128 = writer.prefix("ClientToken");
    if let Some(var_1129) = &input.client_token {
        scope_1128.string(var_1129);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1130 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1131) = &input.traffic_mirror_filter_id {
        scope_1130.string(var_1131);
    }
    #[allow(unused_mut)]
    let mut scope_1132 = writer.prefix("TrafficDirection");
    if let Some(var_1133) = &input.traffic_direction {
        scope_1132.string(var_1133.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1134 = writer.prefix("RuleNumber");
    if let Some(var_1135) = &input.rule_number {
        scope_1134.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1135).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1136 = writer.prefix("RuleAction");
    if let Some(var_1137) = &input.rule_action {
        scope_1136.string(var_1137.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1138 = writer.prefix("DestinationPortRange");
    if let Some(var_1139) = &input.destination_port_range {
        crate::query_ser::serialize_structure_traffic_mirror_port_range_request(
            scope_1138, var_1139,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1140 = writer.prefix("SourcePortRange");
    if let Some(var_1141) = &input.source_port_range {
        crate::query_ser::serialize_structure_traffic_mirror_port_range_request(
            scope_1140, var_1141,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1142 = writer.prefix("Protocol");
    if let Some(var_1143) = &input.protocol {
        scope_1142.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1143).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1144 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1145) = &input.destination_cidr_block {
        scope_1144.string(var_1145);
    }
    #[allow(unused_mut)]
    let mut scope_1146 = writer.prefix("SourceCidrBlock");
    if let Some(var_1147) = &input.source_cidr_block {
        scope_1146.string(var_1147);
    }
    #[allow(unused_mut)]
    let mut scope_1148 = writer.prefix("Description");
    if let Some(var_1149) = &input.description {
        scope_1148.string(var_1149);
    }
    #[allow(unused_mut)]
    let mut scope_1150 = writer.prefix("DryRun");
    if let Some(var_1151) = &input.dry_run {
        scope_1150.boolean(*var_1151);
    }
    #[allow(unused_mut)]
    let mut scope_1152 = writer.prefix("ClientToken");
    if let Some(var_1153) = &input.client_token {
        scope_1152.string(var_1153);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1154 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1155) = &input.network_interface_id {
        scope_1154.string(var_1155);
    }
    #[allow(unused_mut)]
    let mut scope_1156 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1157) = &input.traffic_mirror_target_id {
        scope_1156.string(var_1157);
    }
    #[allow(unused_mut)]
    let mut scope_1158 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1159) = &input.traffic_mirror_filter_id {
        scope_1158.string(var_1159);
    }
    #[allow(unused_mut)]
    let mut scope_1160 = writer.prefix("PacketLength");
    if let Some(var_1161) = &input.packet_length {
        scope_1160.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1161).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1162 = writer.prefix("SessionNumber");
    if let Some(var_1163) = &input.session_number {
        scope_1162.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1163).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1164 = writer.prefix("VirtualNetworkId");
    if let Some(var_1165) = &input.virtual_network_id {
        scope_1164.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1165).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1166 = writer.prefix("Description");
    if let Some(var_1167) = &input.description {
        scope_1166.string(var_1167);
    }
    #[allow(unused_mut)]
    let mut scope_1168 = writer.prefix("TagSpecification");
    if let Some(var_1169) = &input.tag_specifications {
        let mut list_1171 = scope_1168.start_list(true, Some("item"));
        for item_1170 in var_1169 {
            #[allow(unused_mut)]
            let mut entry_1172 = list_1171.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1172, item_1170);
        }
        list_1171.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("DryRun");
    if let Some(var_1174) = &input.dry_run {
        scope_1173.boolean(*var_1174);
    }
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("ClientToken");
    if let Some(var_1176) = &input.client_token {
        scope_1175.string(var_1176);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1178) = &input.network_interface_id {
        scope_1177.string(var_1178);
    }
    #[allow(unused_mut)]
    let mut scope_1179 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1180) = &input.network_load_balancer_arn {
        scope_1179.string(var_1180);
    }
    #[allow(unused_mut)]
    let mut scope_1181 = writer.prefix("Description");
    if let Some(var_1182) = &input.description {
        scope_1181.string(var_1182);
    }
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("TagSpecification");
    if let Some(var_1184) = &input.tag_specifications {
        let mut list_1186 = scope_1183.start_list(true, Some("item"));
        for item_1185 in var_1184 {
            #[allow(unused_mut)]
            let mut entry_1187 = list_1186.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1187, item_1185);
        }
        list_1186.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1188 = writer.prefix("DryRun");
    if let Some(var_1189) = &input.dry_run {
        scope_1188.boolean(*var_1189);
    }
    #[allow(unused_mut)]
    let mut scope_1190 = writer.prefix("ClientToken");
    if let Some(var_1191) = &input.client_token {
        scope_1190.string(var_1191);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1192 = writer.prefix("Description");
    if let Some(var_1193) = &input.description {
        scope_1192.string(var_1193);
    }
    #[allow(unused_mut)]
    let mut scope_1194 = writer.prefix("Options");
    if let Some(var_1195) = &input.options {
        crate::query_ser::serialize_structure_transit_gateway_request_options(scope_1194, var_1195);
    }
    #[allow(unused_mut)]
    let mut scope_1196 = writer.prefix("TagSpecification");
    if let Some(var_1197) = &input.tag_specifications {
        let mut list_1199 = scope_1196.start_list(true, Some("item"));
        for item_1198 in var_1197 {
            #[allow(unused_mut)]
            let mut entry_1200 = list_1199.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1200, item_1198);
        }
        list_1199.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1201 = writer.prefix("DryRun");
    if let Some(var_1202) = &input.dry_run {
        scope_1201.boolean(*var_1202);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1203 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1204) = &input.transport_transit_gateway_attachment_id {
        scope_1203.string(var_1204);
    }
    #[allow(unused_mut)]
    let mut scope_1205 = writer.prefix("Options");
    if let Some(var_1206) = &input.options {
        crate::query_ser::serialize_structure_create_transit_gateway_connect_request_options(
            scope_1205, var_1206,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1207 = writer.prefix("TagSpecification");
    if let Some(var_1208) = &input.tag_specifications {
        let mut list_1210 = scope_1207.start_list(true, Some("item"));
        for item_1209 in var_1208 {
            #[allow(unused_mut)]
            let mut entry_1211 = list_1210.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1211, item_1209);
        }
        list_1210.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("DryRun");
    if let Some(var_1213) = &input.dry_run {
        scope_1212.boolean(*var_1213);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnectPeer", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1215) = &input.transit_gateway_attachment_id {
        scope_1214.string(var_1215);
    }
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1217) = &input.transit_gateway_address {
        scope_1216.string(var_1217);
    }
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("PeerAddress");
    if let Some(var_1219) = &input.peer_address {
        scope_1218.string(var_1219);
    }
    #[allow(unused_mut)]
    let mut scope_1220 = writer.prefix("BgpOptions");
    if let Some(var_1221) = &input.bgp_options {
        crate::query_ser::serialize_structure_transit_gateway_connect_request_bgp_options(
            scope_1220, var_1221,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1222 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1223) = &input.inside_cidr_blocks {
        let mut list_1225 = scope_1222.start_list(true, Some("item"));
        for item_1224 in var_1223 {
            #[allow(unused_mut)]
            let mut entry_1226 = list_1225.entry();
            entry_1226.string(item_1224);
        }
        list_1225.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("TagSpecification");
    if let Some(var_1228) = &input.tag_specifications {
        let mut list_1230 = scope_1227.start_list(true, Some("item"));
        for item_1229 in var_1228 {
            #[allow(unused_mut)]
            let mut entry_1231 = list_1230.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1231, item_1229);
        }
        list_1230.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1232 = writer.prefix("DryRun");
    if let Some(var_1233) = &input.dry_run {
        scope_1232.boolean(*var_1233);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1234 = writer.prefix("TransitGatewayId");
    if let Some(var_1235) = &input.transit_gateway_id {
        scope_1234.string(var_1235);
    }
    #[allow(unused_mut)]
    let mut scope_1236 = writer.prefix("Options");
    if let Some(var_1237) = &input.options {
        crate::query_ser::serialize_structure_create_transit_gateway_multicast_domain_request_options(scope_1236, var_1237);
    }
    #[allow(unused_mut)]
    let mut scope_1238 = writer.prefix("TagSpecification");
    if let Some(var_1239) = &input.tag_specifications {
        let mut list_1241 = scope_1238.start_list(true, Some("item"));
        for item_1240 in var_1239 {
            #[allow(unused_mut)]
            let mut entry_1242 = list_1241.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1242, item_1240);
        }
        list_1241.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1243 = writer.prefix("DryRun");
    if let Some(var_1244) = &input.dry_run {
        scope_1243.boolean(*var_1244);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("TransitGatewayId");
    if let Some(var_1246) = &input.transit_gateway_id {
        scope_1245.string(var_1246);
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1248) = &input.peer_transit_gateway_id {
        scope_1247.string(var_1248);
    }
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("PeerAccountId");
    if let Some(var_1250) = &input.peer_account_id {
        scope_1249.string(var_1250);
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("PeerRegion");
    if let Some(var_1252) = &input.peer_region {
        scope_1251.string(var_1252);
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("TagSpecification");
    if let Some(var_1254) = &input.tag_specifications {
        let mut list_1256 = scope_1253.start_list(true, Some("item"));
        for item_1255 in var_1254 {
            #[allow(unused_mut)]
            let mut entry_1257 = list_1256.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1257, item_1255);
        }
        list_1256.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1258 = writer.prefix("DryRun");
    if let Some(var_1259) = &input.dry_run {
        scope_1258.boolean(*var_1259);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1260 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1261) = &input.transit_gateway_route_table_id {
        scope_1260.string(var_1261);
    }
    #[allow(unused_mut)]
    let mut scope_1262 = writer.prefix("PrefixListId");
    if let Some(var_1263) = &input.prefix_list_id {
        scope_1262.string(var_1263);
    }
    #[allow(unused_mut)]
    let mut scope_1264 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1265) = &input.transit_gateway_attachment_id {
        scope_1264.string(var_1265);
    }
    #[allow(unused_mut)]
    let mut scope_1266 = writer.prefix("Blackhole");
    if let Some(var_1267) = &input.blackhole {
        scope_1266.boolean(*var_1267);
    }
    #[allow(unused_mut)]
    let mut scope_1268 = writer.prefix("DryRun");
    if let Some(var_1269) = &input.dry_run {
        scope_1268.boolean(*var_1269);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1270 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1271) = &input.destination_cidr_block {
        scope_1270.string(var_1271);
    }
    #[allow(unused_mut)]
    let mut scope_1272 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1273) = &input.transit_gateway_route_table_id {
        scope_1272.string(var_1273);
    }
    #[allow(unused_mut)]
    let mut scope_1274 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1275) = &input.transit_gateway_attachment_id {
        scope_1274.string(var_1275);
    }
    #[allow(unused_mut)]
    let mut scope_1276 = writer.prefix("Blackhole");
    if let Some(var_1277) = &input.blackhole {
        scope_1276.boolean(*var_1277);
    }
    #[allow(unused_mut)]
    let mut scope_1278 = writer.prefix("DryRun");
    if let Some(var_1279) = &input.dry_run {
        scope_1278.boolean(*var_1279);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1280 = writer.prefix("TransitGatewayId");
    if let Some(var_1281) = &input.transit_gateway_id {
        scope_1280.string(var_1281);
    }
    #[allow(unused_mut)]
    let mut scope_1282 = writer.prefix("TagSpecifications");
    if let Some(var_1283) = &input.tag_specifications {
        let mut list_1285 = scope_1282.start_list(true, Some("item"));
        for item_1284 in var_1283 {
            #[allow(unused_mut)]
            let mut entry_1286 = list_1285.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1286, item_1284);
        }
        list_1285.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1287 = writer.prefix("DryRun");
    if let Some(var_1288) = &input.dry_run {
        scope_1287.boolean(*var_1288);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1289 = writer.prefix("TransitGatewayId");
    if let Some(var_1290) = &input.transit_gateway_id {
        scope_1289.string(var_1290);
    }
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("VpcId");
    if let Some(var_1292) = &input.vpc_id {
        scope_1291.string(var_1292);
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("SubnetIds");
    if let Some(var_1294) = &input.subnet_ids {
        let mut list_1296 = scope_1293.start_list(true, Some("item"));
        for item_1295 in var_1294 {
            #[allow(unused_mut)]
            let mut entry_1297 = list_1296.entry();
            entry_1297.string(item_1295);
        }
        list_1296.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1298 = writer.prefix("Options");
    if let Some(var_1299) = &input.options {
        crate::query_ser::serialize_structure_create_transit_gateway_vpc_attachment_request_options(
            scope_1298, var_1299,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1300 = writer.prefix("TagSpecifications");
    if let Some(var_1301) = &input.tag_specifications {
        let mut list_1303 = scope_1300.start_list(true, Some("item"));
        for item_1302 in var_1301 {
            #[allow(unused_mut)]
            let mut entry_1304 = list_1303.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1304, item_1302);
        }
        list_1303.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("DryRun");
    if let Some(var_1306) = &input.dry_run {
        scope_1305.boolean(*var_1306);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("AvailabilityZone");
    if let Some(var_1308) = &input.availability_zone {
        scope_1307.string(var_1308);
    }
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("Encrypted");
    if let Some(var_1310) = &input.encrypted {
        scope_1309.boolean(*var_1310);
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("Iops");
    if let Some(var_1312) = &input.iops {
        scope_1311.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1312).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("KmsKeyId");
    if let Some(var_1314) = &input.kms_key_id {
        scope_1313.string(var_1314);
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("OutpostArn");
    if let Some(var_1316) = &input.outpost_arn {
        scope_1315.string(var_1316);
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("Size");
    if let Some(var_1318) = &input.size {
        scope_1317.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1318).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1319 = writer.prefix("SnapshotId");
    if let Some(var_1320) = &input.snapshot_id {
        scope_1319.string(var_1320);
    }
    #[allow(unused_mut)]
    let mut scope_1321 = writer.prefix("VolumeType");
    if let Some(var_1322) = &input.volume_type {
        scope_1321.string(var_1322.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1323 = writer.prefix("DryRun");
    if let Some(var_1324) = &input.dry_run {
        scope_1323.boolean(*var_1324);
    }
    #[allow(unused_mut)]
    let mut scope_1325 = writer.prefix("TagSpecification");
    if let Some(var_1326) = &input.tag_specifications {
        let mut list_1328 = scope_1325.start_list(true, Some("item"));
        for item_1327 in var_1326 {
            #[allow(unused_mut)]
            let mut entry_1329 = list_1328.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1329, item_1327);
        }
        list_1328.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1330 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1331) = &input.multi_attach_enabled {
        scope_1330.boolean(*var_1331);
    }
    #[allow(unused_mut)]
    let mut scope_1332 = writer.prefix("Throughput");
    if let Some(var_1333) = &input.throughput {
        scope_1332.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1333).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1334 = writer.prefix("ClientToken");
    if let Some(var_1335) = &input.client_token {
        scope_1334.string(var_1335);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1336 = writer.prefix("CidrBlock");
    if let Some(var_1337) = &input.cidr_block {
        scope_1336.string(var_1337);
    }
    #[allow(unused_mut)]
    let mut scope_1338 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1339) = &input.amazon_provided_ipv6_cidr_block {
        scope_1338.boolean(*var_1339);
    }
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("Ipv6Pool");
    if let Some(var_1341) = &input.ipv6_pool {
        scope_1340.string(var_1341);
    }
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1343) = &input.ipv6_cidr_block {
        scope_1342.string(var_1343);
    }
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("DryRun");
    if let Some(var_1345) = &input.dry_run {
        scope_1344.boolean(*var_1345);
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("InstanceTenancy");
    if let Some(var_1347) = &input.instance_tenancy {
        scope_1346.string(var_1347.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1349) = &input.ipv6_cidr_block_network_border_group {
        scope_1348.string(var_1349);
    }
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("TagSpecification");
    if let Some(var_1351) = &input.tag_specifications {
        let mut list_1353 = scope_1350.start_list(true, Some("item"));
        for item_1352 in var_1351 {
            #[allow(unused_mut)]
            let mut entry_1354 = list_1353.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1354, item_1352);
        }
        list_1353.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1355 = writer.prefix("DryRun");
    if let Some(var_1356) = &input.dry_run {
        scope_1355.boolean(*var_1356);
    }
    #[allow(unused_mut)]
    let mut scope_1357 = writer.prefix("VpcEndpointType");
    if let Some(var_1358) = &input.vpc_endpoint_type {
        scope_1357.string(var_1358.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1359 = writer.prefix("VpcId");
    if let Some(var_1360) = &input.vpc_id {
        scope_1359.string(var_1360);
    }
    #[allow(unused_mut)]
    let mut scope_1361 = writer.prefix("ServiceName");
    if let Some(var_1362) = &input.service_name {
        scope_1361.string(var_1362);
    }
    #[allow(unused_mut)]
    let mut scope_1363 = writer.prefix("PolicyDocument");
    if let Some(var_1364) = &input.policy_document {
        scope_1363.string(var_1364);
    }
    #[allow(unused_mut)]
    let mut scope_1365 = writer.prefix("RouteTableId");
    if let Some(var_1366) = &input.route_table_ids {
        let mut list_1368 = scope_1365.start_list(true, Some("item"));
        for item_1367 in var_1366 {
            #[allow(unused_mut)]
            let mut entry_1369 = list_1368.entry();
            entry_1369.string(item_1367);
        }
        list_1368.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1370 = writer.prefix("SubnetId");
    if let Some(var_1371) = &input.subnet_ids {
        let mut list_1373 = scope_1370.start_list(true, Some("item"));
        for item_1372 in var_1371 {
            #[allow(unused_mut)]
            let mut entry_1374 = list_1373.entry();
            entry_1374.string(item_1372);
        }
        list_1373.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1375 = writer.prefix("SecurityGroupId");
    if let Some(var_1376) = &input.security_group_ids {
        let mut list_1378 = scope_1375.start_list(true, Some("item"));
        for item_1377 in var_1376 {
            #[allow(unused_mut)]
            let mut entry_1379 = list_1378.entry();
            entry_1379.string(item_1377);
        }
        list_1378.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1380 = writer.prefix("ClientToken");
    if let Some(var_1381) = &input.client_token {
        scope_1380.string(var_1381);
    }
    #[allow(unused_mut)]
    let mut scope_1382 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1383) = &input.private_dns_enabled {
        scope_1382.boolean(*var_1383);
    }
    #[allow(unused_mut)]
    let mut scope_1384 = writer.prefix("TagSpecification");
    if let Some(var_1385) = &input.tag_specifications {
        let mut list_1387 = scope_1384.start_list(true, Some("item"));
        for item_1386 in var_1385 {
            #[allow(unused_mut)]
            let mut entry_1388 = list_1387.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1388, item_1386);
        }
        list_1387.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1389 = writer.prefix("DryRun");
    if let Some(var_1390) = &input.dry_run {
        scope_1389.boolean(*var_1390);
    }
    #[allow(unused_mut)]
    let mut scope_1391 = writer.prefix("ServiceId");
    if let Some(var_1392) = &input.service_id {
        scope_1391.string(var_1392);
    }
    #[allow(unused_mut)]
    let mut scope_1393 = writer.prefix("VpcEndpointId");
    if let Some(var_1394) = &input.vpc_endpoint_id {
        scope_1393.string(var_1394);
    }
    #[allow(unused_mut)]
    let mut scope_1395 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1396) = &input.connection_notification_arn {
        scope_1395.string(var_1396);
    }
    #[allow(unused_mut)]
    let mut scope_1397 = writer.prefix("ConnectionEvents");
    if let Some(var_1398) = &input.connection_events {
        let mut list_1400 = scope_1397.start_list(true, Some("item"));
        for item_1399 in var_1398 {
            #[allow(unused_mut)]
            let mut entry_1401 = list_1400.entry();
            entry_1401.string(item_1399);
        }
        list_1400.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1402 = writer.prefix("ClientToken");
    if let Some(var_1403) = &input.client_token {
        scope_1402.string(var_1403);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1404 = writer.prefix("DryRun");
    if let Some(var_1405) = &input.dry_run {
        scope_1404.boolean(*var_1405);
    }
    #[allow(unused_mut)]
    let mut scope_1406 = writer.prefix("AcceptanceRequired");
    if let Some(var_1407) = &input.acceptance_required {
        scope_1406.boolean(*var_1407);
    }
    #[allow(unused_mut)]
    let mut scope_1408 = writer.prefix("PrivateDnsName");
    if let Some(var_1409) = &input.private_dns_name {
        scope_1408.string(var_1409);
    }
    #[allow(unused_mut)]
    let mut scope_1410 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1411) = &input.network_load_balancer_arns {
        let mut list_1413 = scope_1410.start_list(true, Some("item"));
        for item_1412 in var_1411 {
            #[allow(unused_mut)]
            let mut entry_1414 = list_1413.entry();
            entry_1414.string(item_1412);
        }
        list_1413.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1415 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1416) = &input.gateway_load_balancer_arns {
        let mut list_1418 = scope_1415.start_list(true, Some("item"));
        for item_1417 in var_1416 {
            #[allow(unused_mut)]
            let mut entry_1419 = list_1418.entry();
            entry_1419.string(item_1417);
        }
        list_1418.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1420 = writer.prefix("ClientToken");
    if let Some(var_1421) = &input.client_token {
        scope_1420.string(var_1421);
    }
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("TagSpecification");
    if let Some(var_1423) = &input.tag_specifications {
        let mut list_1425 = scope_1422.start_list(true, Some("item"));
        for item_1424 in var_1423 {
            #[allow(unused_mut)]
            let mut entry_1426 = list_1425.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1426, item_1424);
        }
        list_1425.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1427 = writer.prefix("DryRun");
    if let Some(var_1428) = &input.dry_run {
        scope_1427.boolean(*var_1428);
    }
    #[allow(unused_mut)]
    let mut scope_1429 = writer.prefix("PeerOwnerId");
    if let Some(var_1430) = &input.peer_owner_id {
        scope_1429.string(var_1430);
    }
    #[allow(unused_mut)]
    let mut scope_1431 = writer.prefix("PeerVpcId");
    if let Some(var_1432) = &input.peer_vpc_id {
        scope_1431.string(var_1432);
    }
    #[allow(unused_mut)]
    let mut scope_1433 = writer.prefix("VpcId");
    if let Some(var_1434) = &input.vpc_id {
        scope_1433.string(var_1434);
    }
    #[allow(unused_mut)]
    let mut scope_1435 = writer.prefix("PeerRegion");
    if let Some(var_1436) = &input.peer_region {
        scope_1435.string(var_1436);
    }
    #[allow(unused_mut)]
    let mut scope_1437 = writer.prefix("TagSpecification");
    if let Some(var_1438) = &input.tag_specifications {
        let mut list_1440 = scope_1437.start_list(true, Some("item"));
        for item_1439 in var_1438 {
            #[allow(unused_mut)]
            let mut entry_1441 = list_1440.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1441, item_1439);
        }
        list_1440.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1442 = writer.prefix("CustomerGatewayId");
    if let Some(var_1443) = &input.customer_gateway_id {
        scope_1442.string(var_1443);
    }
    #[allow(unused_mut)]
    let mut scope_1444 = writer.prefix("Type");
    if let Some(var_1445) = &input.r#type {
        scope_1444.string(var_1445);
    }
    #[allow(unused_mut)]
    let mut scope_1446 = writer.prefix("VpnGatewayId");
    if let Some(var_1447) = &input.vpn_gateway_id {
        scope_1446.string(var_1447);
    }
    #[allow(unused_mut)]
    let mut scope_1448 = writer.prefix("TransitGatewayId");
    if let Some(var_1449) = &input.transit_gateway_id {
        scope_1448.string(var_1449);
    }
    #[allow(unused_mut)]
    let mut scope_1450 = writer.prefix("DryRun");
    if let Some(var_1451) = &input.dry_run {
        scope_1450.boolean(*var_1451);
    }
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("Options");
    if let Some(var_1453) = &input.options {
        crate::query_ser::serialize_structure_vpn_connection_options_specification(
            scope_1452, var_1453,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("TagSpecification");
    if let Some(var_1455) = &input.tag_specifications {
        let mut list_1457 = scope_1454.start_list(true, Some("item"));
        for item_1456 in var_1455 {
            #[allow(unused_mut)]
            let mut entry_1458 = list_1457.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1458, item_1456);
        }
        list_1457.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1459 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1460) = &input.destination_cidr_block {
        scope_1459.string(var_1460);
    }
    #[allow(unused_mut)]
    let mut scope_1461 = writer.prefix("VpnConnectionId");
    if let Some(var_1462) = &input.vpn_connection_id {
        scope_1461.string(var_1462);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1463 = writer.prefix("AvailabilityZone");
    if let Some(var_1464) = &input.availability_zone {
        scope_1463.string(var_1464);
    }
    #[allow(unused_mut)]
    let mut scope_1465 = writer.prefix("Type");
    if let Some(var_1466) = &input.r#type {
        scope_1465.string(var_1466.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1467 = writer.prefix("TagSpecification");
    if let Some(var_1468) = &input.tag_specifications {
        let mut list_1470 = scope_1467.start_list(true, Some("item"));
        for item_1469 in var_1468 {
            #[allow(unused_mut)]
            let mut entry_1471 = list_1470.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1471, item_1469);
        }
        list_1470.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1472 = writer.prefix("AmazonSideAsn");
    if let Some(var_1473) = &input.amazon_side_asn {
        scope_1472.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1473).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1474 = writer.prefix("DryRun");
    if let Some(var_1475) = &input.dry_run {
        scope_1474.boolean(*var_1475);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1476 = writer.prefix("CarrierGatewayId");
    if let Some(var_1477) = &input.carrier_gateway_id {
        scope_1476.string(var_1477);
    }
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("DryRun");
    if let Some(var_1479) = &input.dry_run {
        scope_1478.boolean(*var_1479);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1481) = &input.client_vpn_endpoint_id {
        scope_1480.string(var_1481);
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("DryRun");
    if let Some(var_1483) = &input.dry_run {
        scope_1482.boolean(*var_1483);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1485) = &input.client_vpn_endpoint_id {
        scope_1484.string(var_1485);
    }
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1487) = &input.target_vpc_subnet_id {
        scope_1486.string(var_1487);
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1489) = &input.destination_cidr_block {
        scope_1488.string(var_1489);
    }
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("DryRun");
    if let Some(var_1491) = &input.dry_run {
        scope_1490.boolean(*var_1491);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("CustomerGatewayId");
    if let Some(var_1493) = &input.customer_gateway_id {
        scope_1492.string(var_1493);
    }
    #[allow(unused_mut)]
    let mut scope_1494 = writer.prefix("DryRun");
    if let Some(var_1495) = &input.dry_run {
        scope_1494.boolean(*var_1495);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("DhcpOptionsId");
    if let Some(var_1497) = &input.dhcp_options_id {
        scope_1496.string(var_1497);
    }
    #[allow(unused_mut)]
    let mut scope_1498 = writer.prefix("DryRun");
    if let Some(var_1499) = &input.dry_run {
        scope_1498.boolean(*var_1499);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteEgressOnlyInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1500 = writer.prefix("DryRun");
    if let Some(var_1501) = &input.dry_run {
        scope_1500.boolean(*var_1501);
    }
    #[allow(unused_mut)]
    let mut scope_1502 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1503) = &input.egress_only_internet_gateway_id {
        scope_1502.string(var_1503);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1504 = writer.prefix("DryRun");
    if let Some(var_1505) = &input.dry_run {
        scope_1504.boolean(*var_1505);
    }
    #[allow(unused_mut)]
    let mut scope_1506 = writer.prefix("FleetId");
    if let Some(var_1507) = &input.fleet_ids {
        let mut list_1509 = scope_1506.start_list(true, None);
        for item_1508 in var_1507 {
            #[allow(unused_mut)]
            let mut entry_1510 = list_1509.entry();
            entry_1510.string(item_1508);
        }
        list_1509.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1511 = writer.prefix("TerminateInstances");
    if let Some(var_1512) = &input.terminate_instances {
        scope_1511.boolean(*var_1512);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("DryRun");
    if let Some(var_1514) = &input.dry_run {
        scope_1513.boolean(*var_1514);
    }
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("FlowLogId");
    if let Some(var_1516) = &input.flow_log_ids {
        let mut list_1518 = scope_1515.start_list(true, Some("item"));
        for item_1517 in var_1516 {
            #[allow(unused_mut)]
            let mut entry_1519 = list_1518.entry();
            entry_1519.string(item_1517);
        }
        list_1518.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1520 = writer.prefix("DryRun");
    if let Some(var_1521) = &input.dry_run {
        scope_1520.boolean(*var_1521);
    }
    #[allow(unused_mut)]
    let mut scope_1522 = writer.prefix("FpgaImageId");
    if let Some(var_1523) = &input.fpga_image_id {
        scope_1522.string(var_1523);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_instance_event_window(
    input: &crate::input::DeleteInstanceEventWindowInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1524 = writer.prefix("DryRun");
    if let Some(var_1525) = &input.dry_run {
        scope_1524.boolean(*var_1525);
    }
    #[allow(unused_mut)]
    let mut scope_1526 = writer.prefix("ForceDelete");
    if let Some(var_1527) = &input.force_delete {
        scope_1526.boolean(*var_1527);
    }
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1529) = &input.instance_event_window_id {
        scope_1528.string(var_1529);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("DryRun");
    if let Some(var_1531) = &input.dry_run {
        scope_1530.boolean(*var_1531);
    }
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("InternetGatewayId");
    if let Some(var_1533) = &input.internet_gateway_id {
        scope_1532.string(var_1533);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("KeyName");
    if let Some(var_1535) = &input.key_name {
        scope_1534.string(var_1535);
    }
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("KeyPairId");
    if let Some(var_1537) = &input.key_pair_id {
        scope_1536.string(var_1537);
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("DryRun");
    if let Some(var_1539) = &input.dry_run {
        scope_1538.boolean(*var_1539);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("DryRun");
    if let Some(var_1541) = &input.dry_run {
        scope_1540.boolean(*var_1541);
    }
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("LaunchTemplateId");
    if let Some(var_1543) = &input.launch_template_id {
        scope_1542.string(var_1543);
    }
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("LaunchTemplateName");
    if let Some(var_1545) = &input.launch_template_name {
        scope_1544.string(var_1545);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("DryRun");
    if let Some(var_1547) = &input.dry_run {
        scope_1546.boolean(*var_1547);
    }
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("LaunchTemplateId");
    if let Some(var_1549) = &input.launch_template_id {
        scope_1548.string(var_1549);
    }
    #[allow(unused_mut)]
    let mut scope_1550 = writer.prefix("LaunchTemplateName");
    if let Some(var_1551) = &input.launch_template_name {
        scope_1550.string(var_1551);
    }
    #[allow(unused_mut)]
    let mut scope_1552 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1553) = &input.versions {
        let mut list_1555 = scope_1552.start_list(true, Some("item"));
        for item_1554 in var_1553 {
            #[allow(unused_mut)]
            let mut entry_1556 = list_1555.entry();
            entry_1556.string(item_1554);
        }
        list_1555.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1557 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1558) = &input.destination_cidr_block {
        scope_1557.string(var_1558);
    }
    #[allow(unused_mut)]
    let mut scope_1559 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1560) = &input.local_gateway_route_table_id {
        scope_1559.string(var_1560);
    }
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("DryRun");
    if let Some(var_1562) = &input.dry_run {
        scope_1561.boolean(*var_1562);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1564) = &input.local_gateway_route_table_vpc_association_id {
        scope_1563.string(var_1564);
    }
    #[allow(unused_mut)]
    let mut scope_1565 = writer.prefix("DryRun");
    if let Some(var_1566) = &input.dry_run {
        scope_1565.boolean(*var_1566);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1567 = writer.prefix("DryRun");
    if let Some(var_1568) = &input.dry_run {
        scope_1567.boolean(*var_1568);
    }
    #[allow(unused_mut)]
    let mut scope_1569 = writer.prefix("PrefixListId");
    if let Some(var_1570) = &input.prefix_list_id {
        scope_1569.string(var_1570);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1571 = writer.prefix("DryRun");
    if let Some(var_1572) = &input.dry_run {
        scope_1571.boolean(*var_1572);
    }
    #[allow(unused_mut)]
    let mut scope_1573 = writer.prefix("NatGatewayId");
    if let Some(var_1574) = &input.nat_gateway_id {
        scope_1573.string(var_1574);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1575 = writer.prefix("DryRun");
    if let Some(var_1576) = &input.dry_run {
        scope_1575.boolean(*var_1576);
    }
    #[allow(unused_mut)]
    let mut scope_1577 = writer.prefix("NetworkAclId");
    if let Some(var_1578) = &input.network_acl_id {
        scope_1577.string(var_1578);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("DryRun");
    if let Some(var_1580) = &input.dry_run {
        scope_1579.boolean(*var_1580);
    }
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("Egress");
    if let Some(var_1582) = &input.egress {
        scope_1581.boolean(*var_1582);
    }
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("NetworkAclId");
    if let Some(var_1584) = &input.network_acl_id {
        scope_1583.string(var_1584);
    }
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("RuleNumber");
    if let Some(var_1586) = &input.rule_number {
        scope_1585.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1586).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("DryRun");
    if let Some(var_1588) = &input.dry_run {
        scope_1587.boolean(*var_1588);
    }
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1590) = &input.network_insights_analysis_id {
        scope_1589.string(var_1590);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1591 = writer.prefix("DryRun");
    if let Some(var_1592) = &input.dry_run {
        scope_1591.boolean(*var_1592);
    }
    #[allow(unused_mut)]
    let mut scope_1593 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1594) = &input.network_insights_path_id {
        scope_1593.string(var_1594);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("DryRun");
    if let Some(var_1596) = &input.dry_run {
        scope_1595.boolean(*var_1596);
    }
    #[allow(unused_mut)]
    let mut scope_1597 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1598) = &input.network_interface_id {
        scope_1597.string(var_1598);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterfacePermission", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1599 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1600) = &input.network_interface_permission_id {
        scope_1599.string(var_1600);
    }
    #[allow(unused_mut)]
    let mut scope_1601 = writer.prefix("Force");
    if let Some(var_1602) = &input.force {
        scope_1601.boolean(*var_1602);
    }
    #[allow(unused_mut)]
    let mut scope_1603 = writer.prefix("DryRun");
    if let Some(var_1604) = &input.dry_run {
        scope_1603.boolean(*var_1604);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1605 = writer.prefix("DryRun");
    if let Some(var_1606) = &input.dry_run {
        scope_1605.boolean(*var_1606);
    }
    #[allow(unused_mut)]
    let mut scope_1607 = writer.prefix("GroupName");
    if let Some(var_1608) = &input.group_name {
        scope_1607.string(var_1608);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1609 = writer.prefix("DryRun");
    if let Some(var_1610) = &input.dry_run {
        scope_1609.boolean(*var_1610);
    }
    #[allow(unused_mut)]
    let mut scope_1611 = writer.prefix("ReservedInstancesId");
    if let Some(var_1612) = &input.reserved_instances_ids {
        let mut list_1614 = scope_1611.start_list(true, Some("item"));
        for item_1613 in var_1612 {
            #[allow(unused_mut)]
            let mut entry_1615 = list_1614.entry();
            entry_1615.string(item_1613);
        }
        list_1614.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1616 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1617) = &input.destination_cidr_block {
        scope_1616.string(var_1617);
    }
    #[allow(unused_mut)]
    let mut scope_1618 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1619) = &input.destination_ipv6_cidr_block {
        scope_1618.string(var_1619);
    }
    #[allow(unused_mut)]
    let mut scope_1620 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1621) = &input.destination_prefix_list_id {
        scope_1620.string(var_1621);
    }
    #[allow(unused_mut)]
    let mut scope_1622 = writer.prefix("DryRun");
    if let Some(var_1623) = &input.dry_run {
        scope_1622.boolean(*var_1623);
    }
    #[allow(unused_mut)]
    let mut scope_1624 = writer.prefix("RouteTableId");
    if let Some(var_1625) = &input.route_table_id {
        scope_1624.string(var_1625);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1626 = writer.prefix("DryRun");
    if let Some(var_1627) = &input.dry_run {
        scope_1626.boolean(*var_1627);
    }
    #[allow(unused_mut)]
    let mut scope_1628 = writer.prefix("RouteTableId");
    if let Some(var_1629) = &input.route_table_id {
        scope_1628.string(var_1629);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1630 = writer.prefix("GroupId");
    if let Some(var_1631) = &input.group_id {
        scope_1630.string(var_1631);
    }
    #[allow(unused_mut)]
    let mut scope_1632 = writer.prefix("GroupName");
    if let Some(var_1633) = &input.group_name {
        scope_1632.string(var_1633);
    }
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("DryRun");
    if let Some(var_1635) = &input.dry_run {
        scope_1634.boolean(*var_1635);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1636 = writer.prefix("SnapshotId");
    if let Some(var_1637) = &input.snapshot_id {
        scope_1636.string(var_1637);
    }
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("DryRun");
    if let Some(var_1639) = &input.dry_run {
        scope_1638.boolean(*var_1639);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("DryRun");
    if let Some(var_1641) = &input.dry_run {
        scope_1640.boolean(*var_1641);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("SubnetId");
    if let Some(var_1643) = &input.subnet_id {
        scope_1642.string(var_1643);
    }
    #[allow(unused_mut)]
    let mut scope_1644 = writer.prefix("DryRun");
    if let Some(var_1645) = &input.dry_run {
        scope_1644.boolean(*var_1645);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_subnet_cidr_reservation(
    input: &crate::input::DeleteSubnetCidrReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1646 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1647) = &input.subnet_cidr_reservation_id {
        scope_1646.string(var_1647);
    }
    #[allow(unused_mut)]
    let mut scope_1648 = writer.prefix("DryRun");
    if let Some(var_1649) = &input.dry_run {
        scope_1648.boolean(*var_1649);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1650 = writer.prefix("DryRun");
    if let Some(var_1651) = &input.dry_run {
        scope_1650.boolean(*var_1651);
    }
    #[allow(unused_mut)]
    let mut scope_1652 = writer.prefix("ResourceId");
    if let Some(var_1653) = &input.resources {
        let mut list_1655 = scope_1652.start_list(true, None);
        for item_1654 in var_1653 {
            #[allow(unused_mut)]
            let mut entry_1656 = list_1655.entry();
            entry_1656.string(item_1654);
        }
        list_1655.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1657 = writer.prefix("Tag");
    if let Some(var_1658) = &input.tags {
        let mut list_1660 = scope_1657.start_list(true, Some("item"));
        for item_1659 in var_1658 {
            #[allow(unused_mut)]
            let mut entry_1661 = list_1660.entry();
            crate::query_ser::serialize_structure_tag(entry_1661, item_1659);
        }
        list_1660.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1662 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1663) = &input.traffic_mirror_filter_id {
        scope_1662.string(var_1663);
    }
    #[allow(unused_mut)]
    let mut scope_1664 = writer.prefix("DryRun");
    if let Some(var_1665) = &input.dry_run {
        scope_1664.boolean(*var_1665);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1666 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1667) = &input.traffic_mirror_filter_rule_id {
        scope_1666.string(var_1667);
    }
    #[allow(unused_mut)]
    let mut scope_1668 = writer.prefix("DryRun");
    if let Some(var_1669) = &input.dry_run {
        scope_1668.boolean(*var_1669);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1670 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1671) = &input.traffic_mirror_session_id {
        scope_1670.string(var_1671);
    }
    #[allow(unused_mut)]
    let mut scope_1672 = writer.prefix("DryRun");
    if let Some(var_1673) = &input.dry_run {
        scope_1672.boolean(*var_1673);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1674 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1675) = &input.traffic_mirror_target_id {
        scope_1674.string(var_1675);
    }
    #[allow(unused_mut)]
    let mut scope_1676 = writer.prefix("DryRun");
    if let Some(var_1677) = &input.dry_run {
        scope_1676.boolean(*var_1677);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1678 = writer.prefix("TransitGatewayId");
    if let Some(var_1679) = &input.transit_gateway_id {
        scope_1678.string(var_1679);
    }
    #[allow(unused_mut)]
    let mut scope_1680 = writer.prefix("DryRun");
    if let Some(var_1681) = &input.dry_run {
        scope_1680.boolean(*var_1681);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1682 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1683) = &input.transit_gateway_attachment_id {
        scope_1682.string(var_1683);
    }
    #[allow(unused_mut)]
    let mut scope_1684 = writer.prefix("DryRun");
    if let Some(var_1685) = &input.dry_run {
        scope_1684.boolean(*var_1685);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnectPeer", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1686 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1687) = &input.transit_gateway_connect_peer_id {
        scope_1686.string(var_1687);
    }
    #[allow(unused_mut)]
    let mut scope_1688 = writer.prefix("DryRun");
    if let Some(var_1689) = &input.dry_run {
        scope_1688.boolean(*var_1689);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1690 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1691) = &input.transit_gateway_multicast_domain_id {
        scope_1690.string(var_1691);
    }
    #[allow(unused_mut)]
    let mut scope_1692 = writer.prefix("DryRun");
    if let Some(var_1693) = &input.dry_run {
        scope_1692.boolean(*var_1693);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1695) = &input.transit_gateway_attachment_id {
        scope_1694.string(var_1695);
    }
    #[allow(unused_mut)]
    let mut scope_1696 = writer.prefix("DryRun");
    if let Some(var_1697) = &input.dry_run {
        scope_1696.boolean(*var_1697);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1698 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1699) = &input.transit_gateway_route_table_id {
        scope_1698.string(var_1699);
    }
    #[allow(unused_mut)]
    let mut scope_1700 = writer.prefix("PrefixListId");
    if let Some(var_1701) = &input.prefix_list_id {
        scope_1700.string(var_1701);
    }
    #[allow(unused_mut)]
    let mut scope_1702 = writer.prefix("DryRun");
    if let Some(var_1703) = &input.dry_run {
        scope_1702.boolean(*var_1703);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1704 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1705) = &input.transit_gateway_route_table_id {
        scope_1704.string(var_1705);
    }
    #[allow(unused_mut)]
    let mut scope_1706 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1707) = &input.destination_cidr_block {
        scope_1706.string(var_1707);
    }
    #[allow(unused_mut)]
    let mut scope_1708 = writer.prefix("DryRun");
    if let Some(var_1709) = &input.dry_run {
        scope_1708.boolean(*var_1709);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1710 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1711) = &input.transit_gateway_route_table_id {
        scope_1710.string(var_1711);
    }
    #[allow(unused_mut)]
    let mut scope_1712 = writer.prefix("DryRun");
    if let Some(var_1713) = &input.dry_run {
        scope_1712.boolean(*var_1713);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1714 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1715) = &input.transit_gateway_attachment_id {
        scope_1714.string(var_1715);
    }
    #[allow(unused_mut)]
    let mut scope_1716 = writer.prefix("DryRun");
    if let Some(var_1717) = &input.dry_run {
        scope_1716.boolean(*var_1717);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1718 = writer.prefix("VolumeId");
    if let Some(var_1719) = &input.volume_id {
        scope_1718.string(var_1719);
    }
    #[allow(unused_mut)]
    let mut scope_1720 = writer.prefix("DryRun");
    if let Some(var_1721) = &input.dry_run {
        scope_1720.boolean(*var_1721);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1722 = writer.prefix("VpcId");
    if let Some(var_1723) = &input.vpc_id {
        scope_1722.string(var_1723);
    }
    #[allow(unused_mut)]
    let mut scope_1724 = writer.prefix("DryRun");
    if let Some(var_1725) = &input.dry_run {
        scope_1724.boolean(*var_1725);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1726 = writer.prefix("DryRun");
    if let Some(var_1727) = &input.dry_run {
        scope_1726.boolean(*var_1727);
    }
    #[allow(unused_mut)]
    let mut scope_1728 = writer.prefix("ConnectionNotificationId");
    if let Some(var_1729) = &input.connection_notification_ids {
        let mut list_1731 = scope_1728.start_list(true, Some("item"));
        for item_1730 in var_1729 {
            #[allow(unused_mut)]
            let mut entry_1732 = list_1731.entry();
            entry_1732.string(item_1730);
        }
        list_1731.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("DryRun");
    if let Some(var_1734) = &input.dry_run {
        scope_1733.boolean(*var_1734);
    }
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("VpcEndpointId");
    if let Some(var_1736) = &input.vpc_endpoint_ids {
        let mut list_1738 = scope_1735.start_list(true, Some("item"));
        for item_1737 in var_1736 {
            #[allow(unused_mut)]
            let mut entry_1739 = list_1738.entry();
            entry_1739.string(item_1737);
        }
        list_1738.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1740 = writer.prefix("DryRun");
    if let Some(var_1741) = &input.dry_run {
        scope_1740.boolean(*var_1741);
    }
    #[allow(unused_mut)]
    let mut scope_1742 = writer.prefix("ServiceId");
    if let Some(var_1743) = &input.service_ids {
        let mut list_1745 = scope_1742.start_list(true, Some("item"));
        for item_1744 in var_1743 {
            #[allow(unused_mut)]
            let mut entry_1746 = list_1745.entry();
            entry_1746.string(item_1744);
        }
        list_1745.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1747 = writer.prefix("DryRun");
    if let Some(var_1748) = &input.dry_run {
        scope_1747.boolean(*var_1748);
    }
    #[allow(unused_mut)]
    let mut scope_1749 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1750) = &input.vpc_peering_connection_id {
        scope_1749.string(var_1750);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1751 = writer.prefix("VpnConnectionId");
    if let Some(var_1752) = &input.vpn_connection_id {
        scope_1751.string(var_1752);
    }
    #[allow(unused_mut)]
    let mut scope_1753 = writer.prefix("DryRun");
    if let Some(var_1754) = &input.dry_run {
        scope_1753.boolean(*var_1754);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1755 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1756) = &input.destination_cidr_block {
        scope_1755.string(var_1756);
    }
    #[allow(unused_mut)]
    let mut scope_1757 = writer.prefix("VpnConnectionId");
    if let Some(var_1758) = &input.vpn_connection_id {
        scope_1757.string(var_1758);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1759 = writer.prefix("VpnGatewayId");
    if let Some(var_1760) = &input.vpn_gateway_id {
        scope_1759.string(var_1760);
    }
    #[allow(unused_mut)]
    let mut scope_1761 = writer.prefix("DryRun");
    if let Some(var_1762) = &input.dry_run {
        scope_1761.boolean(*var_1762);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1763 = writer.prefix("Cidr");
    if let Some(var_1764) = &input.cidr {
        scope_1763.string(var_1764);
    }
    #[allow(unused_mut)]
    let mut scope_1765 = writer.prefix("DryRun");
    if let Some(var_1766) = &input.dry_run {
        scope_1765.boolean(*var_1766);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1767 = writer.prefix("ImageId");
    if let Some(var_1768) = &input.image_id {
        scope_1767.string(var_1768);
    }
    #[allow(unused_mut)]
    let mut scope_1769 = writer.prefix("DryRun");
    if let Some(var_1770) = &input.dry_run {
        scope_1769.boolean(*var_1770);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1771 = writer.prefix("DryRun");
    if let Some(var_1772) = &input.dry_run {
        scope_1771.boolean(*var_1772);
    }
    #[allow(unused_mut)]
    let mut scope_1773 = writer.prefix("InstanceTagAttribute");
    if let Some(var_1774) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_deregister_instance_tag_attribute_request(
            scope_1773, var_1774,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1775 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1776) = &input.transit_gateway_multicast_domain_id {
        scope_1775.string(var_1776);
    }
    #[allow(unused_mut)]
    let mut scope_1777 = writer.prefix("GroupIpAddress");
    if let Some(var_1778) = &input.group_ip_address {
        scope_1777.string(var_1778);
    }
    #[allow(unused_mut)]
    let mut scope_1779 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1780) = &input.network_interface_ids {
        let mut list_1782 = scope_1779.start_list(true, Some("item"));
        for item_1781 in var_1780 {
            #[allow(unused_mut)]
            let mut entry_1783 = list_1782.entry();
            entry_1783.string(item_1781);
        }
        list_1782.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("DryRun");
    if let Some(var_1785) = &input.dry_run {
        scope_1784.boolean(*var_1785);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1787) = &input.transit_gateway_multicast_domain_id {
        scope_1786.string(var_1787);
    }
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("GroupIpAddress");
    if let Some(var_1789) = &input.group_ip_address {
        scope_1788.string(var_1789);
    }
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1791) = &input.network_interface_ids {
        let mut list_1793 = scope_1790.start_list(true, Some("item"));
        for item_1792 in var_1791 {
            #[allow(unused_mut)]
            let mut entry_1794 = list_1793.entry();
            entry_1794.string(item_1792);
        }
        list_1793.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1795 = writer.prefix("DryRun");
    if let Some(var_1796) = &input.dry_run {
        scope_1795.boolean(*var_1796);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1797 = writer.prefix("AttributeName");
    if let Some(var_1798) = &input.attribute_names {
        let mut list_1800 = scope_1797.start_list(true, Some("attributeName"));
        for item_1799 in var_1798 {
            #[allow(unused_mut)]
            let mut entry_1801 = list_1800.entry();
            entry_1801.string(item_1799.as_str());
        }
        list_1800.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1802 = writer.prefix("DryRun");
    if let Some(var_1803) = &input.dry_run {
        scope_1802.boolean(*var_1803);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1804 = writer.prefix("Filter");
    if let Some(var_1805) = &input.filters {
        let mut list_1807 = scope_1804.start_list(true, Some("Filter"));
        for item_1806 in var_1805 {
            #[allow(unused_mut)]
            let mut entry_1808 = list_1807.entry();
            crate::query_ser::serialize_structure_filter(entry_1808, item_1806);
        }
        list_1807.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1809 = writer.prefix("PublicIp");
    if let Some(var_1810) = &input.public_ips {
        let mut list_1812 = scope_1809.start_list(true, Some("PublicIp"));
        for item_1811 in var_1810 {
            #[allow(unused_mut)]
            let mut entry_1813 = list_1812.entry();
            entry_1813.string(item_1811);
        }
        list_1812.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1814 = writer.prefix("AllocationId");
    if let Some(var_1815) = &input.allocation_ids {
        let mut list_1817 = scope_1814.start_list(true, Some("AllocationId"));
        for item_1816 in var_1815 {
            #[allow(unused_mut)]
            let mut entry_1818 = list_1817.entry();
            entry_1818.string(item_1816);
        }
        list_1817.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("DryRun");
    if let Some(var_1820) = &input.dry_run {
        scope_1819.boolean(*var_1820);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("AllocationId");
    if let Some(var_1822) = &input.allocation_ids {
        let mut list_1824 = scope_1821.start_list(true, Some("item"));
        for item_1823 in var_1822 {
            #[allow(unused_mut)]
            let mut entry_1825 = list_1824.entry();
            entry_1825.string(item_1823);
        }
        list_1824.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1826 = writer.prefix("Attribute");
    if let Some(var_1827) = &input.attribute {
        scope_1826.string(var_1827.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1828 = writer.prefix("NextToken");
    if let Some(var_1829) = &input.next_token {
        scope_1828.string(var_1829);
    }
    #[allow(unused_mut)]
    let mut scope_1830 = writer.prefix("MaxResults");
    if let Some(var_1831) = &input.max_results {
        scope_1830.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1831).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1832 = writer.prefix("DryRun");
    if let Some(var_1833) = &input.dry_run {
        scope_1832.boolean(*var_1833);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1834 = writer.prefix("DryRun");
    if let Some(var_1835) = &input.dry_run {
        scope_1834.boolean(*var_1835);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1836 = writer.prefix("Filter");
    if let Some(var_1837) = &input.filters {
        let mut list_1839 = scope_1836.start_list(true, Some("Filter"));
        for item_1838 in var_1837 {
            #[allow(unused_mut)]
            let mut entry_1840 = list_1839.entry();
            crate::query_ser::serialize_structure_filter(entry_1840, item_1838);
        }
        list_1839.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1841 = writer.prefix("ZoneName");
    if let Some(var_1842) = &input.zone_names {
        let mut list_1844 = scope_1841.start_list(true, Some("ZoneName"));
        for item_1843 in var_1842 {
            #[allow(unused_mut)]
            let mut entry_1845 = list_1844.entry();
            entry_1845.string(item_1843);
        }
        list_1844.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1846 = writer.prefix("ZoneId");
    if let Some(var_1847) = &input.zone_ids {
        let mut list_1849 = scope_1846.start_list(true, Some("ZoneId"));
        for item_1848 in var_1847 {
            #[allow(unused_mut)]
            let mut entry_1850 = list_1849.entry();
            entry_1850.string(item_1848);
        }
        list_1849.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1851 = writer.prefix("AllAvailabilityZones");
    if let Some(var_1852) = &input.all_availability_zones {
        scope_1851.boolean(*var_1852);
    }
    #[allow(unused_mut)]
    let mut scope_1853 = writer.prefix("DryRun");
    if let Some(var_1854) = &input.dry_run {
        scope_1853.boolean(*var_1854);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1855 = writer.prefix("BundleId");
    if let Some(var_1856) = &input.bundle_ids {
        let mut list_1858 = scope_1855.start_list(true, Some("BundleId"));
        for item_1857 in var_1856 {
            #[allow(unused_mut)]
            let mut entry_1859 = list_1858.entry();
            entry_1859.string(item_1857);
        }
        list_1858.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1860 = writer.prefix("Filter");
    if let Some(var_1861) = &input.filters {
        let mut list_1863 = scope_1860.start_list(true, Some("Filter"));
        for item_1862 in var_1861 {
            #[allow(unused_mut)]
            let mut entry_1864 = list_1863.entry();
            crate::query_ser::serialize_structure_filter(entry_1864, item_1862);
        }
        list_1863.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1865 = writer.prefix("DryRun");
    if let Some(var_1866) = &input.dry_run {
        scope_1865.boolean(*var_1866);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1867 = writer.prefix("DryRun");
    if let Some(var_1868) = &input.dry_run {
        scope_1867.boolean(*var_1868);
    }
    #[allow(unused_mut)]
    let mut scope_1869 = writer.prefix("MaxResults");
    if let Some(var_1870) = &input.max_results {
        scope_1869.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1870).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1871 = writer.prefix("NextToken");
    if let Some(var_1872) = &input.next_token {
        scope_1871.string(var_1872);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1873 = writer.prefix("CapacityReservationId");
    if let Some(var_1874) = &input.capacity_reservation_ids {
        let mut list_1876 = scope_1873.start_list(true, Some("item"));
        for item_1875 in var_1874 {
            #[allow(unused_mut)]
            let mut entry_1877 = list_1876.entry();
            entry_1877.string(item_1875);
        }
        list_1876.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1878 = writer.prefix("NextToken");
    if let Some(var_1879) = &input.next_token {
        scope_1878.string(var_1879);
    }
    #[allow(unused_mut)]
    let mut scope_1880 = writer.prefix("MaxResults");
    if let Some(var_1881) = &input.max_results {
        scope_1880.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1881).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1882 = writer.prefix("Filter");
    if let Some(var_1883) = &input.filters {
        let mut list_1885 = scope_1882.start_list(true, Some("Filter"));
        for item_1884 in var_1883 {
            #[allow(unused_mut)]
            let mut entry_1886 = list_1885.entry();
            crate::query_ser::serialize_structure_filter(entry_1886, item_1884);
        }
        list_1885.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1887 = writer.prefix("DryRun");
    if let Some(var_1888) = &input.dry_run {
        scope_1887.boolean(*var_1888);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1889 = writer.prefix("CarrierGatewayId");
    if let Some(var_1890) = &input.carrier_gateway_ids {
        let mut list_1892 = scope_1889.start_list(true, None);
        for item_1891 in var_1890 {
            #[allow(unused_mut)]
            let mut entry_1893 = list_1892.entry();
            entry_1893.string(item_1891);
        }
        list_1892.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1894 = writer.prefix("Filter");
    if let Some(var_1895) = &input.filters {
        let mut list_1897 = scope_1894.start_list(true, Some("Filter"));
        for item_1896 in var_1895 {
            #[allow(unused_mut)]
            let mut entry_1898 = list_1897.entry();
            crate::query_ser::serialize_structure_filter(entry_1898, item_1896);
        }
        list_1897.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1899 = writer.prefix("MaxResults");
    if let Some(var_1900) = &input.max_results {
        scope_1899.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1900).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1901 = writer.prefix("NextToken");
    if let Some(var_1902) = &input.next_token {
        scope_1901.string(var_1902);
    }
    #[allow(unused_mut)]
    let mut scope_1903 = writer.prefix("DryRun");
    if let Some(var_1904) = &input.dry_run {
        scope_1903.boolean(*var_1904);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1905 = writer.prefix("Filter");
    if let Some(var_1906) = &input.filters {
        let mut list_1908 = scope_1905.start_list(true, Some("Filter"));
        for item_1907 in var_1906 {
            #[allow(unused_mut)]
            let mut entry_1909 = list_1908.entry();
            crate::query_ser::serialize_structure_filter(entry_1909, item_1907);
        }
        list_1908.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1910 = writer.prefix("DryRun");
    if let Some(var_1911) = &input.dry_run {
        scope_1910.boolean(*var_1911);
    }
    #[allow(unused_mut)]
    let mut scope_1912 = writer.prefix("InstanceId");
    if let Some(var_1913) = &input.instance_ids {
        let mut list_1915 = scope_1912.start_list(true, Some("InstanceId"));
        for item_1914 in var_1913 {
            #[allow(unused_mut)]
            let mut entry_1916 = list_1915.entry();
            entry_1916.string(item_1914);
        }
        list_1915.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1917 = writer.prefix("MaxResults");
    if let Some(var_1918) = &input.max_results {
        scope_1917.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1918).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1919 = writer.prefix("NextToken");
    if let Some(var_1920) = &input.next_token {
        scope_1919.string(var_1920);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1921 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1922) = &input.client_vpn_endpoint_id {
        scope_1921.string(var_1922);
    }
    #[allow(unused_mut)]
    let mut scope_1923 = writer.prefix("DryRun");
    if let Some(var_1924) = &input.dry_run {
        scope_1923.boolean(*var_1924);
    }
    #[allow(unused_mut)]
    let mut scope_1925 = writer.prefix("NextToken");
    if let Some(var_1926) = &input.next_token {
        scope_1925.string(var_1926);
    }
    #[allow(unused_mut)]
    let mut scope_1927 = writer.prefix("Filter");
    if let Some(var_1928) = &input.filters {
        let mut list_1930 = scope_1927.start_list(true, Some("Filter"));
        for item_1929 in var_1928 {
            #[allow(unused_mut)]
            let mut entry_1931 = list_1930.entry();
            crate::query_ser::serialize_structure_filter(entry_1931, item_1929);
        }
        list_1930.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1932 = writer.prefix("MaxResults");
    if let Some(var_1933) = &input.max_results {
        scope_1932.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1933).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1934 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1935) = &input.client_vpn_endpoint_id {
        scope_1934.string(var_1935);
    }
    #[allow(unused_mut)]
    let mut scope_1936 = writer.prefix("Filter");
    if let Some(var_1937) = &input.filters {
        let mut list_1939 = scope_1936.start_list(true, Some("Filter"));
        for item_1938 in var_1937 {
            #[allow(unused_mut)]
            let mut entry_1940 = list_1939.entry();
            crate::query_ser::serialize_structure_filter(entry_1940, item_1938);
        }
        list_1939.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1941 = writer.prefix("NextToken");
    if let Some(var_1942) = &input.next_token {
        scope_1941.string(var_1942);
    }
    #[allow(unused_mut)]
    let mut scope_1943 = writer.prefix("MaxResults");
    if let Some(var_1944) = &input.max_results {
        scope_1943.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1944).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1945 = writer.prefix("DryRun");
    if let Some(var_1946) = &input.dry_run {
        scope_1945.boolean(*var_1946);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1947 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1948) = &input.client_vpn_endpoint_ids {
        let mut list_1950 = scope_1947.start_list(true, Some("item"));
        for item_1949 in var_1948 {
            #[allow(unused_mut)]
            let mut entry_1951 = list_1950.entry();
            entry_1951.string(item_1949);
        }
        list_1950.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1952 = writer.prefix("MaxResults");
    if let Some(var_1953) = &input.max_results {
        scope_1952.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1953).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1954 = writer.prefix("NextToken");
    if let Some(var_1955) = &input.next_token {
        scope_1954.string(var_1955);
    }
    #[allow(unused_mut)]
    let mut scope_1956 = writer.prefix("Filter");
    if let Some(var_1957) = &input.filters {
        let mut list_1959 = scope_1956.start_list(true, Some("Filter"));
        for item_1958 in var_1957 {
            #[allow(unused_mut)]
            let mut entry_1960 = list_1959.entry();
            crate::query_ser::serialize_structure_filter(entry_1960, item_1958);
        }
        list_1959.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1961 = writer.prefix("DryRun");
    if let Some(var_1962) = &input.dry_run {
        scope_1961.boolean(*var_1962);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1963 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1964) = &input.client_vpn_endpoint_id {
        scope_1963.string(var_1964);
    }
    #[allow(unused_mut)]
    let mut scope_1965 = writer.prefix("Filter");
    if let Some(var_1966) = &input.filters {
        let mut list_1968 = scope_1965.start_list(true, Some("Filter"));
        for item_1967 in var_1966 {
            #[allow(unused_mut)]
            let mut entry_1969 = list_1968.entry();
            crate::query_ser::serialize_structure_filter(entry_1969, item_1967);
        }
        list_1968.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1970 = writer.prefix("MaxResults");
    if let Some(var_1971) = &input.max_results {
        scope_1970.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1971).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1972 = writer.prefix("NextToken");
    if let Some(var_1973) = &input.next_token {
        scope_1972.string(var_1973);
    }
    #[allow(unused_mut)]
    let mut scope_1974 = writer.prefix("DryRun");
    if let Some(var_1975) = &input.dry_run {
        scope_1974.boolean(*var_1975);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnTargetNetworks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1976 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1977) = &input.client_vpn_endpoint_id {
        scope_1976.string(var_1977);
    }
    #[allow(unused_mut)]
    let mut scope_1978 = writer.prefix("AssociationIds");
    if let Some(var_1979) = &input.association_ids {
        let mut list_1981 = scope_1978.start_list(true, Some("item"));
        for item_1980 in var_1979 {
            #[allow(unused_mut)]
            let mut entry_1982 = list_1981.entry();
            entry_1982.string(item_1980);
        }
        list_1981.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1983 = writer.prefix("MaxResults");
    if let Some(var_1984) = &input.max_results {
        scope_1983.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1984).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1985 = writer.prefix("NextToken");
    if let Some(var_1986) = &input.next_token {
        scope_1985.string(var_1986);
    }
    #[allow(unused_mut)]
    let mut scope_1987 = writer.prefix("Filter");
    if let Some(var_1988) = &input.filters {
        let mut list_1990 = scope_1987.start_list(true, Some("Filter"));
        for item_1989 in var_1988 {
            #[allow(unused_mut)]
            let mut entry_1991 = list_1990.entry();
            crate::query_ser::serialize_structure_filter(entry_1991, item_1989);
        }
        list_1990.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1992 = writer.prefix("DryRun");
    if let Some(var_1993) = &input.dry_run {
        scope_1992.boolean(*var_1993);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1994 = writer.prefix("PoolId");
    if let Some(var_1995) = &input.pool_ids {
        let mut list_1997 = scope_1994.start_list(true, Some("item"));
        for item_1996 in var_1995 {
            #[allow(unused_mut)]
            let mut entry_1998 = list_1997.entry();
            entry_1998.string(item_1996);
        }
        list_1997.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1999 = writer.prefix("Filter");
    if let Some(var_2000) = &input.filters {
        let mut list_2002 = scope_1999.start_list(true, Some("Filter"));
        for item_2001 in var_2000 {
            #[allow(unused_mut)]
            let mut entry_2003 = list_2002.entry();
            crate::query_ser::serialize_structure_filter(entry_2003, item_2001);
        }
        list_2002.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2004 = writer.prefix("MaxResults");
    if let Some(var_2005) = &input.max_results {
        scope_2004.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2005).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2006 = writer.prefix("NextToken");
    if let Some(var_2007) = &input.next_token {
        scope_2006.string(var_2007);
    }
    #[allow(unused_mut)]
    let mut scope_2008 = writer.prefix("DryRun");
    if let Some(var_2009) = &input.dry_run {
        scope_2008.boolean(*var_2009);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2010 = writer.prefix("ConversionTaskId");
    if let Some(var_2011) = &input.conversion_task_ids {
        let mut list_2013 = scope_2010.start_list(true, Some("item"));
        for item_2012 in var_2011 {
            #[allow(unused_mut)]
            let mut entry_2014 = list_2013.entry();
            entry_2014.string(item_2012);
        }
        list_2013.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2015 = writer.prefix("DryRun");
    if let Some(var_2016) = &input.dry_run {
        scope_2015.boolean(*var_2016);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2017 = writer.prefix("CustomerGatewayId");
    if let Some(var_2018) = &input.customer_gateway_ids {
        let mut list_2020 = scope_2017.start_list(true, Some("CustomerGatewayId"));
        for item_2019 in var_2018 {
            #[allow(unused_mut)]
            let mut entry_2021 = list_2020.entry();
            entry_2021.string(item_2019);
        }
        list_2020.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2022 = writer.prefix("Filter");
    if let Some(var_2023) = &input.filters {
        let mut list_2025 = scope_2022.start_list(true, Some("Filter"));
        for item_2024 in var_2023 {
            #[allow(unused_mut)]
            let mut entry_2026 = list_2025.entry();
            crate::query_ser::serialize_structure_filter(entry_2026, item_2024);
        }
        list_2025.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2027 = writer.prefix("DryRun");
    if let Some(var_2028) = &input.dry_run {
        scope_2027.boolean(*var_2028);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2029 = writer.prefix("DhcpOptionsId");
    if let Some(var_2030) = &input.dhcp_options_ids {
        let mut list_2032 = scope_2029.start_list(true, Some("DhcpOptionsId"));
        for item_2031 in var_2030 {
            #[allow(unused_mut)]
            let mut entry_2033 = list_2032.entry();
            entry_2033.string(item_2031);
        }
        list_2032.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2034 = writer.prefix("Filter");
    if let Some(var_2035) = &input.filters {
        let mut list_2037 = scope_2034.start_list(true, Some("Filter"));
        for item_2036 in var_2035 {
            #[allow(unused_mut)]
            let mut entry_2038 = list_2037.entry();
            crate::query_ser::serialize_structure_filter(entry_2038, item_2036);
        }
        list_2037.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2039 = writer.prefix("DryRun");
    if let Some(var_2040) = &input.dry_run {
        scope_2039.boolean(*var_2040);
    }
    #[allow(unused_mut)]
    let mut scope_2041 = writer.prefix("NextToken");
    if let Some(var_2042) = &input.next_token {
        scope_2041.string(var_2042);
    }
    #[allow(unused_mut)]
    let mut scope_2043 = writer.prefix("MaxResults");
    if let Some(var_2044) = &input.max_results {
        scope_2043.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2044).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2045 = writer.prefix("DryRun");
    if let Some(var_2046) = &input.dry_run {
        scope_2045.boolean(*var_2046);
    }
    #[allow(unused_mut)]
    let mut scope_2047 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2048) = &input.egress_only_internet_gateway_ids {
        let mut list_2050 = scope_2047.start_list(true, Some("item"));
        for item_2049 in var_2048 {
            #[allow(unused_mut)]
            let mut entry_2051 = list_2050.entry();
            entry_2051.string(item_2049);
        }
        list_2050.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2052 = writer.prefix("MaxResults");
    if let Some(var_2053) = &input.max_results {
        scope_2052.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2053).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2054 = writer.prefix("NextToken");
    if let Some(var_2055) = &input.next_token {
        scope_2054.string(var_2055);
    }
    #[allow(unused_mut)]
    let mut scope_2056 = writer.prefix("Filter");
    if let Some(var_2057) = &input.filters {
        let mut list_2059 = scope_2056.start_list(true, Some("Filter"));
        for item_2058 in var_2057 {
            #[allow(unused_mut)]
            let mut entry_2060 = list_2059.entry();
            crate::query_ser::serialize_structure_filter(entry_2060, item_2058);
        }
        list_2059.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2061 = writer.prefix("ElasticGpuId");
    if let Some(var_2062) = &input.elastic_gpu_ids {
        let mut list_2064 = scope_2061.start_list(true, Some("item"));
        for item_2063 in var_2062 {
            #[allow(unused_mut)]
            let mut entry_2065 = list_2064.entry();
            entry_2065.string(item_2063);
        }
        list_2064.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2066 = writer.prefix("DryRun");
    if let Some(var_2067) = &input.dry_run {
        scope_2066.boolean(*var_2067);
    }
    #[allow(unused_mut)]
    let mut scope_2068 = writer.prefix("Filter");
    if let Some(var_2069) = &input.filters {
        let mut list_2071 = scope_2068.start_list(true, Some("Filter"));
        for item_2070 in var_2069 {
            #[allow(unused_mut)]
            let mut entry_2072 = list_2071.entry();
            crate::query_ser::serialize_structure_filter(entry_2072, item_2070);
        }
        list_2071.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2073 = writer.prefix("MaxResults");
    if let Some(var_2074) = &input.max_results {
        scope_2073.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2074).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2075 = writer.prefix("NextToken");
    if let Some(var_2076) = &input.next_token {
        scope_2075.string(var_2076);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2077 = writer.prefix("DryRun");
    if let Some(var_2078) = &input.dry_run {
        scope_2077.boolean(*var_2078);
    }
    #[allow(unused_mut)]
    let mut scope_2079 = writer.prefix("Filter");
    if let Some(var_2080) = &input.filters {
        let mut list_2082 = scope_2079.start_list(true, Some("Filter"));
        for item_2081 in var_2080 {
            #[allow(unused_mut)]
            let mut entry_2083 = list_2082.entry();
            crate::query_ser::serialize_structure_filter(entry_2083, item_2081);
        }
        list_2082.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2084 = writer.prefix("ExportImageTaskId");
    if let Some(var_2085) = &input.export_image_task_ids {
        let mut list_2087 = scope_2084.start_list(true, Some("ExportImageTaskId"));
        for item_2086 in var_2085 {
            #[allow(unused_mut)]
            let mut entry_2088 = list_2087.entry();
            entry_2088.string(item_2086);
        }
        list_2087.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2089 = writer.prefix("MaxResults");
    if let Some(var_2090) = &input.max_results {
        scope_2089.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2090).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2091 = writer.prefix("NextToken");
    if let Some(var_2092) = &input.next_token {
        scope_2091.string(var_2092);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2093 = writer.prefix("ExportTaskId");
    if let Some(var_2094) = &input.export_task_ids {
        let mut list_2096 = scope_2093.start_list(true, Some("ExportTaskId"));
        for item_2095 in var_2094 {
            #[allow(unused_mut)]
            let mut entry_2097 = list_2096.entry();
            entry_2097.string(item_2095);
        }
        list_2096.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2098 = writer.prefix("Filter");
    if let Some(var_2099) = &input.filters {
        let mut list_2101 = scope_2098.start_list(true, Some("Filter"));
        for item_2100 in var_2099 {
            #[allow(unused_mut)]
            let mut entry_2102 = list_2101.entry();
            crate::query_ser::serialize_structure_filter(entry_2102, item_2100);
        }
        list_2101.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2103 = writer.prefix("Filter");
    if let Some(var_2104) = &input.filters {
        let mut list_2106 = scope_2103.start_list(true, Some("Filter"));
        for item_2105 in var_2104 {
            #[allow(unused_mut)]
            let mut entry_2107 = list_2106.entry();
            crate::query_ser::serialize_structure_filter(entry_2107, item_2105);
        }
        list_2106.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2108 = writer.prefix("MaxResults");
    if let Some(var_2109) = &input.max_results {
        scope_2108.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2109).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2110 = writer.prefix("NextToken");
    if let Some(var_2111) = &input.next_token {
        scope_2110.string(var_2111);
    }
    #[allow(unused_mut)]
    let mut scope_2112 = writer.prefix("DryRun");
    if let Some(var_2113) = &input.dry_run {
        scope_2112.boolean(*var_2113);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2114 = writer.prefix("DryRun");
    if let Some(var_2115) = &input.dry_run {
        scope_2114.boolean(*var_2115);
    }
    #[allow(unused_mut)]
    let mut scope_2116 = writer.prefix("EventType");
    if let Some(var_2117) = &input.event_type {
        scope_2116.string(var_2117.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2118 = writer.prefix("MaxResults");
    if let Some(var_2119) = &input.max_results {
        scope_2118.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2119).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2120 = writer.prefix("NextToken");
    if let Some(var_2121) = &input.next_token {
        scope_2120.string(var_2121);
    }
    #[allow(unused_mut)]
    let mut scope_2122 = writer.prefix("FleetId");
    if let Some(var_2123) = &input.fleet_id {
        scope_2122.string(var_2123);
    }
    #[allow(unused_mut)]
    let mut scope_2124 = writer.prefix("StartTime");
    if let Some(var_2125) = &input.start_time {
        scope_2124.instant(var_2125, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2126 = writer.prefix("DryRun");
    if let Some(var_2127) = &input.dry_run {
        scope_2126.boolean(*var_2127);
    }
    #[allow(unused_mut)]
    let mut scope_2128 = writer.prefix("MaxResults");
    if let Some(var_2129) = &input.max_results {
        scope_2128.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2129).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2130 = writer.prefix("NextToken");
    if let Some(var_2131) = &input.next_token {
        scope_2130.string(var_2131);
    }
    #[allow(unused_mut)]
    let mut scope_2132 = writer.prefix("FleetId");
    if let Some(var_2133) = &input.fleet_id {
        scope_2132.string(var_2133);
    }
    #[allow(unused_mut)]
    let mut scope_2134 = writer.prefix("Filter");
    if let Some(var_2135) = &input.filters {
        let mut list_2137 = scope_2134.start_list(true, Some("Filter"));
        for item_2136 in var_2135 {
            #[allow(unused_mut)]
            let mut entry_2138 = list_2137.entry();
            crate::query_ser::serialize_structure_filter(entry_2138, item_2136);
        }
        list_2137.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2139 = writer.prefix("DryRun");
    if let Some(var_2140) = &input.dry_run {
        scope_2139.boolean(*var_2140);
    }
    #[allow(unused_mut)]
    let mut scope_2141 = writer.prefix("MaxResults");
    if let Some(var_2142) = &input.max_results {
        scope_2141.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2142).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2143 = writer.prefix("NextToken");
    if let Some(var_2144) = &input.next_token {
        scope_2143.string(var_2144);
    }
    #[allow(unused_mut)]
    let mut scope_2145 = writer.prefix("FleetId");
    if let Some(var_2146) = &input.fleet_ids {
        let mut list_2148 = scope_2145.start_list(true, None);
        for item_2147 in var_2146 {
            #[allow(unused_mut)]
            let mut entry_2149 = list_2148.entry();
            entry_2149.string(item_2147);
        }
        list_2148.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2150 = writer.prefix("Filter");
    if let Some(var_2151) = &input.filters {
        let mut list_2153 = scope_2150.start_list(true, Some("Filter"));
        for item_2152 in var_2151 {
            #[allow(unused_mut)]
            let mut entry_2154 = list_2153.entry();
            crate::query_ser::serialize_structure_filter(entry_2154, item_2152);
        }
        list_2153.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2155 = writer.prefix("DryRun");
    if let Some(var_2156) = &input.dry_run {
        scope_2155.boolean(*var_2156);
    }
    #[allow(unused_mut)]
    let mut scope_2157 = writer.prefix("Filter");
    if let Some(var_2158) = &input.filter {
        let mut list_2160 = scope_2157.start_list(true, Some("Filter"));
        for item_2159 in var_2158 {
            #[allow(unused_mut)]
            let mut entry_2161 = list_2160.entry();
            crate::query_ser::serialize_structure_filter(entry_2161, item_2159);
        }
        list_2160.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2162 = writer.prefix("FlowLogId");
    if let Some(var_2163) = &input.flow_log_ids {
        let mut list_2165 = scope_2162.start_list(true, Some("item"));
        for item_2164 in var_2163 {
            #[allow(unused_mut)]
            let mut entry_2166 = list_2165.entry();
            entry_2166.string(item_2164);
        }
        list_2165.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2167 = writer.prefix("MaxResults");
    if let Some(var_2168) = &input.max_results {
        scope_2167.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2168).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2169 = writer.prefix("NextToken");
    if let Some(var_2170) = &input.next_token {
        scope_2169.string(var_2170);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2171 = writer.prefix("DryRun");
    if let Some(var_2172) = &input.dry_run {
        scope_2171.boolean(*var_2172);
    }
    #[allow(unused_mut)]
    let mut scope_2173 = writer.prefix("FpgaImageId");
    if let Some(var_2174) = &input.fpga_image_id {
        scope_2173.string(var_2174);
    }
    #[allow(unused_mut)]
    let mut scope_2175 = writer.prefix("Attribute");
    if let Some(var_2176) = &input.attribute {
        scope_2175.string(var_2176.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2177 = writer.prefix("DryRun");
    if let Some(var_2178) = &input.dry_run {
        scope_2177.boolean(*var_2178);
    }
    #[allow(unused_mut)]
    let mut scope_2179 = writer.prefix("FpgaImageId");
    if let Some(var_2180) = &input.fpga_image_ids {
        let mut list_2182 = scope_2179.start_list(true, Some("item"));
        for item_2181 in var_2180 {
            #[allow(unused_mut)]
            let mut entry_2183 = list_2182.entry();
            entry_2183.string(item_2181);
        }
        list_2182.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2184 = writer.prefix("Owner");
    if let Some(var_2185) = &input.owners {
        let mut list_2187 = scope_2184.start_list(true, Some("Owner"));
        for item_2186 in var_2185 {
            #[allow(unused_mut)]
            let mut entry_2188 = list_2187.entry();
            entry_2188.string(item_2186);
        }
        list_2187.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2189 = writer.prefix("Filter");
    if let Some(var_2190) = &input.filters {
        let mut list_2192 = scope_2189.start_list(true, Some("Filter"));
        for item_2191 in var_2190 {
            #[allow(unused_mut)]
            let mut entry_2193 = list_2192.entry();
            crate::query_ser::serialize_structure_filter(entry_2193, item_2191);
        }
        list_2192.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2194 = writer.prefix("NextToken");
    if let Some(var_2195) = &input.next_token {
        scope_2194.string(var_2195);
    }
    #[allow(unused_mut)]
    let mut scope_2196 = writer.prefix("MaxResults");
    if let Some(var_2197) = &input.max_results {
        scope_2196.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2197).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeHostReservationOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2198 = writer.prefix("Filter");
    if let Some(var_2199) = &input.filter {
        let mut list_2201 = scope_2198.start_list(true, Some("Filter"));
        for item_2200 in var_2199 {
            #[allow(unused_mut)]
            let mut entry_2202 = list_2201.entry();
            crate::query_ser::serialize_structure_filter(entry_2202, item_2200);
        }
        list_2201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2203 = writer.prefix("MaxDuration");
    if let Some(var_2204) = &input.max_duration {
        scope_2203.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2204).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2205 = writer.prefix("MaxResults");
    if let Some(var_2206) = &input.max_results {
        scope_2205.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2206).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2207 = writer.prefix("MinDuration");
    if let Some(var_2208) = &input.min_duration {
        scope_2207.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2208).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2209 = writer.prefix("NextToken");
    if let Some(var_2210) = &input.next_token {
        scope_2209.string(var_2210);
    }
    #[allow(unused_mut)]
    let mut scope_2211 = writer.prefix("OfferingId");
    if let Some(var_2212) = &input.offering_id {
        scope_2211.string(var_2212);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2213 = writer.prefix("Filter");
    if let Some(var_2214) = &input.filter {
        let mut list_2216 = scope_2213.start_list(true, Some("Filter"));
        for item_2215 in var_2214 {
            #[allow(unused_mut)]
            let mut entry_2217 = list_2216.entry();
            crate::query_ser::serialize_structure_filter(entry_2217, item_2215);
        }
        list_2216.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2218 = writer.prefix("HostReservationIdSet");
    if let Some(var_2219) = &input.host_reservation_id_set {
        let mut list_2221 = scope_2218.start_list(true, Some("item"));
        for item_2220 in var_2219 {
            #[allow(unused_mut)]
            let mut entry_2222 = list_2221.entry();
            entry_2222.string(item_2220);
        }
        list_2221.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2223 = writer.prefix("MaxResults");
    if let Some(var_2224) = &input.max_results {
        scope_2223.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2224).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2225 = writer.prefix("NextToken");
    if let Some(var_2226) = &input.next_token {
        scope_2225.string(var_2226);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2227 = writer.prefix("Filter");
    if let Some(var_2228) = &input.filter {
        let mut list_2230 = scope_2227.start_list(true, Some("Filter"));
        for item_2229 in var_2228 {
            #[allow(unused_mut)]
            let mut entry_2231 = list_2230.entry();
            crate::query_ser::serialize_structure_filter(entry_2231, item_2229);
        }
        list_2230.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2232 = writer.prefix("HostId");
    if let Some(var_2233) = &input.host_ids {
        let mut list_2235 = scope_2232.start_list(true, Some("item"));
        for item_2234 in var_2233 {
            #[allow(unused_mut)]
            let mut entry_2236 = list_2235.entry();
            entry_2236.string(item_2234);
        }
        list_2235.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2237 = writer.prefix("MaxResults");
    if let Some(var_2238) = &input.max_results {
        scope_2237.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2238).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2239 = writer.prefix("NextToken");
    if let Some(var_2240) = &input.next_token {
        scope_2239.string(var_2240);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2241 = writer.prefix("AssociationId");
    if let Some(var_2242) = &input.association_ids {
        let mut list_2244 = scope_2241.start_list(true, Some("AssociationId"));
        for item_2243 in var_2242 {
            #[allow(unused_mut)]
            let mut entry_2245 = list_2244.entry();
            entry_2245.string(item_2243);
        }
        list_2244.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2246 = writer.prefix("Filter");
    if let Some(var_2247) = &input.filters {
        let mut list_2249 = scope_2246.start_list(true, Some("Filter"));
        for item_2248 in var_2247 {
            #[allow(unused_mut)]
            let mut entry_2250 = list_2249.entry();
            crate::query_ser::serialize_structure_filter(entry_2250, item_2248);
        }
        list_2249.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2251 = writer.prefix("MaxResults");
    if let Some(var_2252) = &input.max_results {
        scope_2251.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2252).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2253 = writer.prefix("NextToken");
    if let Some(var_2254) = &input.next_token {
        scope_2253.string(var_2254);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2255 = writer.prefix("PrincipalArn");
    if let Some(var_2256) = &input.principal_arn {
        scope_2255.string(var_2256);
    }
    #[allow(unused_mut)]
    let mut scope_2257 = writer.prefix("Resource");
    if let Some(var_2258) = &input.resource {
        scope_2257.string(var_2258);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2259 = writer.prefix("Resource");
    if let Some(var_2260) = &input.resource {
        scope_2259.string(var_2260);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2261 = writer.prefix("Attribute");
    if let Some(var_2262) = &input.attribute {
        scope_2261.string(var_2262.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2263 = writer.prefix("ImageId");
    if let Some(var_2264) = &input.image_id {
        scope_2263.string(var_2264);
    }
    #[allow(unused_mut)]
    let mut scope_2265 = writer.prefix("DryRun");
    if let Some(var_2266) = &input.dry_run {
        scope_2265.boolean(*var_2266);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2267 = writer.prefix("ExecutableBy");
    if let Some(var_2268) = &input.executable_users {
        let mut list_2270 = scope_2267.start_list(true, Some("ExecutableBy"));
        for item_2269 in var_2268 {
            #[allow(unused_mut)]
            let mut entry_2271 = list_2270.entry();
            entry_2271.string(item_2269);
        }
        list_2270.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2272 = writer.prefix("Filter");
    if let Some(var_2273) = &input.filters {
        let mut list_2275 = scope_2272.start_list(true, Some("Filter"));
        for item_2274 in var_2273 {
            #[allow(unused_mut)]
            let mut entry_2276 = list_2275.entry();
            crate::query_ser::serialize_structure_filter(entry_2276, item_2274);
        }
        list_2275.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2277 = writer.prefix("ImageId");
    if let Some(var_2278) = &input.image_ids {
        let mut list_2280 = scope_2277.start_list(true, Some("ImageId"));
        for item_2279 in var_2278 {
            #[allow(unused_mut)]
            let mut entry_2281 = list_2280.entry();
            entry_2281.string(item_2279);
        }
        list_2280.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2282 = writer.prefix("Owner");
    if let Some(var_2283) = &input.owners {
        let mut list_2285 = scope_2282.start_list(true, Some("Owner"));
        for item_2284 in var_2283 {
            #[allow(unused_mut)]
            let mut entry_2286 = list_2285.entry();
            entry_2286.string(item_2284);
        }
        list_2285.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2287 = writer.prefix("IncludeDeprecated");
    if let Some(var_2288) = &input.include_deprecated {
        scope_2287.boolean(*var_2288);
    }
    #[allow(unused_mut)]
    let mut scope_2289 = writer.prefix("DryRun");
    if let Some(var_2290) = &input.dry_run {
        scope_2289.boolean(*var_2290);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2291 = writer.prefix("DryRun");
    if let Some(var_2292) = &input.dry_run {
        scope_2291.boolean(*var_2292);
    }
    #[allow(unused_mut)]
    let mut scope_2293 = writer.prefix("Filters");
    if let Some(var_2294) = &input.filters {
        let mut list_2296 = scope_2293.start_list(true, Some("Filter"));
        for item_2295 in var_2294 {
            #[allow(unused_mut)]
            let mut entry_2297 = list_2296.entry();
            crate::query_ser::serialize_structure_filter(entry_2297, item_2295);
        }
        list_2296.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2298 = writer.prefix("ImportTaskId");
    if let Some(var_2299) = &input.import_task_ids {
        let mut list_2301 = scope_2298.start_list(true, Some("ImportTaskId"));
        for item_2300 in var_2299 {
            #[allow(unused_mut)]
            let mut entry_2302 = list_2301.entry();
            entry_2302.string(item_2300);
        }
        list_2301.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2303 = writer.prefix("MaxResults");
    if let Some(var_2304) = &input.max_results {
        scope_2303.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2304).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2305 = writer.prefix("NextToken");
    if let Some(var_2306) = &input.next_token {
        scope_2305.string(var_2306);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2307 = writer.prefix("DryRun");
    if let Some(var_2308) = &input.dry_run {
        scope_2307.boolean(*var_2308);
    }
    #[allow(unused_mut)]
    let mut scope_2309 = writer.prefix("Filters");
    if let Some(var_2310) = &input.filters {
        let mut list_2312 = scope_2309.start_list(true, Some("Filter"));
        for item_2311 in var_2310 {
            #[allow(unused_mut)]
            let mut entry_2313 = list_2312.entry();
            crate::query_ser::serialize_structure_filter(entry_2313, item_2311);
        }
        list_2312.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2314 = writer.prefix("ImportTaskId");
    if let Some(var_2315) = &input.import_task_ids {
        let mut list_2317 = scope_2314.start_list(true, Some("ImportTaskId"));
        for item_2316 in var_2315 {
            #[allow(unused_mut)]
            let mut entry_2318 = list_2317.entry();
            entry_2318.string(item_2316);
        }
        list_2317.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2319 = writer.prefix("MaxResults");
    if let Some(var_2320) = &input.max_results {
        scope_2319.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2320).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2321 = writer.prefix("NextToken");
    if let Some(var_2322) = &input.next_token {
        scope_2321.string(var_2322);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2323 = writer.prefix("Attribute");
    if let Some(var_2324) = &input.attribute {
        scope_2323.string(var_2324.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2325 = writer.prefix("DryRun");
    if let Some(var_2326) = &input.dry_run {
        scope_2325.boolean(*var_2326);
    }
    #[allow(unused_mut)]
    let mut scope_2327 = writer.prefix("InstanceId");
    if let Some(var_2328) = &input.instance_id {
        scope_2327.string(var_2328);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2329 = writer.prefix("DryRun");
    if let Some(var_2330) = &input.dry_run {
        scope_2329.boolean(*var_2330);
    }
    #[allow(unused_mut)]
    let mut scope_2331 = writer.prefix("Filter");
    if let Some(var_2332) = &input.filters {
        let mut list_2334 = scope_2331.start_list(true, Some("Filter"));
        for item_2333 in var_2332 {
            #[allow(unused_mut)]
            let mut entry_2335 = list_2334.entry();
            crate::query_ser::serialize_structure_filter(entry_2335, item_2333);
        }
        list_2334.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2336 = writer.prefix("InstanceId");
    if let Some(var_2337) = &input.instance_ids {
        let mut list_2339 = scope_2336.start_list(true, Some("InstanceId"));
        for item_2338 in var_2337 {
            #[allow(unused_mut)]
            let mut entry_2340 = list_2339.entry();
            entry_2340.string(item_2338);
        }
        list_2339.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2341 = writer.prefix("MaxResults");
    if let Some(var_2342) = &input.max_results {
        scope_2341.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2342).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2343 = writer.prefix("NextToken");
    if let Some(var_2344) = &input.next_token {
        scope_2343.string(var_2344);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2345 = writer.prefix("DryRun");
    if let Some(var_2346) = &input.dry_run {
        scope_2345.boolean(*var_2346);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_instance_event_windows(
    input: &crate::input::DescribeInstanceEventWindowsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2347 = writer.prefix("DryRun");
    if let Some(var_2348) = &input.dry_run {
        scope_2347.boolean(*var_2348);
    }
    #[allow(unused_mut)]
    let mut scope_2349 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2350) = &input.instance_event_window_ids {
        let mut list_2352 = scope_2349.start_list(true, Some("InstanceEventWindowId"));
        for item_2351 in var_2350 {
            #[allow(unused_mut)]
            let mut entry_2353 = list_2352.entry();
            entry_2353.string(item_2351);
        }
        list_2352.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2354 = writer.prefix("Filter");
    if let Some(var_2355) = &input.filters {
        let mut list_2357 = scope_2354.start_list(true, Some("Filter"));
        for item_2356 in var_2355 {
            #[allow(unused_mut)]
            let mut entry_2358 = list_2357.entry();
            crate::query_ser::serialize_structure_filter(entry_2358, item_2356);
        }
        list_2357.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2359 = writer.prefix("MaxResults");
    if let Some(var_2360) = &input.max_results {
        scope_2359.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2360).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2361 = writer.prefix("NextToken");
    if let Some(var_2362) = &input.next_token {
        scope_2361.string(var_2362);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2363 = writer.prefix("Filter");
    if let Some(var_2364) = &input.filters {
        let mut list_2366 = scope_2363.start_list(true, Some("Filter"));
        for item_2365 in var_2364 {
            #[allow(unused_mut)]
            let mut entry_2367 = list_2366.entry();
            crate::query_ser::serialize_structure_filter(entry_2367, item_2365);
        }
        list_2366.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2368 = writer.prefix("InstanceId");
    if let Some(var_2369) = &input.instance_ids {
        let mut list_2371 = scope_2368.start_list(true, Some("InstanceId"));
        for item_2370 in var_2369 {
            #[allow(unused_mut)]
            let mut entry_2372 = list_2371.entry();
            entry_2372.string(item_2370);
        }
        list_2371.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2373 = writer.prefix("DryRun");
    if let Some(var_2374) = &input.dry_run {
        scope_2373.boolean(*var_2374);
    }
    #[allow(unused_mut)]
    let mut scope_2375 = writer.prefix("MaxResults");
    if let Some(var_2376) = &input.max_results {
        scope_2375.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2376).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2377 = writer.prefix("NextToken");
    if let Some(var_2378) = &input.next_token {
        scope_2377.string(var_2378);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2379 = writer.prefix("Filter");
    if let Some(var_2380) = &input.filters {
        let mut list_2382 = scope_2379.start_list(true, Some("Filter"));
        for item_2381 in var_2380 {
            #[allow(unused_mut)]
            let mut entry_2383 = list_2382.entry();
            crate::query_ser::serialize_structure_filter(entry_2383, item_2381);
        }
        list_2382.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2384 = writer.prefix("InstanceId");
    if let Some(var_2385) = &input.instance_ids {
        let mut list_2387 = scope_2384.start_list(true, Some("InstanceId"));
        for item_2386 in var_2385 {
            #[allow(unused_mut)]
            let mut entry_2388 = list_2387.entry();
            entry_2388.string(item_2386);
        }
        list_2387.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2389 = writer.prefix("MaxResults");
    if let Some(var_2390) = &input.max_results {
        scope_2389.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2390).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2391 = writer.prefix("NextToken");
    if let Some(var_2392) = &input.next_token {
        scope_2391.string(var_2392);
    }
    #[allow(unused_mut)]
    let mut scope_2393 = writer.prefix("DryRun");
    if let Some(var_2394) = &input.dry_run {
        scope_2393.boolean(*var_2394);
    }
    #[allow(unused_mut)]
    let mut scope_2395 = writer.prefix("IncludeAllInstances");
    if let Some(var_2396) = &input.include_all_instances {
        scope_2395.boolean(*var_2396);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2397 = writer.prefix("DryRun");
    if let Some(var_2398) = &input.dry_run {
        scope_2397.boolean(*var_2398);
    }
    #[allow(unused_mut)]
    let mut scope_2399 = writer.prefix("LocationType");
    if let Some(var_2400) = &input.location_type {
        scope_2399.string(var_2400.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2401 = writer.prefix("Filter");
    if let Some(var_2402) = &input.filters {
        let mut list_2404 = scope_2401.start_list(true, Some("Filter"));
        for item_2403 in var_2402 {
            #[allow(unused_mut)]
            let mut entry_2405 = list_2404.entry();
            crate::query_ser::serialize_structure_filter(entry_2405, item_2403);
        }
        list_2404.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2406 = writer.prefix("MaxResults");
    if let Some(var_2407) = &input.max_results {
        scope_2406.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2407).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2408 = writer.prefix("NextToken");
    if let Some(var_2409) = &input.next_token {
        scope_2408.string(var_2409);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2410 = writer.prefix("DryRun");
    if let Some(var_2411) = &input.dry_run {
        scope_2410.boolean(*var_2411);
    }
    #[allow(unused_mut)]
    let mut scope_2412 = writer.prefix("InstanceType");
    if let Some(var_2413) = &input.instance_types {
        let mut list_2415 = scope_2412.start_list(true, None);
        for item_2414 in var_2413 {
            #[allow(unused_mut)]
            let mut entry_2416 = list_2415.entry();
            entry_2416.string(item_2414.as_str());
        }
        list_2415.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2417 = writer.prefix("Filter");
    if let Some(var_2418) = &input.filters {
        let mut list_2420 = scope_2417.start_list(true, Some("Filter"));
        for item_2419 in var_2418 {
            #[allow(unused_mut)]
            let mut entry_2421 = list_2420.entry();
            crate::query_ser::serialize_structure_filter(entry_2421, item_2419);
        }
        list_2420.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2422 = writer.prefix("MaxResults");
    if let Some(var_2423) = &input.max_results {
        scope_2422.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2423).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2424 = writer.prefix("NextToken");
    if let Some(var_2425) = &input.next_token {
        scope_2424.string(var_2425);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2426 = writer.prefix("Filter");
    if let Some(var_2427) = &input.filters {
        let mut list_2429 = scope_2426.start_list(true, Some("Filter"));
        for item_2428 in var_2427 {
            #[allow(unused_mut)]
            let mut entry_2430 = list_2429.entry();
            crate::query_ser::serialize_structure_filter(entry_2430, item_2428);
        }
        list_2429.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2431 = writer.prefix("DryRun");
    if let Some(var_2432) = &input.dry_run {
        scope_2431.boolean(*var_2432);
    }
    #[allow(unused_mut)]
    let mut scope_2433 = writer.prefix("InternetGatewayId");
    if let Some(var_2434) = &input.internet_gateway_ids {
        let mut list_2436 = scope_2433.start_list(true, Some("item"));
        for item_2435 in var_2434 {
            #[allow(unused_mut)]
            let mut entry_2437 = list_2436.entry();
            entry_2437.string(item_2435);
        }
        list_2436.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2438 = writer.prefix("NextToken");
    if let Some(var_2439) = &input.next_token {
        scope_2438.string(var_2439);
    }
    #[allow(unused_mut)]
    let mut scope_2440 = writer.prefix("MaxResults");
    if let Some(var_2441) = &input.max_results {
        scope_2440.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2441).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2442 = writer.prefix("PoolId");
    if let Some(var_2443) = &input.pool_ids {
        let mut list_2445 = scope_2442.start_list(true, Some("item"));
        for item_2444 in var_2443 {
            #[allow(unused_mut)]
            let mut entry_2446 = list_2445.entry();
            entry_2446.string(item_2444);
        }
        list_2445.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2447 = writer.prefix("NextToken");
    if let Some(var_2448) = &input.next_token {
        scope_2447.string(var_2448);
    }
    #[allow(unused_mut)]
    let mut scope_2449 = writer.prefix("MaxResults");
    if let Some(var_2450) = &input.max_results {
        scope_2449.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2450).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2451 = writer.prefix("DryRun");
    if let Some(var_2452) = &input.dry_run {
        scope_2451.boolean(*var_2452);
    }
    #[allow(unused_mut)]
    let mut scope_2453 = writer.prefix("Filter");
    if let Some(var_2454) = &input.filters {
        let mut list_2456 = scope_2453.start_list(true, Some("Filter"));
        for item_2455 in var_2454 {
            #[allow(unused_mut)]
            let mut entry_2457 = list_2456.entry();
            crate::query_ser::serialize_structure_filter(entry_2457, item_2455);
        }
        list_2456.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2458 = writer.prefix("Filter");
    if let Some(var_2459) = &input.filters {
        let mut list_2461 = scope_2458.start_list(true, Some("Filter"));
        for item_2460 in var_2459 {
            #[allow(unused_mut)]
            let mut entry_2462 = list_2461.entry();
            crate::query_ser::serialize_structure_filter(entry_2462, item_2460);
        }
        list_2461.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2463 = writer.prefix("KeyName");
    if let Some(var_2464) = &input.key_names {
        let mut list_2466 = scope_2463.start_list(true, Some("KeyName"));
        for item_2465 in var_2464 {
            #[allow(unused_mut)]
            let mut entry_2467 = list_2466.entry();
            entry_2467.string(item_2465);
        }
        list_2466.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2468 = writer.prefix("KeyPairId");
    if let Some(var_2469) = &input.key_pair_ids {
        let mut list_2471 = scope_2468.start_list(true, Some("KeyPairId"));
        for item_2470 in var_2469 {
            #[allow(unused_mut)]
            let mut entry_2472 = list_2471.entry();
            entry_2472.string(item_2470);
        }
        list_2471.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2473 = writer.prefix("DryRun");
    if let Some(var_2474) = &input.dry_run {
        scope_2473.boolean(*var_2474);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2475 = writer.prefix("DryRun");
    if let Some(var_2476) = &input.dry_run {
        scope_2475.boolean(*var_2476);
    }
    #[allow(unused_mut)]
    let mut scope_2477 = writer.prefix("LaunchTemplateId");
    if let Some(var_2478) = &input.launch_template_ids {
        let mut list_2480 = scope_2477.start_list(true, Some("item"));
        for item_2479 in var_2478 {
            #[allow(unused_mut)]
            let mut entry_2481 = list_2480.entry();
            entry_2481.string(item_2479);
        }
        list_2480.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2482 = writer.prefix("LaunchTemplateName");
    if let Some(var_2483) = &input.launch_template_names {
        let mut list_2485 = scope_2482.start_list(true, Some("item"));
        for item_2484 in var_2483 {
            #[allow(unused_mut)]
            let mut entry_2486 = list_2485.entry();
            entry_2486.string(item_2484);
        }
        list_2485.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2487 = writer.prefix("Filter");
    if let Some(var_2488) = &input.filters {
        let mut list_2490 = scope_2487.start_list(true, Some("Filter"));
        for item_2489 in var_2488 {
            #[allow(unused_mut)]
            let mut entry_2491 = list_2490.entry();
            crate::query_ser::serialize_structure_filter(entry_2491, item_2489);
        }
        list_2490.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2492 = writer.prefix("NextToken");
    if let Some(var_2493) = &input.next_token {
        scope_2492.string(var_2493);
    }
    #[allow(unused_mut)]
    let mut scope_2494 = writer.prefix("MaxResults");
    if let Some(var_2495) = &input.max_results {
        scope_2494.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2495).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2496 = writer.prefix("DryRun");
    if let Some(var_2497) = &input.dry_run {
        scope_2496.boolean(*var_2497);
    }
    #[allow(unused_mut)]
    let mut scope_2498 = writer.prefix("LaunchTemplateId");
    if let Some(var_2499) = &input.launch_template_id {
        scope_2498.string(var_2499);
    }
    #[allow(unused_mut)]
    let mut scope_2500 = writer.prefix("LaunchTemplateName");
    if let Some(var_2501) = &input.launch_template_name {
        scope_2500.string(var_2501);
    }
    #[allow(unused_mut)]
    let mut scope_2502 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2503) = &input.versions {
        let mut list_2505 = scope_2502.start_list(true, Some("item"));
        for item_2504 in var_2503 {
            #[allow(unused_mut)]
            let mut entry_2506 = list_2505.entry();
            entry_2506.string(item_2504);
        }
        list_2505.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2507 = writer.prefix("MinVersion");
    if let Some(var_2508) = &input.min_version {
        scope_2507.string(var_2508);
    }
    #[allow(unused_mut)]
    let mut scope_2509 = writer.prefix("MaxVersion");
    if let Some(var_2510) = &input.max_version {
        scope_2509.string(var_2510);
    }
    #[allow(unused_mut)]
    let mut scope_2511 = writer.prefix("NextToken");
    if let Some(var_2512) = &input.next_token {
        scope_2511.string(var_2512);
    }
    #[allow(unused_mut)]
    let mut scope_2513 = writer.prefix("MaxResults");
    if let Some(var_2514) = &input.max_results {
        scope_2513.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2514).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2515 = writer.prefix("Filter");
    if let Some(var_2516) = &input.filters {
        let mut list_2518 = scope_2515.start_list(true, Some("Filter"));
        for item_2517 in var_2516 {
            #[allow(unused_mut)]
            let mut entry_2519 = list_2518.entry();
            crate::query_ser::serialize_structure_filter(entry_2519, item_2517);
        }
        list_2518.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLocalGatewayRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2520 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2521) = &input.local_gateway_route_table_ids {
        let mut list_2523 = scope_2520.start_list(true, Some("item"));
        for item_2522 in var_2521 {
            #[allow(unused_mut)]
            let mut entry_2524 = list_2523.entry();
            entry_2524.string(item_2522);
        }
        list_2523.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2525 = writer.prefix("Filter");
    if let Some(var_2526) = &input.filters {
        let mut list_2528 = scope_2525.start_list(true, Some("Filter"));
        for item_2527 in var_2526 {
            #[allow(unused_mut)]
            let mut entry_2529 = list_2528.entry();
            crate::query_ser::serialize_structure_filter(entry_2529, item_2527);
        }
        list_2528.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2530 = writer.prefix("MaxResults");
    if let Some(var_2531) = &input.max_results {
        scope_2530.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2531).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2532 = writer.prefix("NextToken");
    if let Some(var_2533) = &input.next_token {
        scope_2532.string(var_2533);
    }
    #[allow(unused_mut)]
    let mut scope_2534 = writer.prefix("DryRun");
    if let Some(var_2535) = &input.dry_run {
        scope_2534.boolean(*var_2535);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2536 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2537) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2539 = scope_2536.start_list(true, Some("item"));
        for item_2538 in var_2537 {
            #[allow(unused_mut)]
            let mut entry_2540 = list_2539.entry();
            entry_2540.string(item_2538);
        }
        list_2539.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2541 = writer.prefix("Filter");
    if let Some(var_2542) = &input.filters {
        let mut list_2544 = scope_2541.start_list(true, Some("Filter"));
        for item_2543 in var_2542 {
            #[allow(unused_mut)]
            let mut entry_2545 = list_2544.entry();
            crate::query_ser::serialize_structure_filter(entry_2545, item_2543);
        }
        list_2544.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2546 = writer.prefix("MaxResults");
    if let Some(var_2547) = &input.max_results {
        scope_2546.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2547).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2548 = writer.prefix("NextToken");
    if let Some(var_2549) = &input.next_token {
        scope_2548.string(var_2549);
    }
    #[allow(unused_mut)]
    let mut scope_2550 = writer.prefix("DryRun");
    if let Some(var_2551) = &input.dry_run {
        scope_2550.boolean(*var_2551);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2552 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2553) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2555 = scope_2552.start_list(true, Some("item"));
        for item_2554 in var_2553 {
            #[allow(unused_mut)]
            let mut entry_2556 = list_2555.entry();
            entry_2556.string(item_2554);
        }
        list_2555.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2557 = writer.prefix("Filter");
    if let Some(var_2558) = &input.filters {
        let mut list_2560 = scope_2557.start_list(true, Some("Filter"));
        for item_2559 in var_2558 {
            #[allow(unused_mut)]
            let mut entry_2561 = list_2560.entry();
            crate::query_ser::serialize_structure_filter(entry_2561, item_2559);
        }
        list_2560.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2562 = writer.prefix("MaxResults");
    if let Some(var_2563) = &input.max_results {
        scope_2562.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2563).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2564 = writer.prefix("NextToken");
    if let Some(var_2565) = &input.next_token {
        scope_2564.string(var_2565);
    }
    #[allow(unused_mut)]
    let mut scope_2566 = writer.prefix("DryRun");
    if let Some(var_2567) = &input.dry_run {
        scope_2566.boolean(*var_2567);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2568 = writer.prefix("LocalGatewayId");
    if let Some(var_2569) = &input.local_gateway_ids {
        let mut list_2571 = scope_2568.start_list(true, Some("item"));
        for item_2570 in var_2569 {
            #[allow(unused_mut)]
            let mut entry_2572 = list_2571.entry();
            entry_2572.string(item_2570);
        }
        list_2571.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2573 = writer.prefix("Filter");
    if let Some(var_2574) = &input.filters {
        let mut list_2576 = scope_2573.start_list(true, Some("Filter"));
        for item_2575 in var_2574 {
            #[allow(unused_mut)]
            let mut entry_2577 = list_2576.entry();
            crate::query_ser::serialize_structure_filter(entry_2577, item_2575);
        }
        list_2576.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2578 = writer.prefix("MaxResults");
    if let Some(var_2579) = &input.max_results {
        scope_2578.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2579).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2580 = writer.prefix("NextToken");
    if let Some(var_2581) = &input.next_token {
        scope_2580.string(var_2581);
    }
    #[allow(unused_mut)]
    let mut scope_2582 = writer.prefix("DryRun");
    if let Some(var_2583) = &input.dry_run {
        scope_2582.boolean(*var_2583);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2584 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2585) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2587 = scope_2584.start_list(true, Some("item"));
        for item_2586 in var_2585 {
            #[allow(unused_mut)]
            let mut entry_2588 = list_2587.entry();
            entry_2588.string(item_2586);
        }
        list_2587.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2589 = writer.prefix("Filter");
    if let Some(var_2590) = &input.filters {
        let mut list_2592 = scope_2589.start_list(true, Some("Filter"));
        for item_2591 in var_2590 {
            #[allow(unused_mut)]
            let mut entry_2593 = list_2592.entry();
            crate::query_ser::serialize_structure_filter(entry_2593, item_2591);
        }
        list_2592.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2594 = writer.prefix("MaxResults");
    if let Some(var_2595) = &input.max_results {
        scope_2594.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2595).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2596 = writer.prefix("NextToken");
    if let Some(var_2597) = &input.next_token {
        scope_2596.string(var_2597);
    }
    #[allow(unused_mut)]
    let mut scope_2598 = writer.prefix("DryRun");
    if let Some(var_2599) = &input.dry_run {
        scope_2598.boolean(*var_2599);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2600 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_2601) = &input.local_gateway_virtual_interface_ids {
        let mut list_2603 = scope_2600.start_list(true, Some("item"));
        for item_2602 in var_2601 {
            #[allow(unused_mut)]
            let mut entry_2604 = list_2603.entry();
            entry_2604.string(item_2602);
        }
        list_2603.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2605 = writer.prefix("Filter");
    if let Some(var_2606) = &input.filters {
        let mut list_2608 = scope_2605.start_list(true, Some("Filter"));
        for item_2607 in var_2606 {
            #[allow(unused_mut)]
            let mut entry_2609 = list_2608.entry();
            crate::query_ser::serialize_structure_filter(entry_2609, item_2607);
        }
        list_2608.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2610 = writer.prefix("MaxResults");
    if let Some(var_2611) = &input.max_results {
        scope_2610.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2611).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2612 = writer.prefix("NextToken");
    if let Some(var_2613) = &input.next_token {
        scope_2612.string(var_2613);
    }
    #[allow(unused_mut)]
    let mut scope_2614 = writer.prefix("DryRun");
    if let Some(var_2615) = &input.dry_run {
        scope_2614.boolean(*var_2615);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2616 = writer.prefix("DryRun");
    if let Some(var_2617) = &input.dry_run {
        scope_2616.boolean(*var_2617);
    }
    #[allow(unused_mut)]
    let mut scope_2618 = writer.prefix("Filter");
    if let Some(var_2619) = &input.filters {
        let mut list_2621 = scope_2618.start_list(true, Some("Filter"));
        for item_2620 in var_2619 {
            #[allow(unused_mut)]
            let mut entry_2622 = list_2621.entry();
            crate::query_ser::serialize_structure_filter(entry_2622, item_2620);
        }
        list_2621.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2623 = writer.prefix("MaxResults");
    if let Some(var_2624) = &input.max_results {
        scope_2623.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2624).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2625 = writer.prefix("NextToken");
    if let Some(var_2626) = &input.next_token {
        scope_2625.string(var_2626);
    }
    #[allow(unused_mut)]
    let mut scope_2627 = writer.prefix("PrefixListId");
    if let Some(var_2628) = &input.prefix_list_ids {
        let mut list_2630 = scope_2627.start_list(true, Some("item"));
        for item_2629 in var_2628 {
            #[allow(unused_mut)]
            let mut entry_2631 = list_2630.entry();
            entry_2631.string(item_2629);
        }
        list_2630.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2632 = writer.prefix("Filter");
    if let Some(var_2633) = &input.filters {
        let mut list_2635 = scope_2632.start_list(true, Some("Filter"));
        for item_2634 in var_2633 {
            #[allow(unused_mut)]
            let mut entry_2636 = list_2635.entry();
            crate::query_ser::serialize_structure_filter(entry_2636, item_2634);
        }
        list_2635.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2637 = writer.prefix("DryRun");
    if let Some(var_2638) = &input.dry_run {
        scope_2637.boolean(*var_2638);
    }
    #[allow(unused_mut)]
    let mut scope_2639 = writer.prefix("MaxResults");
    if let Some(var_2640) = &input.max_results {
        scope_2639.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2640).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2641 = writer.prefix("NextToken");
    if let Some(var_2642) = &input.next_token {
        scope_2641.string(var_2642);
    }
    #[allow(unused_mut)]
    let mut scope_2643 = writer.prefix("PublicIp");
    if let Some(var_2644) = &input.public_ips {
        let mut list_2646 = scope_2643.start_list(true, Some("item"));
        for item_2645 in var_2644 {
            #[allow(unused_mut)]
            let mut entry_2647 = list_2646.entry();
            entry_2647.string(item_2645);
        }
        list_2646.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2648 = writer.prefix("DryRun");
    if let Some(var_2649) = &input.dry_run {
        scope_2648.boolean(*var_2649);
    }
    #[allow(unused_mut)]
    let mut scope_2650 = writer.prefix("Filter");
    if let Some(var_2651) = &input.filter {
        let mut list_2653 = scope_2650.start_list(true, Some("Filter"));
        for item_2652 in var_2651 {
            #[allow(unused_mut)]
            let mut entry_2654 = list_2653.entry();
            crate::query_ser::serialize_structure_filter(entry_2654, item_2652);
        }
        list_2653.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2655 = writer.prefix("MaxResults");
    if let Some(var_2656) = &input.max_results {
        scope_2655.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2656).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2657 = writer.prefix("NatGatewayId");
    if let Some(var_2658) = &input.nat_gateway_ids {
        let mut list_2660 = scope_2657.start_list(true, Some("item"));
        for item_2659 in var_2658 {
            #[allow(unused_mut)]
            let mut entry_2661 = list_2660.entry();
            entry_2661.string(item_2659);
        }
        list_2660.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2662 = writer.prefix("NextToken");
    if let Some(var_2663) = &input.next_token {
        scope_2662.string(var_2663);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2664 = writer.prefix("Filter");
    if let Some(var_2665) = &input.filters {
        let mut list_2667 = scope_2664.start_list(true, Some("Filter"));
        for item_2666 in var_2665 {
            #[allow(unused_mut)]
            let mut entry_2668 = list_2667.entry();
            crate::query_ser::serialize_structure_filter(entry_2668, item_2666);
        }
        list_2667.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2669 = writer.prefix("DryRun");
    if let Some(var_2670) = &input.dry_run {
        scope_2669.boolean(*var_2670);
    }
    #[allow(unused_mut)]
    let mut scope_2671 = writer.prefix("NetworkAclId");
    if let Some(var_2672) = &input.network_acl_ids {
        let mut list_2674 = scope_2671.start_list(true, Some("item"));
        for item_2673 in var_2672 {
            #[allow(unused_mut)]
            let mut entry_2675 = list_2674.entry();
            entry_2675.string(item_2673);
        }
        list_2674.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2676 = writer.prefix("NextToken");
    if let Some(var_2677) = &input.next_token {
        scope_2676.string(var_2677);
    }
    #[allow(unused_mut)]
    let mut scope_2678 = writer.prefix("MaxResults");
    if let Some(var_2679) = &input.max_results {
        scope_2678.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2679).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsAnalyses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2680 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_2681) = &input.network_insights_analysis_ids {
        let mut list_2683 = scope_2680.start_list(true, Some("item"));
        for item_2682 in var_2681 {
            #[allow(unused_mut)]
            let mut entry_2684 = list_2683.entry();
            entry_2684.string(item_2682);
        }
        list_2683.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2685 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2686) = &input.network_insights_path_id {
        scope_2685.string(var_2686);
    }
    #[allow(unused_mut)]
    let mut scope_2687 = writer.prefix("AnalysisStartTime");
    if let Some(var_2688) = &input.analysis_start_time {
        scope_2687.instant(var_2688, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_2689 = writer.prefix("AnalysisEndTime");
    if let Some(var_2690) = &input.analysis_end_time {
        scope_2689.instant(var_2690, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_2691 = writer.prefix("Filter");
    if let Some(var_2692) = &input.filters {
        let mut list_2694 = scope_2691.start_list(true, Some("Filter"));
        for item_2693 in var_2692 {
            #[allow(unused_mut)]
            let mut entry_2695 = list_2694.entry();
            crate::query_ser::serialize_structure_filter(entry_2695, item_2693);
        }
        list_2694.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2696 = writer.prefix("MaxResults");
    if let Some(var_2697) = &input.max_results {
        scope_2696.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2697).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2698 = writer.prefix("DryRun");
    if let Some(var_2699) = &input.dry_run {
        scope_2698.boolean(*var_2699);
    }
    #[allow(unused_mut)]
    let mut scope_2700 = writer.prefix("NextToken");
    if let Some(var_2701) = &input.next_token {
        scope_2700.string(var_2701);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2702 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2703) = &input.network_insights_path_ids {
        let mut list_2705 = scope_2702.start_list(true, Some("item"));
        for item_2704 in var_2703 {
            #[allow(unused_mut)]
            let mut entry_2706 = list_2705.entry();
            entry_2706.string(item_2704);
        }
        list_2705.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2707 = writer.prefix("Filter");
    if let Some(var_2708) = &input.filters {
        let mut list_2710 = scope_2707.start_list(true, Some("Filter"));
        for item_2709 in var_2708 {
            #[allow(unused_mut)]
            let mut entry_2711 = list_2710.entry();
            crate::query_ser::serialize_structure_filter(entry_2711, item_2709);
        }
        list_2710.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2712 = writer.prefix("MaxResults");
    if let Some(var_2713) = &input.max_results {
        scope_2712.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2713).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2714 = writer.prefix("DryRun");
    if let Some(var_2715) = &input.dry_run {
        scope_2714.boolean(*var_2715);
    }
    #[allow(unused_mut)]
    let mut scope_2716 = writer.prefix("NextToken");
    if let Some(var_2717) = &input.next_token {
        scope_2716.string(var_2717);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2718 = writer.prefix("Attribute");
    if let Some(var_2719) = &input.attribute {
        scope_2718.string(var_2719.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2720 = writer.prefix("DryRun");
    if let Some(var_2721) = &input.dry_run {
        scope_2720.boolean(*var_2721);
    }
    #[allow(unused_mut)]
    let mut scope_2722 = writer.prefix("NetworkInterfaceId");
    if let Some(var_2723) = &input.network_interface_id {
        scope_2722.string(var_2723);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2724 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_2725) = &input.network_interface_permission_ids {
        let mut list_2727 = scope_2724.start_list(true, None);
        for item_2726 in var_2725 {
            #[allow(unused_mut)]
            let mut entry_2728 = list_2727.entry();
            entry_2728.string(item_2726);
        }
        list_2727.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2729 = writer.prefix("Filter");
    if let Some(var_2730) = &input.filters {
        let mut list_2732 = scope_2729.start_list(true, Some("Filter"));
        for item_2731 in var_2730 {
            #[allow(unused_mut)]
            let mut entry_2733 = list_2732.entry();
            crate::query_ser::serialize_structure_filter(entry_2733, item_2731);
        }
        list_2732.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2734 = writer.prefix("NextToken");
    if let Some(var_2735) = &input.next_token {
        scope_2734.string(var_2735);
    }
    #[allow(unused_mut)]
    let mut scope_2736 = writer.prefix("MaxResults");
    if let Some(var_2737) = &input.max_results {
        scope_2736.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2737).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2738 = writer.prefix("Filter");
    if let Some(var_2739) = &input.filters {
        let mut list_2741 = scope_2738.start_list(true, Some("Filter"));
        for item_2740 in var_2739 {
            #[allow(unused_mut)]
            let mut entry_2742 = list_2741.entry();
            crate::query_ser::serialize_structure_filter(entry_2742, item_2740);
        }
        list_2741.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2743 = writer.prefix("DryRun");
    if let Some(var_2744) = &input.dry_run {
        scope_2743.boolean(*var_2744);
    }
    #[allow(unused_mut)]
    let mut scope_2745 = writer.prefix("NetworkInterfaceId");
    if let Some(var_2746) = &input.network_interface_ids {
        let mut list_2748 = scope_2745.start_list(true, Some("item"));
        for item_2747 in var_2746 {
            #[allow(unused_mut)]
            let mut entry_2749 = list_2748.entry();
            entry_2749.string(item_2747);
        }
        list_2748.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2750 = writer.prefix("NextToken");
    if let Some(var_2751) = &input.next_token {
        scope_2750.string(var_2751);
    }
    #[allow(unused_mut)]
    let mut scope_2752 = writer.prefix("MaxResults");
    if let Some(var_2753) = &input.max_results {
        scope_2752.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2753).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2754 = writer.prefix("Filter");
    if let Some(var_2755) = &input.filters {
        let mut list_2757 = scope_2754.start_list(true, Some("Filter"));
        for item_2756 in var_2755 {
            #[allow(unused_mut)]
            let mut entry_2758 = list_2757.entry();
            crate::query_ser::serialize_structure_filter(entry_2758, item_2756);
        }
        list_2757.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2759 = writer.prefix("DryRun");
    if let Some(var_2760) = &input.dry_run {
        scope_2759.boolean(*var_2760);
    }
    #[allow(unused_mut)]
    let mut scope_2761 = writer.prefix("GroupName");
    if let Some(var_2762) = &input.group_names {
        let mut list_2764 = scope_2761.start_list(true, None);
        for item_2763 in var_2762 {
            #[allow(unused_mut)]
            let mut entry_2765 = list_2764.entry();
            entry_2765.string(item_2763);
        }
        list_2764.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2766 = writer.prefix("GroupId");
    if let Some(var_2767) = &input.group_ids {
        let mut list_2769 = scope_2766.start_list(true, Some("GroupId"));
        for item_2768 in var_2767 {
            #[allow(unused_mut)]
            let mut entry_2770 = list_2769.entry();
            entry_2770.string(item_2768);
        }
        list_2769.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2771 = writer.prefix("DryRun");
    if let Some(var_2772) = &input.dry_run {
        scope_2771.boolean(*var_2772);
    }
    #[allow(unused_mut)]
    let mut scope_2773 = writer.prefix("Filter");
    if let Some(var_2774) = &input.filters {
        let mut list_2776 = scope_2773.start_list(true, Some("Filter"));
        for item_2775 in var_2774 {
            #[allow(unused_mut)]
            let mut entry_2777 = list_2776.entry();
            crate::query_ser::serialize_structure_filter(entry_2777, item_2775);
        }
        list_2776.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2778 = writer.prefix("MaxResults");
    if let Some(var_2779) = &input.max_results {
        scope_2778.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2779).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2780 = writer.prefix("NextToken");
    if let Some(var_2781) = &input.next_token {
        scope_2780.string(var_2781);
    }
    #[allow(unused_mut)]
    let mut scope_2782 = writer.prefix("PrefixListId");
    if let Some(var_2783) = &input.prefix_list_ids {
        let mut list_2785 = scope_2782.start_list(true, Some("item"));
        for item_2784 in var_2783 {
            #[allow(unused_mut)]
            let mut entry_2786 = list_2785.entry();
            entry_2786.string(item_2784);
        }
        list_2785.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2787 = writer.prefix("DryRun");
    if let Some(var_2788) = &input.dry_run {
        scope_2787.boolean(*var_2788);
    }
    #[allow(unused_mut)]
    let mut scope_2789 = writer.prefix("Resource");
    if let Some(var_2790) = &input.resources {
        let mut list_2792 = scope_2789.start_list(true, Some("item"));
        for item_2791 in var_2790 {
            #[allow(unused_mut)]
            let mut entry_2793 = list_2792.entry();
            entry_2793.string(item_2791);
        }
        list_2792.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2794 = writer.prefix("MaxResults");
    if let Some(var_2795) = &input.max_results {
        scope_2794.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2795).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2796 = writer.prefix("NextToken");
    if let Some(var_2797) = &input.next_token {
        scope_2796.string(var_2797);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2798 = writer.prefix("PoolId");
    if let Some(var_2799) = &input.pool_ids {
        let mut list_2801 = scope_2798.start_list(true, Some("item"));
        for item_2800 in var_2799 {
            #[allow(unused_mut)]
            let mut entry_2802 = list_2801.entry();
            entry_2802.string(item_2800);
        }
        list_2801.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2803 = writer.prefix("NextToken");
    if let Some(var_2804) = &input.next_token {
        scope_2803.string(var_2804);
    }
    #[allow(unused_mut)]
    let mut scope_2805 = writer.prefix("MaxResults");
    if let Some(var_2806) = &input.max_results {
        scope_2805.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2806).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2807 = writer.prefix("Filter");
    if let Some(var_2808) = &input.filters {
        let mut list_2810 = scope_2807.start_list(true, Some("Filter"));
        for item_2809 in var_2808 {
            #[allow(unused_mut)]
            let mut entry_2811 = list_2810.entry();
            crate::query_ser::serialize_structure_filter(entry_2811, item_2809);
        }
        list_2810.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2812 = writer.prefix("Filter");
    if let Some(var_2813) = &input.filters {
        let mut list_2815 = scope_2812.start_list(true, Some("Filter"));
        for item_2814 in var_2813 {
            #[allow(unused_mut)]
            let mut entry_2816 = list_2815.entry();
            crate::query_ser::serialize_structure_filter(entry_2816, item_2814);
        }
        list_2815.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2817 = writer.prefix("RegionName");
    if let Some(var_2818) = &input.region_names {
        let mut list_2820 = scope_2817.start_list(true, Some("RegionName"));
        for item_2819 in var_2818 {
            #[allow(unused_mut)]
            let mut entry_2821 = list_2820.entry();
            entry_2821.string(item_2819);
        }
        list_2820.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2822 = writer.prefix("DryRun");
    if let Some(var_2823) = &input.dry_run {
        scope_2822.boolean(*var_2823);
    }
    #[allow(unused_mut)]
    let mut scope_2824 = writer.prefix("AllRegions");
    if let Some(var_2825) = &input.all_regions {
        scope_2824.boolean(*var_2825);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeReplaceRootVolumeTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2826 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_2827) = &input.replace_root_volume_task_ids {
        let mut list_2829 = scope_2826.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_2828 in var_2827 {
            #[allow(unused_mut)]
            let mut entry_2830 = list_2829.entry();
            entry_2830.string(item_2828);
        }
        list_2829.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2831 = writer.prefix("Filter");
    if let Some(var_2832) = &input.filters {
        let mut list_2834 = scope_2831.start_list(true, Some("Filter"));
        for item_2833 in var_2832 {
            #[allow(unused_mut)]
            let mut entry_2835 = list_2834.entry();
            crate::query_ser::serialize_structure_filter(entry_2835, item_2833);
        }
        list_2834.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2836 = writer.prefix("MaxResults");
    if let Some(var_2837) = &input.max_results {
        scope_2836.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2837).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2838 = writer.prefix("NextToken");
    if let Some(var_2839) = &input.next_token {
        scope_2838.string(var_2839);
    }
    #[allow(unused_mut)]
    let mut scope_2840 = writer.prefix("DryRun");
    if let Some(var_2841) = &input.dry_run {
        scope_2840.boolean(*var_2841);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2842 = writer.prefix("Filter");
    if let Some(var_2843) = &input.filters {
        let mut list_2845 = scope_2842.start_list(true, Some("Filter"));
        for item_2844 in var_2843 {
            #[allow(unused_mut)]
            let mut entry_2846 = list_2845.entry();
            crate::query_ser::serialize_structure_filter(entry_2846, item_2844);
        }
        list_2845.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2847 = writer.prefix("OfferingClass");
    if let Some(var_2848) = &input.offering_class {
        scope_2847.string(var_2848.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2849 = writer.prefix("ReservedInstancesId");
    if let Some(var_2850) = &input.reserved_instances_ids {
        let mut list_2852 = scope_2849.start_list(true, Some("ReservedInstancesId"));
        for item_2851 in var_2850 {
            #[allow(unused_mut)]
            let mut entry_2853 = list_2852.entry();
            entry_2853.string(item_2851);
        }
        list_2852.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2854 = writer.prefix("DryRun");
    if let Some(var_2855) = &input.dry_run {
        scope_2854.boolean(*var_2855);
    }
    #[allow(unused_mut)]
    let mut scope_2856 = writer.prefix("OfferingType");
    if let Some(var_2857) = &input.offering_type {
        scope_2856.string(var_2857.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstancesListings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2858 = writer.prefix("Filter");
    if let Some(var_2859) = &input.filters {
        let mut list_2861 = scope_2858.start_list(true, Some("Filter"));
        for item_2860 in var_2859 {
            #[allow(unused_mut)]
            let mut entry_2862 = list_2861.entry();
            crate::query_ser::serialize_structure_filter(entry_2862, item_2860);
        }
        list_2861.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2863 = writer.prefix("ReservedInstancesId");
    if let Some(var_2864) = &input.reserved_instances_id {
        scope_2863.string(var_2864);
    }
    #[allow(unused_mut)]
    let mut scope_2865 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_2866) = &input.reserved_instances_listing_id {
        scope_2865.string(var_2866);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2867 = writer.prefix("Filter");
    if let Some(var_2868) = &input.filters {
        let mut list_2870 = scope_2867.start_list(true, Some("Filter"));
        for item_2869 in var_2868 {
            #[allow(unused_mut)]
            let mut entry_2871 = list_2870.entry();
            crate::query_ser::serialize_structure_filter(entry_2871, item_2869);
        }
        list_2870.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2872 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_2873) = &input.reserved_instances_modification_ids {
        let mut list_2875 = scope_2872.start_list(true, Some("ReservedInstancesModificationId"));
        for item_2874 in var_2873 {
            #[allow(unused_mut)]
            let mut entry_2876 = list_2875.entry();
            entry_2876.string(item_2874);
        }
        list_2875.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2877 = writer.prefix("NextToken");
    if let Some(var_2878) = &input.next_token {
        scope_2877.string(var_2878);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2879 = writer.prefix("AvailabilityZone");
    if let Some(var_2880) = &input.availability_zone {
        scope_2879.string(var_2880);
    }
    #[allow(unused_mut)]
    let mut scope_2881 = writer.prefix("Filter");
    if let Some(var_2882) = &input.filters {
        let mut list_2884 = scope_2881.start_list(true, Some("Filter"));
        for item_2883 in var_2882 {
            #[allow(unused_mut)]
            let mut entry_2885 = list_2884.entry();
            crate::query_ser::serialize_structure_filter(entry_2885, item_2883);
        }
        list_2884.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2886 = writer.prefix("IncludeMarketplace");
    if let Some(var_2887) = &input.include_marketplace {
        scope_2886.boolean(*var_2887);
    }
    #[allow(unused_mut)]
    let mut scope_2888 = writer.prefix("InstanceType");
    if let Some(var_2889) = &input.instance_type {
        scope_2888.string(var_2889.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2890 = writer.prefix("MaxDuration");
    if let Some(var_2891) = &input.max_duration {
        scope_2890.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2891).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2892 = writer.prefix("MaxInstanceCount");
    if let Some(var_2893) = &input.max_instance_count {
        scope_2892.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2893).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2894 = writer.prefix("MinDuration");
    if let Some(var_2895) = &input.min_duration {
        scope_2894.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2895).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2896 = writer.prefix("OfferingClass");
    if let Some(var_2897) = &input.offering_class {
        scope_2896.string(var_2897.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2898 = writer.prefix("ProductDescription");
    if let Some(var_2899) = &input.product_description {
        scope_2898.string(var_2899.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2900 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_2901) = &input.reserved_instances_offering_ids {
        let mut list_2903 = scope_2900.start_list(true, None);
        for item_2902 in var_2901 {
            #[allow(unused_mut)]
            let mut entry_2904 = list_2903.entry();
            entry_2904.string(item_2902);
        }
        list_2903.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2905 = writer.prefix("DryRun");
    if let Some(var_2906) = &input.dry_run {
        scope_2905.boolean(*var_2906);
    }
    #[allow(unused_mut)]
    let mut scope_2907 = writer.prefix("InstanceTenancy");
    if let Some(var_2908) = &input.instance_tenancy {
        scope_2907.string(var_2908.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2909 = writer.prefix("MaxResults");
    if let Some(var_2910) = &input.max_results {
        scope_2909.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2910).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2911 = writer.prefix("NextToken");
    if let Some(var_2912) = &input.next_token {
        scope_2911.string(var_2912);
    }
    #[allow(unused_mut)]
    let mut scope_2913 = writer.prefix("OfferingType");
    if let Some(var_2914) = &input.offering_type {
        scope_2913.string(var_2914.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2915 = writer.prefix("Filter");
    if let Some(var_2916) = &input.filters {
        let mut list_2918 = scope_2915.start_list(true, Some("Filter"));
        for item_2917 in var_2916 {
            #[allow(unused_mut)]
            let mut entry_2919 = list_2918.entry();
            crate::query_ser::serialize_structure_filter(entry_2919, item_2917);
        }
        list_2918.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2920 = writer.prefix("DryRun");
    if let Some(var_2921) = &input.dry_run {
        scope_2920.boolean(*var_2921);
    }
    #[allow(unused_mut)]
    let mut scope_2922 = writer.prefix("RouteTableId");
    if let Some(var_2923) = &input.route_table_ids {
        let mut list_2925 = scope_2922.start_list(true, Some("item"));
        for item_2924 in var_2923 {
            #[allow(unused_mut)]
            let mut entry_2926 = list_2925.entry();
            entry_2926.string(item_2924);
        }
        list_2925.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2927 = writer.prefix("NextToken");
    if let Some(var_2928) = &input.next_token {
        scope_2927.string(var_2928);
    }
    #[allow(unused_mut)]
    let mut scope_2929 = writer.prefix("MaxResults");
    if let Some(var_2930) = &input.max_results {
        scope_2929.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2930).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2931 = writer.prefix("DryRun");
    if let Some(var_2932) = &input.dry_run {
        scope_2931.boolean(*var_2932);
    }
    #[allow(unused_mut)]
    let mut scope_2933 = writer.prefix("Filter");
    if let Some(var_2934) = &input.filters {
        let mut list_2936 = scope_2933.start_list(true, Some("Filter"));
        for item_2935 in var_2934 {
            #[allow(unused_mut)]
            let mut entry_2937 = list_2936.entry();
            crate::query_ser::serialize_structure_filter(entry_2937, item_2935);
        }
        list_2936.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2938 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_2939) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_slot_date_time_range_request(scope_2938, var_2939);
    }
    #[allow(unused_mut)]
    let mut scope_2940 = writer.prefix("MaxResults");
    if let Some(var_2941) = &input.max_results {
        scope_2940.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2941).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2942 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_2943) = &input.max_slot_duration_in_hours {
        scope_2942.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2943).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2944 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_2945) = &input.min_slot_duration_in_hours {
        scope_2944.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2945).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2946 = writer.prefix("NextToken");
    if let Some(var_2947) = &input.next_token {
        scope_2946.string(var_2947);
    }
    #[allow(unused_mut)]
    let mut scope_2948 = writer.prefix("Recurrence");
    if let Some(var_2949) = &input.recurrence {
        crate::query_ser::serialize_structure_scheduled_instance_recurrence_request(
            scope_2948, var_2949,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2950 = writer.prefix("DryRun");
    if let Some(var_2951) = &input.dry_run {
        scope_2950.boolean(*var_2951);
    }
    #[allow(unused_mut)]
    let mut scope_2952 = writer.prefix("Filter");
    if let Some(var_2953) = &input.filters {
        let mut list_2955 = scope_2952.start_list(true, Some("Filter"));
        for item_2954 in var_2953 {
            #[allow(unused_mut)]
            let mut entry_2956 = list_2955.entry();
            crate::query_ser::serialize_structure_filter(entry_2956, item_2954);
        }
        list_2955.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2957 = writer.prefix("MaxResults");
    if let Some(var_2958) = &input.max_results {
        scope_2957.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2958).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2959 = writer.prefix("NextToken");
    if let Some(var_2960) = &input.next_token {
        scope_2959.string(var_2960);
    }
    #[allow(unused_mut)]
    let mut scope_2961 = writer.prefix("ScheduledInstanceId");
    if let Some(var_2962) = &input.scheduled_instance_ids {
        let mut list_2964 = scope_2961.start_list(true, Some("ScheduledInstanceId"));
        for item_2963 in var_2962 {
            #[allow(unused_mut)]
            let mut entry_2965 = list_2964.entry();
            entry_2965.string(item_2963);
        }
        list_2964.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2966 = writer.prefix("SlotStartTimeRange");
    if let Some(var_2967) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_slot_start_time_range_request(scope_2966, var_2967);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupReferences", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2968 = writer.prefix("DryRun");
    if let Some(var_2969) = &input.dry_run {
        scope_2968.boolean(*var_2969);
    }
    #[allow(unused_mut)]
    let mut scope_2970 = writer.prefix("GroupId");
    if let Some(var_2971) = &input.group_id {
        let mut list_2973 = scope_2970.start_list(true, Some("item"));
        for item_2972 in var_2971 {
            #[allow(unused_mut)]
            let mut entry_2974 = list_2973.entry();
            entry_2974.string(item_2972);
        }
        list_2973.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_security_group_rules(
    input: &crate::input::DescribeSecurityGroupRulesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2975 = writer.prefix("Filter");
    if let Some(var_2976) = &input.filters {
        let mut list_2978 = scope_2975.start_list(true, Some("Filter"));
        for item_2977 in var_2976 {
            #[allow(unused_mut)]
            let mut entry_2979 = list_2978.entry();
            crate::query_ser::serialize_structure_filter(entry_2979, item_2977);
        }
        list_2978.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2980 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_2981) = &input.security_group_rule_ids {
        let mut list_2983 = scope_2980.start_list(true, Some("item"));
        for item_2982 in var_2981 {
            #[allow(unused_mut)]
            let mut entry_2984 = list_2983.entry();
            entry_2984.string(item_2982);
        }
        list_2983.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2985 = writer.prefix("DryRun");
    if let Some(var_2986) = &input.dry_run {
        scope_2985.boolean(*var_2986);
    }
    #[allow(unused_mut)]
    let mut scope_2987 = writer.prefix("NextToken");
    if let Some(var_2988) = &input.next_token {
        scope_2987.string(var_2988);
    }
    #[allow(unused_mut)]
    let mut scope_2989 = writer.prefix("MaxResults");
    if let Some(var_2990) = &input.max_results {
        scope_2989.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2990).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2991 = writer.prefix("Filter");
    if let Some(var_2992) = &input.filters {
        let mut list_2994 = scope_2991.start_list(true, Some("Filter"));
        for item_2993 in var_2992 {
            #[allow(unused_mut)]
            let mut entry_2995 = list_2994.entry();
            crate::query_ser::serialize_structure_filter(entry_2995, item_2993);
        }
        list_2994.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2996 = writer.prefix("GroupId");
    if let Some(var_2997) = &input.group_ids {
        let mut list_2999 = scope_2996.start_list(true, Some("groupId"));
        for item_2998 in var_2997 {
            #[allow(unused_mut)]
            let mut entry_3000 = list_2999.entry();
            entry_3000.string(item_2998);
        }
        list_2999.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3001 = writer.prefix("GroupName");
    if let Some(var_3002) = &input.group_names {
        let mut list_3004 = scope_3001.start_list(true, Some("GroupName"));
        for item_3003 in var_3002 {
            #[allow(unused_mut)]
            let mut entry_3005 = list_3004.entry();
            entry_3005.string(item_3003);
        }
        list_3004.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3006 = writer.prefix("DryRun");
    if let Some(var_3007) = &input.dry_run {
        scope_3006.boolean(*var_3007);
    }
    #[allow(unused_mut)]
    let mut scope_3008 = writer.prefix("NextToken");
    if let Some(var_3009) = &input.next_token {
        scope_3008.string(var_3009);
    }
    #[allow(unused_mut)]
    let mut scope_3010 = writer.prefix("MaxResults");
    if let Some(var_3011) = &input.max_results {
        scope_3010.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3011).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3012 = writer.prefix("Attribute");
    if let Some(var_3013) = &input.attribute {
        scope_3012.string(var_3013.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3014 = writer.prefix("SnapshotId");
    if let Some(var_3015) = &input.snapshot_id {
        scope_3014.string(var_3015);
    }
    #[allow(unused_mut)]
    let mut scope_3016 = writer.prefix("DryRun");
    if let Some(var_3017) = &input.dry_run {
        scope_3016.boolean(*var_3017);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3018 = writer.prefix("Filter");
    if let Some(var_3019) = &input.filters {
        let mut list_3021 = scope_3018.start_list(true, Some("Filter"));
        for item_3020 in var_3019 {
            #[allow(unused_mut)]
            let mut entry_3022 = list_3021.entry();
            crate::query_ser::serialize_structure_filter(entry_3022, item_3020);
        }
        list_3021.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3023 = writer.prefix("MaxResults");
    if let Some(var_3024) = &input.max_results {
        scope_3023.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3024).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3025 = writer.prefix("NextToken");
    if let Some(var_3026) = &input.next_token {
        scope_3025.string(var_3026);
    }
    #[allow(unused_mut)]
    let mut scope_3027 = writer.prefix("Owner");
    if let Some(var_3028) = &input.owner_ids {
        let mut list_3030 = scope_3027.start_list(true, Some("Owner"));
        for item_3029 in var_3028 {
            #[allow(unused_mut)]
            let mut entry_3031 = list_3030.entry();
            entry_3031.string(item_3029);
        }
        list_3030.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3032 = writer.prefix("RestorableBy");
    if let Some(var_3033) = &input.restorable_by_user_ids {
        let mut list_3035 = scope_3032.start_list(true, None);
        for item_3034 in var_3033 {
            #[allow(unused_mut)]
            let mut entry_3036 = list_3035.entry();
            entry_3036.string(item_3034);
        }
        list_3035.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3037 = writer.prefix("SnapshotId");
    if let Some(var_3038) = &input.snapshot_ids {
        let mut list_3040 = scope_3037.start_list(true, Some("SnapshotId"));
        for item_3039 in var_3038 {
            #[allow(unused_mut)]
            let mut entry_3041 = list_3040.entry();
            entry_3041.string(item_3039);
        }
        list_3040.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3042 = writer.prefix("DryRun");
    if let Some(var_3043) = &input.dry_run {
        scope_3042.boolean(*var_3043);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3044 = writer.prefix("DryRun");
    if let Some(var_3045) = &input.dry_run {
        scope_3044.boolean(*var_3045);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3046 = writer.prefix("DryRun");
    if let Some(var_3047) = &input.dry_run {
        scope_3046.boolean(*var_3047);
    }
    #[allow(unused_mut)]
    let mut scope_3048 = writer.prefix("MaxResults");
    if let Some(var_3049) = &input.max_results {
        scope_3048.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3049).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3050 = writer.prefix("NextToken");
    if let Some(var_3051) = &input.next_token {
        scope_3050.string(var_3051);
    }
    #[allow(unused_mut)]
    let mut scope_3052 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3053) = &input.spot_fleet_request_id {
        scope_3052.string(var_3053);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequestHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3054 = writer.prefix("DryRun");
    if let Some(var_3055) = &input.dry_run {
        scope_3054.boolean(*var_3055);
    }
    #[allow(unused_mut)]
    let mut scope_3056 = writer.prefix("EventType");
    if let Some(var_3057) = &input.event_type {
        scope_3056.string(var_3057.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3058 = writer.prefix("MaxResults");
    if let Some(var_3059) = &input.max_results {
        scope_3058.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3059).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3060 = writer.prefix("NextToken");
    if let Some(var_3061) = &input.next_token {
        scope_3060.string(var_3061);
    }
    #[allow(unused_mut)]
    let mut scope_3062 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3063) = &input.spot_fleet_request_id {
        scope_3062.string(var_3063);
    }
    #[allow(unused_mut)]
    let mut scope_3064 = writer.prefix("StartTime");
    if let Some(var_3065) = &input.start_time {
        scope_3064.instant(var_3065, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3066 = writer.prefix("DryRun");
    if let Some(var_3067) = &input.dry_run {
        scope_3066.boolean(*var_3067);
    }
    #[allow(unused_mut)]
    let mut scope_3068 = writer.prefix("MaxResults");
    if let Some(var_3069) = &input.max_results {
        scope_3068.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3069).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3070 = writer.prefix("NextToken");
    if let Some(var_3071) = &input.next_token {
        scope_3070.string(var_3071);
    }
    #[allow(unused_mut)]
    let mut scope_3072 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3073) = &input.spot_fleet_request_ids {
        let mut list_3075 = scope_3072.start_list(true, Some("item"));
        for item_3074 in var_3073 {
            #[allow(unused_mut)]
            let mut entry_3076 = list_3075.entry();
            entry_3076.string(item_3074);
        }
        list_3075.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3077 = writer.prefix("Filter");
    if let Some(var_3078) = &input.filters {
        let mut list_3080 = scope_3077.start_list(true, Some("Filter"));
        for item_3079 in var_3078 {
            #[allow(unused_mut)]
            let mut entry_3081 = list_3080.entry();
            crate::query_ser::serialize_structure_filter(entry_3081, item_3079);
        }
        list_3080.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3082 = writer.prefix("DryRun");
    if let Some(var_3083) = &input.dry_run {
        scope_3082.boolean(*var_3083);
    }
    #[allow(unused_mut)]
    let mut scope_3084 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3085) = &input.spot_instance_request_ids {
        let mut list_3087 = scope_3084.start_list(true, Some("SpotInstanceRequestId"));
        for item_3086 in var_3085 {
            #[allow(unused_mut)]
            let mut entry_3088 = list_3087.entry();
            entry_3088.string(item_3086);
        }
        list_3087.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3089 = writer.prefix("NextToken");
    if let Some(var_3090) = &input.next_token {
        scope_3089.string(var_3090);
    }
    #[allow(unused_mut)]
    let mut scope_3091 = writer.prefix("MaxResults");
    if let Some(var_3092) = &input.max_results {
        scope_3091.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3092).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3093 = writer.prefix("Filter");
    if let Some(var_3094) = &input.filters {
        let mut list_3096 = scope_3093.start_list(true, Some("Filter"));
        for item_3095 in var_3094 {
            #[allow(unused_mut)]
            let mut entry_3097 = list_3096.entry();
            crate::query_ser::serialize_structure_filter(entry_3097, item_3095);
        }
        list_3096.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3098 = writer.prefix("AvailabilityZone");
    if let Some(var_3099) = &input.availability_zone {
        scope_3098.string(var_3099);
    }
    #[allow(unused_mut)]
    let mut scope_3100 = writer.prefix("DryRun");
    if let Some(var_3101) = &input.dry_run {
        scope_3100.boolean(*var_3101);
    }
    #[allow(unused_mut)]
    let mut scope_3102 = writer.prefix("EndTime");
    if let Some(var_3103) = &input.end_time {
        scope_3102.instant(var_3103, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_3104 = writer.prefix("InstanceType");
    if let Some(var_3105) = &input.instance_types {
        let mut list_3107 = scope_3104.start_list(true, None);
        for item_3106 in var_3105 {
            #[allow(unused_mut)]
            let mut entry_3108 = list_3107.entry();
            entry_3108.string(item_3106.as_str());
        }
        list_3107.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3109 = writer.prefix("MaxResults");
    if let Some(var_3110) = &input.max_results {
        scope_3109.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3110).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3111 = writer.prefix("NextToken");
    if let Some(var_3112) = &input.next_token {
        scope_3111.string(var_3112);
    }
    #[allow(unused_mut)]
    let mut scope_3113 = writer.prefix("ProductDescription");
    if let Some(var_3114) = &input.product_descriptions {
        let mut list_3116 = scope_3113.start_list(true, None);
        for item_3115 in var_3114 {
            #[allow(unused_mut)]
            let mut entry_3117 = list_3116.entry();
            entry_3117.string(item_3115);
        }
        list_3116.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3118 = writer.prefix("StartTime");
    if let Some(var_3119) = &input.start_time {
        scope_3118.instant(var_3119, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3120 = writer.prefix("DryRun");
    if let Some(var_3121) = &input.dry_run {
        scope_3120.boolean(*var_3121);
    }
    #[allow(unused_mut)]
    let mut scope_3122 = writer.prefix("MaxResults");
    if let Some(var_3123) = &input.max_results {
        scope_3122.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3123).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3124 = writer.prefix("NextToken");
    if let Some(var_3125) = &input.next_token {
        scope_3124.string(var_3125);
    }
    #[allow(unused_mut)]
    let mut scope_3126 = writer.prefix("VpcId");
    if let Some(var_3127) = &input.vpc_id {
        scope_3126.string(var_3127);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3128 = writer.prefix("ImageId");
    if let Some(var_3129) = &input.image_ids {
        let mut list_3131 = scope_3128.start_list(true, Some("item"));
        for item_3130 in var_3129 {
            #[allow(unused_mut)]
            let mut entry_3132 = list_3131.entry();
            entry_3132.string(item_3130);
        }
        list_3131.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3133 = writer.prefix("DryRun");
    if let Some(var_3134) = &input.dry_run {
        scope_3133.boolean(*var_3134);
    }
    #[allow(unused_mut)]
    let mut scope_3135 = writer.prefix("Filter");
    if let Some(var_3136) = &input.filters {
        let mut list_3138 = scope_3135.start_list(true, Some("Filter"));
        for item_3137 in var_3136 {
            #[allow(unused_mut)]
            let mut entry_3139 = list_3138.entry();
            crate::query_ser::serialize_structure_filter(entry_3139, item_3137);
        }
        list_3138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3140 = writer.prefix("NextToken");
    if let Some(var_3141) = &input.next_token {
        scope_3140.string(var_3141);
    }
    #[allow(unused_mut)]
    let mut scope_3142 = writer.prefix("MaxResults");
    if let Some(var_3143) = &input.max_results {
        scope_3142.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3143).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3144 = writer.prefix("Filter");
    if let Some(var_3145) = &input.filters {
        let mut list_3147 = scope_3144.start_list(true, Some("Filter"));
        for item_3146 in var_3145 {
            #[allow(unused_mut)]
            let mut entry_3148 = list_3147.entry();
            crate::query_ser::serialize_structure_filter(entry_3148, item_3146);
        }
        list_3147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3149 = writer.prefix("SubnetId");
    if let Some(var_3150) = &input.subnet_ids {
        let mut list_3152 = scope_3149.start_list(true, Some("SubnetId"));
        for item_3151 in var_3150 {
            #[allow(unused_mut)]
            let mut entry_3153 = list_3152.entry();
            entry_3153.string(item_3151);
        }
        list_3152.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3154 = writer.prefix("DryRun");
    if let Some(var_3155) = &input.dry_run {
        scope_3154.boolean(*var_3155);
    }
    #[allow(unused_mut)]
    let mut scope_3156 = writer.prefix("NextToken");
    if let Some(var_3157) = &input.next_token {
        scope_3156.string(var_3157);
    }
    #[allow(unused_mut)]
    let mut scope_3158 = writer.prefix("MaxResults");
    if let Some(var_3159) = &input.max_results {
        scope_3158.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3159).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3160 = writer.prefix("DryRun");
    if let Some(var_3161) = &input.dry_run {
        scope_3160.boolean(*var_3161);
    }
    #[allow(unused_mut)]
    let mut scope_3162 = writer.prefix("Filter");
    if let Some(var_3163) = &input.filters {
        let mut list_3165 = scope_3162.start_list(true, Some("Filter"));
        for item_3164 in var_3163 {
            #[allow(unused_mut)]
            let mut entry_3166 = list_3165.entry();
            crate::query_ser::serialize_structure_filter(entry_3166, item_3164);
        }
        list_3165.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3167 = writer.prefix("MaxResults");
    if let Some(var_3168) = &input.max_results {
        scope_3167.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3168).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3169 = writer.prefix("NextToken");
    if let Some(var_3170) = &input.next_token {
        scope_3169.string(var_3170);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3171 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3172) = &input.traffic_mirror_filter_ids {
        let mut list_3174 = scope_3171.start_list(true, Some("item"));
        for item_3173 in var_3172 {
            #[allow(unused_mut)]
            let mut entry_3175 = list_3174.entry();
            entry_3175.string(item_3173);
        }
        list_3174.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3176 = writer.prefix("DryRun");
    if let Some(var_3177) = &input.dry_run {
        scope_3176.boolean(*var_3177);
    }
    #[allow(unused_mut)]
    let mut scope_3178 = writer.prefix("Filter");
    if let Some(var_3179) = &input.filters {
        let mut list_3181 = scope_3178.start_list(true, Some("Filter"));
        for item_3180 in var_3179 {
            #[allow(unused_mut)]
            let mut entry_3182 = list_3181.entry();
            crate::query_ser::serialize_structure_filter(entry_3182, item_3180);
        }
        list_3181.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3183 = writer.prefix("MaxResults");
    if let Some(var_3184) = &input.max_results {
        scope_3183.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3184).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3185 = writer.prefix("NextToken");
    if let Some(var_3186) = &input.next_token {
        scope_3185.string(var_3186);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3187 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3188) = &input.traffic_mirror_session_ids {
        let mut list_3190 = scope_3187.start_list(true, Some("item"));
        for item_3189 in var_3188 {
            #[allow(unused_mut)]
            let mut entry_3191 = list_3190.entry();
            entry_3191.string(item_3189);
        }
        list_3190.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3192 = writer.prefix("DryRun");
    if let Some(var_3193) = &input.dry_run {
        scope_3192.boolean(*var_3193);
    }
    #[allow(unused_mut)]
    let mut scope_3194 = writer.prefix("Filter");
    if let Some(var_3195) = &input.filters {
        let mut list_3197 = scope_3194.start_list(true, Some("Filter"));
        for item_3196 in var_3195 {
            #[allow(unused_mut)]
            let mut entry_3198 = list_3197.entry();
            crate::query_ser::serialize_structure_filter(entry_3198, item_3196);
        }
        list_3197.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3199 = writer.prefix("MaxResults");
    if let Some(var_3200) = &input.max_results {
        scope_3199.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3200).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3201 = writer.prefix("NextToken");
    if let Some(var_3202) = &input.next_token {
        scope_3201.string(var_3202);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3203 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3204) = &input.traffic_mirror_target_ids {
        let mut list_3206 = scope_3203.start_list(true, Some("item"));
        for item_3205 in var_3204 {
            #[allow(unused_mut)]
            let mut entry_3207 = list_3206.entry();
            entry_3207.string(item_3205);
        }
        list_3206.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3208 = writer.prefix("DryRun");
    if let Some(var_3209) = &input.dry_run {
        scope_3208.boolean(*var_3209);
    }
    #[allow(unused_mut)]
    let mut scope_3210 = writer.prefix("Filter");
    if let Some(var_3211) = &input.filters {
        let mut list_3213 = scope_3210.start_list(true, Some("Filter"));
        for item_3212 in var_3211 {
            #[allow(unused_mut)]
            let mut entry_3214 = list_3213.entry();
            crate::query_ser::serialize_structure_filter(entry_3214, item_3212);
        }
        list_3213.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3215 = writer.prefix("MaxResults");
    if let Some(var_3216) = &input.max_results {
        scope_3215.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3216).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3217 = writer.prefix("NextToken");
    if let Some(var_3218) = &input.next_token {
        scope_3217.string(var_3218);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayAttachments", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3219 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3220) = &input.transit_gateway_attachment_ids {
        let mut list_3222 = scope_3219.start_list(true, None);
        for item_3221 in var_3220 {
            #[allow(unused_mut)]
            let mut entry_3223 = list_3222.entry();
            entry_3223.string(item_3221);
        }
        list_3222.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3224 = writer.prefix("Filter");
    if let Some(var_3225) = &input.filters {
        let mut list_3227 = scope_3224.start_list(true, Some("Filter"));
        for item_3226 in var_3225 {
            #[allow(unused_mut)]
            let mut entry_3228 = list_3227.entry();
            crate::query_ser::serialize_structure_filter(entry_3228, item_3226);
        }
        list_3227.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3229 = writer.prefix("MaxResults");
    if let Some(var_3230) = &input.max_results {
        scope_3229.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3230).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3231 = writer.prefix("NextToken");
    if let Some(var_3232) = &input.next_token {
        scope_3231.string(var_3232);
    }
    #[allow(unused_mut)]
    let mut scope_3233 = writer.prefix("DryRun");
    if let Some(var_3234) = &input.dry_run {
        scope_3233.boolean(*var_3234);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3235 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3236) = &input.transit_gateway_connect_peer_ids {
        let mut list_3238 = scope_3235.start_list(true, Some("item"));
        for item_3237 in var_3236 {
            #[allow(unused_mut)]
            let mut entry_3239 = list_3238.entry();
            entry_3239.string(item_3237);
        }
        list_3238.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3240 = writer.prefix("Filter");
    if let Some(var_3241) = &input.filters {
        let mut list_3243 = scope_3240.start_list(true, Some("Filter"));
        for item_3242 in var_3241 {
            #[allow(unused_mut)]
            let mut entry_3244 = list_3243.entry();
            crate::query_ser::serialize_structure_filter(entry_3244, item_3242);
        }
        list_3243.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3245 = writer.prefix("MaxResults");
    if let Some(var_3246) = &input.max_results {
        scope_3245.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3246).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3247 = writer.prefix("NextToken");
    if let Some(var_3248) = &input.next_token {
        scope_3247.string(var_3248);
    }
    #[allow(unused_mut)]
    let mut scope_3249 = writer.prefix("DryRun");
    if let Some(var_3250) = &input.dry_run {
        scope_3249.boolean(*var_3250);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayConnects", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3251 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3252) = &input.transit_gateway_attachment_ids {
        let mut list_3254 = scope_3251.start_list(true, None);
        for item_3253 in var_3252 {
            #[allow(unused_mut)]
            let mut entry_3255 = list_3254.entry();
            entry_3255.string(item_3253);
        }
        list_3254.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3256 = writer.prefix("Filter");
    if let Some(var_3257) = &input.filters {
        let mut list_3259 = scope_3256.start_list(true, Some("Filter"));
        for item_3258 in var_3257 {
            #[allow(unused_mut)]
            let mut entry_3260 = list_3259.entry();
            crate::query_ser::serialize_structure_filter(entry_3260, item_3258);
        }
        list_3259.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3261 = writer.prefix("MaxResults");
    if let Some(var_3262) = &input.max_results {
        scope_3261.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3262).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3263 = writer.prefix("NextToken");
    if let Some(var_3264) = &input.next_token {
        scope_3263.string(var_3264);
    }
    #[allow(unused_mut)]
    let mut scope_3265 = writer.prefix("DryRun");
    if let Some(var_3266) = &input.dry_run {
        scope_3265.boolean(*var_3266);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3267 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3268) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3270 = scope_3267.start_list(true, Some("item"));
        for item_3269 in var_3268 {
            #[allow(unused_mut)]
            let mut entry_3271 = list_3270.entry();
            entry_3271.string(item_3269);
        }
        list_3270.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3272 = writer.prefix("Filter");
    if let Some(var_3273) = &input.filters {
        let mut list_3275 = scope_3272.start_list(true, Some("Filter"));
        for item_3274 in var_3273 {
            #[allow(unused_mut)]
            let mut entry_3276 = list_3275.entry();
            crate::query_ser::serialize_structure_filter(entry_3276, item_3274);
        }
        list_3275.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3277 = writer.prefix("MaxResults");
    if let Some(var_3278) = &input.max_results {
        scope_3277.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3278).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3279 = writer.prefix("NextToken");
    if let Some(var_3280) = &input.next_token {
        scope_3279.string(var_3280);
    }
    #[allow(unused_mut)]
    let mut scope_3281 = writer.prefix("DryRun");
    if let Some(var_3282) = &input.dry_run {
        scope_3281.boolean(*var_3282);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3283 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3284) = &input.transit_gateway_attachment_ids {
        let mut list_3286 = scope_3283.start_list(true, None);
        for item_3285 in var_3284 {
            #[allow(unused_mut)]
            let mut entry_3287 = list_3286.entry();
            entry_3287.string(item_3285);
        }
        list_3286.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3288 = writer.prefix("Filter");
    if let Some(var_3289) = &input.filters {
        let mut list_3291 = scope_3288.start_list(true, Some("Filter"));
        for item_3290 in var_3289 {
            #[allow(unused_mut)]
            let mut entry_3292 = list_3291.entry();
            crate::query_ser::serialize_structure_filter(entry_3292, item_3290);
        }
        list_3291.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3293 = writer.prefix("MaxResults");
    if let Some(var_3294) = &input.max_results {
        scope_3293.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3294).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3295 = writer.prefix("NextToken");
    if let Some(var_3296) = &input.next_token {
        scope_3295.string(var_3296);
    }
    #[allow(unused_mut)]
    let mut scope_3297 = writer.prefix("DryRun");
    if let Some(var_3298) = &input.dry_run {
        scope_3297.boolean(*var_3298);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3299 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3300) = &input.transit_gateway_route_table_ids {
        let mut list_3302 = scope_3299.start_list(true, Some("item"));
        for item_3301 in var_3300 {
            #[allow(unused_mut)]
            let mut entry_3303 = list_3302.entry();
            entry_3303.string(item_3301);
        }
        list_3302.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3304 = writer.prefix("Filter");
    if let Some(var_3305) = &input.filters {
        let mut list_3307 = scope_3304.start_list(true, Some("Filter"));
        for item_3306 in var_3305 {
            #[allow(unused_mut)]
            let mut entry_3308 = list_3307.entry();
            crate::query_ser::serialize_structure_filter(entry_3308, item_3306);
        }
        list_3307.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3309 = writer.prefix("MaxResults");
    if let Some(var_3310) = &input.max_results {
        scope_3309.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3310).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3311 = writer.prefix("NextToken");
    if let Some(var_3312) = &input.next_token {
        scope_3311.string(var_3312);
    }
    #[allow(unused_mut)]
    let mut scope_3313 = writer.prefix("DryRun");
    if let Some(var_3314) = &input.dry_run {
        scope_3313.boolean(*var_3314);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3315 = writer.prefix("TransitGatewayIds");
    if let Some(var_3316) = &input.transit_gateway_ids {
        let mut list_3318 = scope_3315.start_list(true, Some("item"));
        for item_3317 in var_3316 {
            #[allow(unused_mut)]
            let mut entry_3319 = list_3318.entry();
            entry_3319.string(item_3317);
        }
        list_3318.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3320 = writer.prefix("Filter");
    if let Some(var_3321) = &input.filters {
        let mut list_3323 = scope_3320.start_list(true, Some("Filter"));
        for item_3322 in var_3321 {
            #[allow(unused_mut)]
            let mut entry_3324 = list_3323.entry();
            crate::query_ser::serialize_structure_filter(entry_3324, item_3322);
        }
        list_3323.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3325 = writer.prefix("MaxResults");
    if let Some(var_3326) = &input.max_results {
        scope_3325.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3326).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3327 = writer.prefix("NextToken");
    if let Some(var_3328) = &input.next_token {
        scope_3327.string(var_3328);
    }
    #[allow(unused_mut)]
    let mut scope_3329 = writer.prefix("DryRun");
    if let Some(var_3330) = &input.dry_run {
        scope_3329.boolean(*var_3330);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3331 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3332) = &input.transit_gateway_attachment_ids {
        let mut list_3334 = scope_3331.start_list(true, None);
        for item_3333 in var_3332 {
            #[allow(unused_mut)]
            let mut entry_3335 = list_3334.entry();
            entry_3335.string(item_3333);
        }
        list_3334.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3336 = writer.prefix("Filter");
    if let Some(var_3337) = &input.filters {
        let mut list_3339 = scope_3336.start_list(true, Some("Filter"));
        for item_3338 in var_3337 {
            #[allow(unused_mut)]
            let mut entry_3340 = list_3339.entry();
            crate::query_ser::serialize_structure_filter(entry_3340, item_3338);
        }
        list_3339.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3341 = writer.prefix("MaxResults");
    if let Some(var_3342) = &input.max_results {
        scope_3341.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3342).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3343 = writer.prefix("NextToken");
    if let Some(var_3344) = &input.next_token {
        scope_3343.string(var_3344);
    }
    #[allow(unused_mut)]
    let mut scope_3345 = writer.prefix("DryRun");
    if let Some(var_3346) = &input.dry_run {
        scope_3345.boolean(*var_3346);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_trunk_interface_associations(
    input: &crate::input::DescribeTrunkInterfaceAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTrunkInterfaceAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3347 = writer.prefix("AssociationId");
    if let Some(var_3348) = &input.association_ids {
        let mut list_3350 = scope_3347.start_list(true, Some("item"));
        for item_3349 in var_3348 {
            #[allow(unused_mut)]
            let mut entry_3351 = list_3350.entry();
            entry_3351.string(item_3349);
        }
        list_3350.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3352 = writer.prefix("DryRun");
    if let Some(var_3353) = &input.dry_run {
        scope_3352.boolean(*var_3353);
    }
    #[allow(unused_mut)]
    let mut scope_3354 = writer.prefix("Filter");
    if let Some(var_3355) = &input.filters {
        let mut list_3357 = scope_3354.start_list(true, Some("Filter"));
        for item_3356 in var_3355 {
            #[allow(unused_mut)]
            let mut entry_3358 = list_3357.entry();
            crate::query_ser::serialize_structure_filter(entry_3358, item_3356);
        }
        list_3357.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3359 = writer.prefix("NextToken");
    if let Some(var_3360) = &input.next_token {
        scope_3359.string(var_3360);
    }
    #[allow(unused_mut)]
    let mut scope_3361 = writer.prefix("MaxResults");
    if let Some(var_3362) = &input.max_results {
        scope_3361.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3362).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3363 = writer.prefix("Attribute");
    if let Some(var_3364) = &input.attribute {
        scope_3363.string(var_3364.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3365 = writer.prefix("VolumeId");
    if let Some(var_3366) = &input.volume_id {
        scope_3365.string(var_3366);
    }
    #[allow(unused_mut)]
    let mut scope_3367 = writer.prefix("DryRun");
    if let Some(var_3368) = &input.dry_run {
        scope_3367.boolean(*var_3368);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3369 = writer.prefix("Filter");
    if let Some(var_3370) = &input.filters {
        let mut list_3372 = scope_3369.start_list(true, Some("Filter"));
        for item_3371 in var_3370 {
            #[allow(unused_mut)]
            let mut entry_3373 = list_3372.entry();
            crate::query_ser::serialize_structure_filter(entry_3373, item_3371);
        }
        list_3372.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3374 = writer.prefix("VolumeId");
    if let Some(var_3375) = &input.volume_ids {
        let mut list_3377 = scope_3374.start_list(true, Some("VolumeId"));
        for item_3376 in var_3375 {
            #[allow(unused_mut)]
            let mut entry_3378 = list_3377.entry();
            entry_3378.string(item_3376);
        }
        list_3377.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3379 = writer.prefix("DryRun");
    if let Some(var_3380) = &input.dry_run {
        scope_3379.boolean(*var_3380);
    }
    #[allow(unused_mut)]
    let mut scope_3381 = writer.prefix("MaxResults");
    if let Some(var_3382) = &input.max_results {
        scope_3381.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3382).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3383 = writer.prefix("NextToken");
    if let Some(var_3384) = &input.next_token {
        scope_3383.string(var_3384);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3385 = writer.prefix("DryRun");
    if let Some(var_3386) = &input.dry_run {
        scope_3385.boolean(*var_3386);
    }
    #[allow(unused_mut)]
    let mut scope_3387 = writer.prefix("VolumeId");
    if let Some(var_3388) = &input.volume_ids {
        let mut list_3390 = scope_3387.start_list(true, Some("VolumeId"));
        for item_3389 in var_3388 {
            #[allow(unused_mut)]
            let mut entry_3391 = list_3390.entry();
            entry_3391.string(item_3389);
        }
        list_3390.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3392 = writer.prefix("Filter");
    if let Some(var_3393) = &input.filters {
        let mut list_3395 = scope_3392.start_list(true, Some("Filter"));
        for item_3394 in var_3393 {
            #[allow(unused_mut)]
            let mut entry_3396 = list_3395.entry();
            crate::query_ser::serialize_structure_filter(entry_3396, item_3394);
        }
        list_3395.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3397 = writer.prefix("NextToken");
    if let Some(var_3398) = &input.next_token {
        scope_3397.string(var_3398);
    }
    #[allow(unused_mut)]
    let mut scope_3399 = writer.prefix("MaxResults");
    if let Some(var_3400) = &input.max_results {
        scope_3399.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3400).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3401 = writer.prefix("Filter");
    if let Some(var_3402) = &input.filters {
        let mut list_3404 = scope_3401.start_list(true, Some("Filter"));
        for item_3403 in var_3402 {
            #[allow(unused_mut)]
            let mut entry_3405 = list_3404.entry();
            crate::query_ser::serialize_structure_filter(entry_3405, item_3403);
        }
        list_3404.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3406 = writer.prefix("MaxResults");
    if let Some(var_3407) = &input.max_results {
        scope_3406.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3407).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3408 = writer.prefix("NextToken");
    if let Some(var_3409) = &input.next_token {
        scope_3408.string(var_3409);
    }
    #[allow(unused_mut)]
    let mut scope_3410 = writer.prefix("VolumeId");
    if let Some(var_3411) = &input.volume_ids {
        let mut list_3413 = scope_3410.start_list(true, Some("VolumeId"));
        for item_3412 in var_3411 {
            #[allow(unused_mut)]
            let mut entry_3414 = list_3413.entry();
            entry_3414.string(item_3412);
        }
        list_3413.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3415 = writer.prefix("DryRun");
    if let Some(var_3416) = &input.dry_run {
        scope_3415.boolean(*var_3416);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3417 = writer.prefix("Attribute");
    if let Some(var_3418) = &input.attribute {
        scope_3417.string(var_3418.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3419 = writer.prefix("VpcId");
    if let Some(var_3420) = &input.vpc_id {
        scope_3419.string(var_3420);
    }
    #[allow(unused_mut)]
    let mut scope_3421 = writer.prefix("DryRun");
    if let Some(var_3422) = &input.dry_run {
        scope_3421.boolean(*var_3422);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3423 = writer.prefix("Filter");
    if let Some(var_3424) = &input.filters {
        let mut list_3426 = scope_3423.start_list(true, Some("Filter"));
        for item_3425 in var_3424 {
            #[allow(unused_mut)]
            let mut entry_3427 = list_3426.entry();
            crate::query_ser::serialize_structure_filter(entry_3427, item_3425);
        }
        list_3426.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3428 = writer.prefix("DryRun");
    if let Some(var_3429) = &input.dry_run {
        scope_3428.boolean(*var_3429);
    }
    #[allow(unused_mut)]
    let mut scope_3430 = writer.prefix("VpcId");
    if let Some(var_3431) = &input.vpc_ids {
        let mut list_3433 = scope_3430.start_list(true, Some("VpcId"));
        for item_3432 in var_3431 {
            #[allow(unused_mut)]
            let mut entry_3434 = list_3433.entry();
            entry_3434.string(item_3432);
        }
        list_3433.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3435 = writer.prefix("MaxResults");
    if let Some(var_3436) = &input.max_results {
        scope_3435.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3436).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3437 = writer.prefix("NextToken");
    if let Some(var_3438) = &input.next_token {
        scope_3437.string(var_3438);
    }
    #[allow(unused_mut)]
    let mut scope_3439 = writer.prefix("VpcIds");
    if let Some(var_3440) = &input.vpc_ids {
        let mut list_3442 = scope_3439.start_list(true, Some("VpcId"));
        for item_3441 in var_3440 {
            #[allow(unused_mut)]
            let mut entry_3443 = list_3442.entry();
            entry_3443.string(item_3441);
        }
        list_3442.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3444 = writer.prefix("DryRun");
    if let Some(var_3445) = &input.dry_run {
        scope_3444.boolean(*var_3445);
    }
    #[allow(unused_mut)]
    let mut scope_3446 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3447) = &input.connection_notification_id {
        scope_3446.string(var_3447);
    }
    #[allow(unused_mut)]
    let mut scope_3448 = writer.prefix("Filter");
    if let Some(var_3449) = &input.filters {
        let mut list_3451 = scope_3448.start_list(true, Some("Filter"));
        for item_3450 in var_3449 {
            #[allow(unused_mut)]
            let mut entry_3452 = list_3451.entry();
            crate::query_ser::serialize_structure_filter(entry_3452, item_3450);
        }
        list_3451.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3453 = writer.prefix("MaxResults");
    if let Some(var_3454) = &input.max_results {
        scope_3453.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3454).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3455 = writer.prefix("NextToken");
    if let Some(var_3456) = &input.next_token {
        scope_3455.string(var_3456);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3457 = writer.prefix("DryRun");
    if let Some(var_3458) = &input.dry_run {
        scope_3457.boolean(*var_3458);
    }
    #[allow(unused_mut)]
    let mut scope_3459 = writer.prefix("Filter");
    if let Some(var_3460) = &input.filters {
        let mut list_3462 = scope_3459.start_list(true, Some("Filter"));
        for item_3461 in var_3460 {
            #[allow(unused_mut)]
            let mut entry_3463 = list_3462.entry();
            crate::query_ser::serialize_structure_filter(entry_3463, item_3461);
        }
        list_3462.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3464 = writer.prefix("MaxResults");
    if let Some(var_3465) = &input.max_results {
        scope_3464.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3465).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3466 = writer.prefix("NextToken");
    if let Some(var_3467) = &input.next_token {
        scope_3466.string(var_3467);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3468 = writer.prefix("DryRun");
    if let Some(var_3469) = &input.dry_run {
        scope_3468.boolean(*var_3469);
    }
    #[allow(unused_mut)]
    let mut scope_3470 = writer.prefix("VpcEndpointId");
    if let Some(var_3471) = &input.vpc_endpoint_ids {
        let mut list_3473 = scope_3470.start_list(true, Some("item"));
        for item_3472 in var_3471 {
            #[allow(unused_mut)]
            let mut entry_3474 = list_3473.entry();
            entry_3474.string(item_3472);
        }
        list_3473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3475 = writer.prefix("Filter");
    if let Some(var_3476) = &input.filters {
        let mut list_3478 = scope_3475.start_list(true, Some("Filter"));
        for item_3477 in var_3476 {
            #[allow(unused_mut)]
            let mut entry_3479 = list_3478.entry();
            crate::query_ser::serialize_structure_filter(entry_3479, item_3477);
        }
        list_3478.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3480 = writer.prefix("MaxResults");
    if let Some(var_3481) = &input.max_results {
        scope_3480.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3481).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3482 = writer.prefix("NextToken");
    if let Some(var_3483) = &input.next_token {
        scope_3482.string(var_3483);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3484 = writer.prefix("DryRun");
    if let Some(var_3485) = &input.dry_run {
        scope_3484.boolean(*var_3485);
    }
    #[allow(unused_mut)]
    let mut scope_3486 = writer.prefix("ServiceId");
    if let Some(var_3487) = &input.service_ids {
        let mut list_3489 = scope_3486.start_list(true, Some("item"));
        for item_3488 in var_3487 {
            #[allow(unused_mut)]
            let mut entry_3490 = list_3489.entry();
            entry_3490.string(item_3488);
        }
        list_3489.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3491 = writer.prefix("Filter");
    if let Some(var_3492) = &input.filters {
        let mut list_3494 = scope_3491.start_list(true, Some("Filter"));
        for item_3493 in var_3492 {
            #[allow(unused_mut)]
            let mut entry_3495 = list_3494.entry();
            crate::query_ser::serialize_structure_filter(entry_3495, item_3493);
        }
        list_3494.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3496 = writer.prefix("MaxResults");
    if let Some(var_3497) = &input.max_results {
        scope_3496.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3497).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3498 = writer.prefix("NextToken");
    if let Some(var_3499) = &input.next_token {
        scope_3498.string(var_3499);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3500 = writer.prefix("DryRun");
    if let Some(var_3501) = &input.dry_run {
        scope_3500.boolean(*var_3501);
    }
    #[allow(unused_mut)]
    let mut scope_3502 = writer.prefix("ServiceId");
    if let Some(var_3503) = &input.service_id {
        scope_3502.string(var_3503);
    }
    #[allow(unused_mut)]
    let mut scope_3504 = writer.prefix("Filter");
    if let Some(var_3505) = &input.filters {
        let mut list_3507 = scope_3504.start_list(true, Some("Filter"));
        for item_3506 in var_3505 {
            #[allow(unused_mut)]
            let mut entry_3508 = list_3507.entry();
            crate::query_ser::serialize_structure_filter(entry_3508, item_3506);
        }
        list_3507.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3509 = writer.prefix("MaxResults");
    if let Some(var_3510) = &input.max_results {
        scope_3509.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3510).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3511 = writer.prefix("NextToken");
    if let Some(var_3512) = &input.next_token {
        scope_3511.string(var_3512);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3513 = writer.prefix("DryRun");
    if let Some(var_3514) = &input.dry_run {
        scope_3513.boolean(*var_3514);
    }
    #[allow(unused_mut)]
    let mut scope_3515 = writer.prefix("ServiceName");
    if let Some(var_3516) = &input.service_names {
        let mut list_3518 = scope_3515.start_list(true, Some("item"));
        for item_3517 in var_3516 {
            #[allow(unused_mut)]
            let mut entry_3519 = list_3518.entry();
            entry_3519.string(item_3517);
        }
        list_3518.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3520 = writer.prefix("Filter");
    if let Some(var_3521) = &input.filters {
        let mut list_3523 = scope_3520.start_list(true, Some("Filter"));
        for item_3522 in var_3521 {
            #[allow(unused_mut)]
            let mut entry_3524 = list_3523.entry();
            crate::query_ser::serialize_structure_filter(entry_3524, item_3522);
        }
        list_3523.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3525 = writer.prefix("MaxResults");
    if let Some(var_3526) = &input.max_results {
        scope_3525.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3526).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3527 = writer.prefix("NextToken");
    if let Some(var_3528) = &input.next_token {
        scope_3527.string(var_3528);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3529 = writer.prefix("Filter");
    if let Some(var_3530) = &input.filters {
        let mut list_3532 = scope_3529.start_list(true, Some("Filter"));
        for item_3531 in var_3530 {
            #[allow(unused_mut)]
            let mut entry_3533 = list_3532.entry();
            crate::query_ser::serialize_structure_filter(entry_3533, item_3531);
        }
        list_3532.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3534 = writer.prefix("DryRun");
    if let Some(var_3535) = &input.dry_run {
        scope_3534.boolean(*var_3535);
    }
    #[allow(unused_mut)]
    let mut scope_3536 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_3537) = &input.vpc_peering_connection_ids {
        let mut list_3539 = scope_3536.start_list(true, Some("item"));
        for item_3538 in var_3537 {
            #[allow(unused_mut)]
            let mut entry_3540 = list_3539.entry();
            entry_3540.string(item_3538);
        }
        list_3539.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3541 = writer.prefix("NextToken");
    if let Some(var_3542) = &input.next_token {
        scope_3541.string(var_3542);
    }
    #[allow(unused_mut)]
    let mut scope_3543 = writer.prefix("MaxResults");
    if let Some(var_3544) = &input.max_results {
        scope_3543.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3544).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3545 = writer.prefix("Filter");
    if let Some(var_3546) = &input.filters {
        let mut list_3548 = scope_3545.start_list(true, Some("Filter"));
        for item_3547 in var_3546 {
            #[allow(unused_mut)]
            let mut entry_3549 = list_3548.entry();
            crate::query_ser::serialize_structure_filter(entry_3549, item_3547);
        }
        list_3548.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3550 = writer.prefix("VpcId");
    if let Some(var_3551) = &input.vpc_ids {
        let mut list_3553 = scope_3550.start_list(true, Some("VpcId"));
        for item_3552 in var_3551 {
            #[allow(unused_mut)]
            let mut entry_3554 = list_3553.entry();
            entry_3554.string(item_3552);
        }
        list_3553.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3555 = writer.prefix("DryRun");
    if let Some(var_3556) = &input.dry_run {
        scope_3555.boolean(*var_3556);
    }
    #[allow(unused_mut)]
    let mut scope_3557 = writer.prefix("NextToken");
    if let Some(var_3558) = &input.next_token {
        scope_3557.string(var_3558);
    }
    #[allow(unused_mut)]
    let mut scope_3559 = writer.prefix("MaxResults");
    if let Some(var_3560) = &input.max_results {
        scope_3559.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3560).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3561 = writer.prefix("Filter");
    if let Some(var_3562) = &input.filters {
        let mut list_3564 = scope_3561.start_list(true, Some("Filter"));
        for item_3563 in var_3562 {
            #[allow(unused_mut)]
            let mut entry_3565 = list_3564.entry();
            crate::query_ser::serialize_structure_filter(entry_3565, item_3563);
        }
        list_3564.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3566 = writer.prefix("VpnConnectionId");
    if let Some(var_3567) = &input.vpn_connection_ids {
        let mut list_3569 = scope_3566.start_list(true, Some("VpnConnectionId"));
        for item_3568 in var_3567 {
            #[allow(unused_mut)]
            let mut entry_3570 = list_3569.entry();
            entry_3570.string(item_3568);
        }
        list_3569.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3571 = writer.prefix("DryRun");
    if let Some(var_3572) = &input.dry_run {
        scope_3571.boolean(*var_3572);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3573 = writer.prefix("Filter");
    if let Some(var_3574) = &input.filters {
        let mut list_3576 = scope_3573.start_list(true, Some("Filter"));
        for item_3575 in var_3574 {
            #[allow(unused_mut)]
            let mut entry_3577 = list_3576.entry();
            crate::query_ser::serialize_structure_filter(entry_3577, item_3575);
        }
        list_3576.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3578 = writer.prefix("VpnGatewayId");
    if let Some(var_3579) = &input.vpn_gateway_ids {
        let mut list_3581 = scope_3578.start_list(true, Some("VpnGatewayId"));
        for item_3580 in var_3579 {
            #[allow(unused_mut)]
            let mut entry_3582 = list_3581.entry();
            entry_3582.string(item_3580);
        }
        list_3581.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3583 = writer.prefix("DryRun");
    if let Some(var_3584) = &input.dry_run {
        scope_3583.boolean(*var_3584);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3585 = writer.prefix("DryRun");
    if let Some(var_3586) = &input.dry_run {
        scope_3585.boolean(*var_3586);
    }
    #[allow(unused_mut)]
    let mut scope_3587 = writer.prefix("InstanceId");
    if let Some(var_3588) = &input.instance_id {
        scope_3587.string(var_3588);
    }
    #[allow(unused_mut)]
    let mut scope_3589 = writer.prefix("VpcId");
    if let Some(var_3590) = &input.vpc_id {
        scope_3589.string(var_3590);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3591 = writer.prefix("DryRun");
    if let Some(var_3592) = &input.dry_run {
        scope_3591.boolean(*var_3592);
    }
    #[allow(unused_mut)]
    let mut scope_3593 = writer.prefix("InternetGatewayId");
    if let Some(var_3594) = &input.internet_gateway_id {
        scope_3593.string(var_3594);
    }
    #[allow(unused_mut)]
    let mut scope_3595 = writer.prefix("VpcId");
    if let Some(var_3596) = &input.vpc_id {
        scope_3595.string(var_3596);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3597 = writer.prefix("AttachmentId");
    if let Some(var_3598) = &input.attachment_id {
        scope_3597.string(var_3598);
    }
    #[allow(unused_mut)]
    let mut scope_3599 = writer.prefix("DryRun");
    if let Some(var_3600) = &input.dry_run {
        scope_3599.boolean(*var_3600);
    }
    #[allow(unused_mut)]
    let mut scope_3601 = writer.prefix("Force");
    if let Some(var_3602) = &input.force {
        scope_3601.boolean(*var_3602);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3603 = writer.prefix("Device");
    if let Some(var_3604) = &input.device {
        scope_3603.string(var_3604);
    }
    #[allow(unused_mut)]
    let mut scope_3605 = writer.prefix("Force");
    if let Some(var_3606) = &input.force {
        scope_3605.boolean(*var_3606);
    }
    #[allow(unused_mut)]
    let mut scope_3607 = writer.prefix("InstanceId");
    if let Some(var_3608) = &input.instance_id {
        scope_3607.string(var_3608);
    }
    #[allow(unused_mut)]
    let mut scope_3609 = writer.prefix("VolumeId");
    if let Some(var_3610) = &input.volume_id {
        scope_3609.string(var_3610);
    }
    #[allow(unused_mut)]
    let mut scope_3611 = writer.prefix("DryRun");
    if let Some(var_3612) = &input.dry_run {
        scope_3611.boolean(*var_3612);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3613 = writer.prefix("VpcId");
    if let Some(var_3614) = &input.vpc_id {
        scope_3613.string(var_3614);
    }
    #[allow(unused_mut)]
    let mut scope_3615 = writer.prefix("VpnGatewayId");
    if let Some(var_3616) = &input.vpn_gateway_id {
        scope_3615.string(var_3616);
    }
    #[allow(unused_mut)]
    let mut scope_3617 = writer.prefix("DryRun");
    if let Some(var_3618) = &input.dry_run {
        scope_3617.boolean(*var_3618);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3619 = writer.prefix("DryRun");
    if let Some(var_3620) = &input.dry_run {
        scope_3619.boolean(*var_3620);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3621 = writer.prefix("AvailabilityZone");
    if let Some(var_3622) = &input.availability_zones {
        let mut list_3624 = scope_3621.start_list(true, Some("AvailabilityZone"));
        for item_3623 in var_3622 {
            #[allow(unused_mut)]
            let mut entry_3625 = list_3624.entry();
            entry_3625.string(item_3623);
        }
        list_3624.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3626 = writer.prefix("SourceSnapshotId");
    if let Some(var_3627) = &input.source_snapshot_ids {
        let mut list_3629 = scope_3626.start_list(true, Some("SnapshotId"));
        for item_3628 in var_3627 {
            #[allow(unused_mut)]
            let mut entry_3630 = list_3629.entry();
            entry_3630.string(item_3628);
        }
        list_3629.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3631 = writer.prefix("DryRun");
    if let Some(var_3632) = &input.dry_run {
        scope_3631.boolean(*var_3632);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_image_deprecation(
    input: &crate::input::DisableImageDeprecationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3633 = writer.prefix("ImageId");
    if let Some(var_3634) = &input.image_id {
        scope_3633.string(var_3634);
    }
    #[allow(unused_mut)]
    let mut scope_3635 = writer.prefix("DryRun");
    if let Some(var_3636) = &input.dry_run {
        scope_3635.boolean(*var_3636);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3637 = writer.prefix("DryRun");
    if let Some(var_3638) = &input.dry_run {
        scope_3637.boolean(*var_3638);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3639 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3640) = &input.transit_gateway_route_table_id {
        scope_3639.string(var_3640);
    }
    #[allow(unused_mut)]
    let mut scope_3641 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3642) = &input.transit_gateway_attachment_id {
        scope_3641.string(var_3642);
    }
    #[allow(unused_mut)]
    let mut scope_3643 = writer.prefix("DryRun");
    if let Some(var_3644) = &input.dry_run {
        scope_3643.boolean(*var_3644);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3645 = writer.prefix("GatewayId");
    if let Some(var_3646) = &input.gateway_id {
        scope_3645.string(var_3646);
    }
    #[allow(unused_mut)]
    let mut scope_3647 = writer.prefix("RouteTableId");
    if let Some(var_3648) = &input.route_table_id {
        scope_3647.string(var_3648);
    }
    #[allow(unused_mut)]
    let mut scope_3649 = writer.prefix("DryRun");
    if let Some(var_3650) = &input.dry_run {
        scope_3649.boolean(*var_3650);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3651 = writer.prefix("DryRun");
    if let Some(var_3652) = &input.dry_run {
        scope_3651.boolean(*var_3652);
    }
    #[allow(unused_mut)]
    let mut scope_3653 = writer.prefix("VpcId");
    if let Some(var_3654) = &input.vpc_id {
        scope_3653.string(var_3654);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3655 = writer.prefix("VpcId");
    if let Some(var_3656) = &input.vpc_id {
        scope_3655.string(var_3656);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3657 = writer.prefix("AssociationId");
    if let Some(var_3658) = &input.association_id {
        scope_3657.string(var_3658);
    }
    #[allow(unused_mut)]
    let mut scope_3659 = writer.prefix("PublicIp");
    if let Some(var_3660) = &input.public_ip {
        scope_3659.string(var_3660);
    }
    #[allow(unused_mut)]
    let mut scope_3661 = writer.prefix("DryRun");
    if let Some(var_3662) = &input.dry_run {
        scope_3661.boolean(*var_3662);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3663 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3664) = &input.client_vpn_endpoint_id {
        scope_3663.string(var_3664);
    }
    #[allow(unused_mut)]
    let mut scope_3665 = writer.prefix("AssociationId");
    if let Some(var_3666) = &input.association_id {
        scope_3665.string(var_3666);
    }
    #[allow(unused_mut)]
    let mut scope_3667 = writer.prefix("DryRun");
    if let Some(var_3668) = &input.dry_run {
        scope_3667.boolean(*var_3668);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3669 = writer.prefix("CertificateArn");
    if let Some(var_3670) = &input.certificate_arn {
        scope_3669.string(var_3670);
    }
    #[allow(unused_mut)]
    let mut scope_3671 = writer.prefix("RoleArn");
    if let Some(var_3672) = &input.role_arn {
        scope_3671.string(var_3672);
    }
    #[allow(unused_mut)]
    let mut scope_3673 = writer.prefix("DryRun");
    if let Some(var_3674) = &input.dry_run {
        scope_3673.boolean(*var_3674);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3675 = writer.prefix("AssociationId");
    if let Some(var_3676) = &input.association_id {
        scope_3675.string(var_3676);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_instance_event_window(
    input: &crate::input::DisassociateInstanceEventWindowInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3677 = writer.prefix("DryRun");
    if let Some(var_3678) = &input.dry_run {
        scope_3677.boolean(*var_3678);
    }
    #[allow(unused_mut)]
    let mut scope_3679 = writer.prefix("InstanceEventWindowId");
    if let Some(var_3680) = &input.instance_event_window_id {
        scope_3679.string(var_3680);
    }
    #[allow(unused_mut)]
    let mut scope_3681 = writer.prefix("AssociationTarget");
    if let Some(var_3682) = &input.association_target {
        crate::query_ser::serialize_structure_instance_event_window_disassociation_request(
            scope_3681, var_3682,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3683 = writer.prefix("AssociationId");
    if let Some(var_3684) = &input.association_id {
        scope_3683.string(var_3684);
    }
    #[allow(unused_mut)]
    let mut scope_3685 = writer.prefix("DryRun");
    if let Some(var_3686) = &input.dry_run {
        scope_3685.boolean(*var_3686);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3687 = writer.prefix("AssociationId");
    if let Some(var_3688) = &input.association_id {
        scope_3687.string(var_3688);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3689 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_3690) = &input.transit_gateway_multicast_domain_id {
        scope_3689.string(var_3690);
    }
    #[allow(unused_mut)]
    let mut scope_3691 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3692) = &input.transit_gateway_attachment_id {
        scope_3691.string(var_3692);
    }
    #[allow(unused_mut)]
    let mut scope_3693 = writer.prefix("SubnetIds");
    if let Some(var_3694) = &input.subnet_ids {
        let mut list_3696 = scope_3693.start_list(true, Some("item"));
        for item_3695 in var_3694 {
            #[allow(unused_mut)]
            let mut entry_3697 = list_3696.entry();
            entry_3697.string(item_3695);
        }
        list_3696.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3698 = writer.prefix("DryRun");
    if let Some(var_3699) = &input.dry_run {
        scope_3698.boolean(*var_3699);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3700 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3701) = &input.transit_gateway_route_table_id {
        scope_3700.string(var_3701);
    }
    #[allow(unused_mut)]
    let mut scope_3702 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3703) = &input.transit_gateway_attachment_id {
        scope_3702.string(var_3703);
    }
    #[allow(unused_mut)]
    let mut scope_3704 = writer.prefix("DryRun");
    if let Some(var_3705) = &input.dry_run {
        scope_3704.boolean(*var_3705);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_trunk_interface(
    input: &crate::input::DisassociateTrunkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3706 = writer.prefix("AssociationId");
    if let Some(var_3707) = &input.association_id {
        scope_3706.string(var_3707);
    }
    #[allow(unused_mut)]
    let mut scope_3708 = writer.prefix("ClientToken");
    if let Some(var_3709) = &input.client_token {
        scope_3708.string(var_3709);
    }
    #[allow(unused_mut)]
    let mut scope_3710 = writer.prefix("DryRun");
    if let Some(var_3711) = &input.dry_run {
        scope_3710.boolean(*var_3711);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3712 = writer.prefix("AssociationId");
    if let Some(var_3713) = &input.association_id {
        scope_3712.string(var_3713);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3714 = writer.prefix("DryRun");
    if let Some(var_3715) = &input.dry_run {
        scope_3714.boolean(*var_3715);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3716 = writer.prefix("AvailabilityZone");
    if let Some(var_3717) = &input.availability_zones {
        let mut list_3719 = scope_3716.start_list(true, Some("AvailabilityZone"));
        for item_3718 in var_3717 {
            #[allow(unused_mut)]
            let mut entry_3720 = list_3719.entry();
            entry_3720.string(item_3718);
        }
        list_3719.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3721 = writer.prefix("SourceSnapshotId");
    if let Some(var_3722) = &input.source_snapshot_ids {
        let mut list_3724 = scope_3721.start_list(true, Some("SnapshotId"));
        for item_3723 in var_3722 {
            #[allow(unused_mut)]
            let mut entry_3725 = list_3724.entry();
            entry_3725.string(item_3723);
        }
        list_3724.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3726 = writer.prefix("DryRun");
    if let Some(var_3727) = &input.dry_run {
        scope_3726.boolean(*var_3727);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_image_deprecation(
    input: &crate::input::EnableImageDeprecationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3728 = writer.prefix("ImageId");
    if let Some(var_3729) = &input.image_id {
        scope_3728.string(var_3729);
    }
    #[allow(unused_mut)]
    let mut scope_3730 = writer.prefix("DeprecateAt");
    if let Some(var_3731) = &input.deprecate_at {
        scope_3730.instant(var_3731, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_3732 = writer.prefix("DryRun");
    if let Some(var_3733) = &input.dry_run {
        scope_3732.boolean(*var_3733);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3734 = writer.prefix("DryRun");
    if let Some(var_3735) = &input.dry_run {
        scope_3734.boolean(*var_3735);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3736 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3737) = &input.transit_gateway_route_table_id {
        scope_3736.string(var_3737);
    }
    #[allow(unused_mut)]
    let mut scope_3738 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3739) = &input.transit_gateway_attachment_id {
        scope_3738.string(var_3739);
    }
    #[allow(unused_mut)]
    let mut scope_3740 = writer.prefix("DryRun");
    if let Some(var_3741) = &input.dry_run {
        scope_3740.boolean(*var_3741);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3742 = writer.prefix("GatewayId");
    if let Some(var_3743) = &input.gateway_id {
        scope_3742.string(var_3743);
    }
    #[allow(unused_mut)]
    let mut scope_3744 = writer.prefix("RouteTableId");
    if let Some(var_3745) = &input.route_table_id {
        scope_3744.string(var_3745);
    }
    #[allow(unused_mut)]
    let mut scope_3746 = writer.prefix("DryRun");
    if let Some(var_3747) = &input.dry_run {
        scope_3746.boolean(*var_3747);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIoInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3748 = writer.prefix("DryRun");
    if let Some(var_3749) = &input.dry_run {
        scope_3748.boolean(*var_3749);
    }
    #[allow(unused_mut)]
    let mut scope_3750 = writer.prefix("VolumeId");
    if let Some(var_3751) = &input.volume_id {
        scope_3750.string(var_3751);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3752 = writer.prefix("DryRun");
    if let Some(var_3753) = &input.dry_run {
        scope_3752.boolean(*var_3753);
    }
    #[allow(unused_mut)]
    let mut scope_3754 = writer.prefix("VpcId");
    if let Some(var_3755) = &input.vpc_id {
        scope_3754.string(var_3755);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3756 = writer.prefix("VpcId");
    if let Some(var_3757) = &input.vpc_id {
        scope_3756.string(var_3757);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3758 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3759) = &input.client_vpn_endpoint_id {
        scope_3758.string(var_3759);
    }
    #[allow(unused_mut)]
    let mut scope_3760 = writer.prefix("DryRun");
    if let Some(var_3761) = &input.dry_run {
        scope_3760.boolean(*var_3761);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3762 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3763) = &input.client_vpn_endpoint_id {
        scope_3762.string(var_3763);
    }
    #[allow(unused_mut)]
    let mut scope_3764 = writer.prefix("DryRun");
    if let Some(var_3765) = &input.dry_run {
        scope_3764.boolean(*var_3765);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3766 = writer.prefix("ClientToken");
    if let Some(var_3767) = &input.client_token {
        scope_3766.string(var_3767);
    }
    #[allow(unused_mut)]
    let mut scope_3768 = writer.prefix("Description");
    if let Some(var_3769) = &input.description {
        scope_3768.string(var_3769);
    }
    #[allow(unused_mut)]
    let mut scope_3770 = writer.prefix("DiskImageFormat");
    if let Some(var_3771) = &input.disk_image_format {
        scope_3770.string(var_3771.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3772 = writer.prefix("DryRun");
    if let Some(var_3773) = &input.dry_run {
        scope_3772.boolean(*var_3773);
    }
    #[allow(unused_mut)]
    let mut scope_3774 = writer.prefix("ImageId");
    if let Some(var_3775) = &input.image_id {
        scope_3774.string(var_3775);
    }
    #[allow(unused_mut)]
    let mut scope_3776 = writer.prefix("S3ExportLocation");
    if let Some(var_3777) = &input.s3_export_location {
        crate::query_ser::serialize_structure_export_task_s3_location_request(scope_3776, var_3777);
    }
    #[allow(unused_mut)]
    let mut scope_3778 = writer.prefix("RoleName");
    if let Some(var_3779) = &input.role_name {
        scope_3778.string(var_3779);
    }
    #[allow(unused_mut)]
    let mut scope_3780 = writer.prefix("TagSpecification");
    if let Some(var_3781) = &input.tag_specifications {
        let mut list_3783 = scope_3780.start_list(true, Some("item"));
        for item_3782 in var_3781 {
            #[allow(unused_mut)]
            let mut entry_3784 = list_3783.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_3784, item_3782);
        }
        list_3783.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3785 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3786) = &input.transit_gateway_route_table_id {
        scope_3785.string(var_3786);
    }
    #[allow(unused_mut)]
    let mut scope_3787 = writer.prefix("Filter");
    if let Some(var_3788) = &input.filters {
        let mut list_3790 = scope_3787.start_list(true, Some("Filter"));
        for item_3789 in var_3788 {
            #[allow(unused_mut)]
            let mut entry_3791 = list_3790.entry();
            crate::query_ser::serialize_structure_filter(entry_3791, item_3789);
        }
        list_3790.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3792 = writer.prefix("S3Bucket");
    if let Some(var_3793) = &input.s3_bucket {
        scope_3792.string(var_3793);
    }
    #[allow(unused_mut)]
    let mut scope_3794 = writer.prefix("DryRun");
    if let Some(var_3795) = &input.dry_run {
        scope_3794.boolean(*var_3795);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3796 = writer.prefix("CertificateArn");
    if let Some(var_3797) = &input.certificate_arn {
        scope_3796.string(var_3797);
    }
    #[allow(unused_mut)]
    let mut scope_3798 = writer.prefix("DryRun");
    if let Some(var_3799) = &input.dry_run {
        scope_3798.boolean(*var_3799);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3800 = writer.prefix("PoolId");
    if let Some(var_3801) = &input.pool_id {
        scope_3800.string(var_3801);
    }
    #[allow(unused_mut)]
    let mut scope_3802 = writer.prefix("NextToken");
    if let Some(var_3803) = &input.next_token {
        scope_3802.string(var_3803);
    }
    #[allow(unused_mut)]
    let mut scope_3804 = writer.prefix("MaxResults");
    if let Some(var_3805) = &input.max_results {
        scope_3804.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3805).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3806 = writer.prefix("DryRun");
    if let Some(var_3807) = &input.dry_run {
        scope_3806.boolean(*var_3807);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3808 = writer.prefix("CapacityReservationId");
    if let Some(var_3809) = &input.capacity_reservation_id {
        scope_3808.string(var_3809);
    }
    #[allow(unused_mut)]
    let mut scope_3810 = writer.prefix("NextToken");
    if let Some(var_3811) = &input.next_token {
        scope_3810.string(var_3811);
    }
    #[allow(unused_mut)]
    let mut scope_3812 = writer.prefix("MaxResults");
    if let Some(var_3813) = &input.max_results {
        scope_3812.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3813).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3814 = writer.prefix("DryRun");
    if let Some(var_3815) = &input.dry_run {
        scope_3814.boolean(*var_3815);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3816 = writer.prefix("PoolId");
    if let Some(var_3817) = &input.pool_id {
        scope_3816.string(var_3817);
    }
    #[allow(unused_mut)]
    let mut scope_3818 = writer.prefix("Filter");
    if let Some(var_3819) = &input.filters {
        let mut list_3821 = scope_3818.start_list(true, Some("Filter"));
        for item_3820 in var_3819 {
            #[allow(unused_mut)]
            let mut entry_3822 = list_3821.entry();
            crate::query_ser::serialize_structure_filter(entry_3822, item_3820);
        }
        list_3821.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3823 = writer.prefix("MaxResults");
    if let Some(var_3824) = &input.max_results {
        scope_3823.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3824).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3825 = writer.prefix("NextToken");
    if let Some(var_3826) = &input.next_token {
        scope_3825.string(var_3826);
    }
    #[allow(unused_mut)]
    let mut scope_3827 = writer.prefix("DryRun");
    if let Some(var_3828) = &input.dry_run {
        scope_3827.boolean(*var_3828);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3829 = writer.prefix("InstanceId");
    if let Some(var_3830) = &input.instance_id {
        scope_3829.string(var_3830);
    }
    #[allow(unused_mut)]
    let mut scope_3831 = writer.prefix("DryRun");
    if let Some(var_3832) = &input.dry_run {
        scope_3831.boolean(*var_3832);
    }
    #[allow(unused_mut)]
    let mut scope_3833 = writer.prefix("Latest");
    if let Some(var_3834) = &input.latest {
        scope_3833.boolean(*var_3834);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3835 = writer.prefix("DryRun");
    if let Some(var_3836) = &input.dry_run {
        scope_3835.boolean(*var_3836);
    }
    #[allow(unused_mut)]
    let mut scope_3837 = writer.prefix("InstanceId");
    if let Some(var_3838) = &input.instance_id {
        scope_3837.string(var_3838);
    }
    #[allow(unused_mut)]
    let mut scope_3839 = writer.prefix("WakeUp");
    if let Some(var_3840) = &input.wake_up {
        scope_3839.boolean(*var_3840);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3841 = writer.prefix("DryRun");
    if let Some(var_3842) = &input.dry_run {
        scope_3841.boolean(*var_3842);
    }
    #[allow(unused_mut)]
    let mut scope_3843 = writer.prefix("InstanceFamily");
    if let Some(var_3844) = &input.instance_family {
        scope_3843.string(var_3844.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3845 = writer.prefix("DryRun");
    if let Some(var_3846) = &input.dry_run {
        scope_3845.boolean(*var_3846);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3847 = writer.prefix("DryRun");
    if let Some(var_3848) = &input.dry_run {
        scope_3847.boolean(*var_3848);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetFlowLogsIntegrationTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3849 = writer.prefix("DryRun");
    if let Some(var_3850) = &input.dry_run {
        scope_3849.boolean(*var_3850);
    }
    #[allow(unused_mut)]
    let mut scope_3851 = writer.prefix("FlowLogId");
    if let Some(var_3852) = &input.flow_log_id {
        scope_3851.string(var_3852);
    }
    #[allow(unused_mut)]
    let mut scope_3853 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_3854) = &input.config_delivery_s3_destination_arn {
        scope_3853.string(var_3854);
    }
    #[allow(unused_mut)]
    let mut scope_3855 = writer.prefix("IntegrateService");
    if let Some(var_3856) = &input.integrate_services {
        crate::query_ser::serialize_structure_integrate_services(scope_3855, var_3856);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetGroupsForCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3857 = writer.prefix("CapacityReservationId");
    if let Some(var_3858) = &input.capacity_reservation_id {
        scope_3857.string(var_3858);
    }
    #[allow(unused_mut)]
    let mut scope_3859 = writer.prefix("NextToken");
    if let Some(var_3860) = &input.next_token {
        scope_3859.string(var_3860);
    }
    #[allow(unused_mut)]
    let mut scope_3861 = writer.prefix("MaxResults");
    if let Some(var_3862) = &input.max_results {
        scope_3861.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3862).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3863 = writer.prefix("DryRun");
    if let Some(var_3864) = &input.dry_run {
        scope_3863.boolean(*var_3864);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetHostReservationPurchasePreview", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3865 = writer.prefix("HostIdSet");
    if let Some(var_3866) = &input.host_id_set {
        let mut list_3868 = scope_3865.start_list(true, Some("item"));
        for item_3867 in var_3866 {
            #[allow(unused_mut)]
            let mut entry_3869 = list_3868.entry();
            entry_3869.string(item_3867);
        }
        list_3868.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3870 = writer.prefix("OfferingId");
    if let Some(var_3871) = &input.offering_id {
        scope_3870.string(var_3871);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3872 = writer.prefix("DryRun");
    if let Some(var_3873) = &input.dry_run {
        scope_3872.boolean(*var_3873);
    }
    #[allow(unused_mut)]
    let mut scope_3874 = writer.prefix("InstanceId");
    if let Some(var_3875) = &input.instance_id {
        scope_3874.string(var_3875);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListAssociations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3876 = writer.prefix("DryRun");
    if let Some(var_3877) = &input.dry_run {
        scope_3876.boolean(*var_3877);
    }
    #[allow(unused_mut)]
    let mut scope_3878 = writer.prefix("PrefixListId");
    if let Some(var_3879) = &input.prefix_list_id {
        scope_3878.string(var_3879);
    }
    #[allow(unused_mut)]
    let mut scope_3880 = writer.prefix("MaxResults");
    if let Some(var_3881) = &input.max_results {
        scope_3880.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3881).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3882 = writer.prefix("NextToken");
    if let Some(var_3883) = &input.next_token {
        scope_3882.string(var_3883);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3884 = writer.prefix("DryRun");
    if let Some(var_3885) = &input.dry_run {
        scope_3884.boolean(*var_3885);
    }
    #[allow(unused_mut)]
    let mut scope_3886 = writer.prefix("PrefixListId");
    if let Some(var_3887) = &input.prefix_list_id {
        scope_3886.string(var_3887);
    }
    #[allow(unused_mut)]
    let mut scope_3888 = writer.prefix("TargetVersion");
    if let Some(var_3889) = &input.target_version {
        scope_3888.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3889).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3890 = writer.prefix("MaxResults");
    if let Some(var_3891) = &input.max_results {
        scope_3890.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3891).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3892 = writer.prefix("NextToken");
    if let Some(var_3893) = &input.next_token {
        scope_3892.string(var_3893);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3894 = writer.prefix("InstanceId");
    if let Some(var_3895) = &input.instance_id {
        scope_3894.string(var_3895);
    }
    #[allow(unused_mut)]
    let mut scope_3896 = writer.prefix("DryRun");
    if let Some(var_3897) = &input.dry_run {
        scope_3896.boolean(*var_3897);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetReservedInstancesExchangeQuote", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3898 = writer.prefix("DryRun");
    if let Some(var_3899) = &input.dry_run {
        scope_3898.boolean(*var_3899);
    }
    #[allow(unused_mut)]
    let mut scope_3900 = writer.prefix("ReservedInstanceId");
    if let Some(var_3901) = &input.reserved_instance_ids {
        let mut list_3903 = scope_3900.start_list(true, Some("ReservedInstanceId"));
        for item_3902 in var_3901 {
            #[allow(unused_mut)]
            let mut entry_3904 = list_3903.entry();
            entry_3904.string(item_3902);
        }
        list_3903.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3905 = writer.prefix("TargetConfiguration");
    if let Some(var_3906) = &input.target_configurations {
        let mut list_3908 = scope_3905.start_list(true, Some("TargetConfigurationRequest"));
        for item_3907 in var_3906 {
            #[allow(unused_mut)]
            let mut entry_3909 = list_3908.entry();
            crate::query_ser::serialize_structure_target_configuration_request(
                entry_3909, item_3907,
            );
        }
        list_3908.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3910 = writer.prefix("DryRun");
    if let Some(var_3911) = &input.dry_run {
        scope_3910.boolean(*var_3911);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_subnet_cidr_reservations(
    input: &crate::input::GetSubnetCidrReservationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3912 = writer.prefix("Filter");
    if let Some(var_3913) = &input.filters {
        let mut list_3915 = scope_3912.start_list(true, Some("Filter"));
        for item_3914 in var_3913 {
            #[allow(unused_mut)]
            let mut entry_3916 = list_3915.entry();
            crate::query_ser::serialize_structure_filter(entry_3916, item_3914);
        }
        list_3915.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3917 = writer.prefix("SubnetId");
    if let Some(var_3918) = &input.subnet_id {
        scope_3917.string(var_3918);
    }
    #[allow(unused_mut)]
    let mut scope_3919 = writer.prefix("DryRun");
    if let Some(var_3920) = &input.dry_run {
        scope_3919.boolean(*var_3920);
    }
    #[allow(unused_mut)]
    let mut scope_3921 = writer.prefix("NextToken");
    if let Some(var_3922) = &input.next_token {
        scope_3921.string(var_3922);
    }
    #[allow(unused_mut)]
    let mut scope_3923 = writer.prefix("MaxResults");
    if let Some(var_3924) = &input.max_results {
        scope_3923.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3924).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3925 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3926) = &input.transit_gateway_attachment_id {
        scope_3925.string(var_3926);
    }
    #[allow(unused_mut)]
    let mut scope_3927 = writer.prefix("Filter");
    if let Some(var_3928) = &input.filters {
        let mut list_3930 = scope_3927.start_list(true, Some("Filter"));
        for item_3929 in var_3928 {
            #[allow(unused_mut)]
            let mut entry_3931 = list_3930.entry();
            crate::query_ser::serialize_structure_filter(entry_3931, item_3929);
        }
        list_3930.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3932 = writer.prefix("MaxResults");
    if let Some(var_3933) = &input.max_results {
        scope_3932.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3933).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3934 = writer.prefix("NextToken");
    if let Some(var_3935) = &input.next_token {
        scope_3934.string(var_3935);
    }
    #[allow(unused_mut)]
    let mut scope_3936 = writer.prefix("DryRun");
    if let Some(var_3937) = &input.dry_run {
        scope_3936.boolean(*var_3937);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3938 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_3939) = &input.transit_gateway_multicast_domain_id {
        scope_3938.string(var_3939);
    }
    #[allow(unused_mut)]
    let mut scope_3940 = writer.prefix("Filter");
    if let Some(var_3941) = &input.filters {
        let mut list_3943 = scope_3940.start_list(true, Some("Filter"));
        for item_3942 in var_3941 {
            #[allow(unused_mut)]
            let mut entry_3944 = list_3943.entry();
            crate::query_ser::serialize_structure_filter(entry_3944, item_3942);
        }
        list_3943.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3945 = writer.prefix("MaxResults");
    if let Some(var_3946) = &input.max_results {
        scope_3945.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3946).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3947 = writer.prefix("NextToken");
    if let Some(var_3948) = &input.next_token {
        scope_3947.string(var_3948);
    }
    #[allow(unused_mut)]
    let mut scope_3949 = writer.prefix("DryRun");
    if let Some(var_3950) = &input.dry_run {
        scope_3949.boolean(*var_3950);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3951 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3952) = &input.transit_gateway_route_table_id {
        scope_3951.string(var_3952);
    }
    #[allow(unused_mut)]
    let mut scope_3953 = writer.prefix("Filter");
    if let Some(var_3954) = &input.filters {
        let mut list_3956 = scope_3953.start_list(true, Some("Filter"));
        for item_3955 in var_3954 {
            #[allow(unused_mut)]
            let mut entry_3957 = list_3956.entry();
            crate::query_ser::serialize_structure_filter(entry_3957, item_3955);
        }
        list_3956.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3958 = writer.prefix("MaxResults");
    if let Some(var_3959) = &input.max_results {
        scope_3958.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3959).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3960 = writer.prefix("NextToken");
    if let Some(var_3961) = &input.next_token {
        scope_3960.string(var_3961);
    }
    #[allow(unused_mut)]
    let mut scope_3962 = writer.prefix("DryRun");
    if let Some(var_3963) = &input.dry_run {
        scope_3962.boolean(*var_3963);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3964 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3965) = &input.transit_gateway_route_table_id {
        scope_3964.string(var_3965);
    }
    #[allow(unused_mut)]
    let mut scope_3966 = writer.prefix("Filter");
    if let Some(var_3967) = &input.filters {
        let mut list_3969 = scope_3966.start_list(true, Some("Filter"));
        for item_3968 in var_3967 {
            #[allow(unused_mut)]
            let mut entry_3970 = list_3969.entry();
            crate::query_ser::serialize_structure_filter(entry_3970, item_3968);
        }
        list_3969.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3971 = writer.prefix("MaxResults");
    if let Some(var_3972) = &input.max_results {
        scope_3971.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3972).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3973 = writer.prefix("NextToken");
    if let Some(var_3974) = &input.next_token {
        scope_3973.string(var_3974);
    }
    #[allow(unused_mut)]
    let mut scope_3975 = writer.prefix("DryRun");
    if let Some(var_3976) = &input.dry_run {
        scope_3975.boolean(*var_3976);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3977 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3978) = &input.transit_gateway_route_table_id {
        scope_3977.string(var_3978);
    }
    #[allow(unused_mut)]
    let mut scope_3979 = writer.prefix("Filter");
    if let Some(var_3980) = &input.filters {
        let mut list_3982 = scope_3979.start_list(true, Some("Filter"));
        for item_3981 in var_3980 {
            #[allow(unused_mut)]
            let mut entry_3983 = list_3982.entry();
            crate::query_ser::serialize_structure_filter(entry_3983, item_3981);
        }
        list_3982.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3984 = writer.prefix("MaxResults");
    if let Some(var_3985) = &input.max_results {
        scope_3984.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3985).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3986 = writer.prefix("NextToken");
    if let Some(var_3987) = &input.next_token {
        scope_3986.string(var_3987);
    }
    #[allow(unused_mut)]
    let mut scope_3988 = writer.prefix("DryRun");
    if let Some(var_3989) = &input.dry_run {
        scope_3988.boolean(*var_3989);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3990 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3991) = &input.client_vpn_endpoint_id {
        scope_3990.string(var_3991);
    }
    #[allow(unused_mut)]
    let mut scope_3992 = writer.prefix("CertificateRevocationList");
    if let Some(var_3993) = &input.certificate_revocation_list {
        scope_3992.string(var_3993);
    }
    #[allow(unused_mut)]
    let mut scope_3994 = writer.prefix("DryRun");
    if let Some(var_3995) = &input.dry_run {
        scope_3994.boolean(*var_3995);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3996 = writer.prefix("Architecture");
    if let Some(var_3997) = &input.architecture {
        scope_3996.string(var_3997);
    }
    #[allow(unused_mut)]
    let mut scope_3998 = writer.prefix("ClientData");
    if let Some(var_3999) = &input.client_data {
        crate::query_ser::serialize_structure_client_data(scope_3998, var_3999);
    }
    #[allow(unused_mut)]
    let mut scope_4000 = writer.prefix("ClientToken");
    if let Some(var_4001) = &input.client_token {
        scope_4000.string(var_4001);
    }
    #[allow(unused_mut)]
    let mut scope_4002 = writer.prefix("Description");
    if let Some(var_4003) = &input.description {
        scope_4002.string(var_4003);
    }
    #[allow(unused_mut)]
    let mut scope_4004 = writer.prefix("DiskContainer");
    if let Some(var_4005) = &input.disk_containers {
        let mut list_4007 = scope_4004.start_list(true, Some("item"));
        for item_4006 in var_4005 {
            #[allow(unused_mut)]
            let mut entry_4008 = list_4007.entry();
            crate::query_ser::serialize_structure_image_disk_container(entry_4008, item_4006);
        }
        list_4007.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4009 = writer.prefix("DryRun");
    if let Some(var_4010) = &input.dry_run {
        scope_4009.boolean(*var_4010);
    }
    #[allow(unused_mut)]
    let mut scope_4011 = writer.prefix("Encrypted");
    if let Some(var_4012) = &input.encrypted {
        scope_4011.boolean(*var_4012);
    }
    #[allow(unused_mut)]
    let mut scope_4013 = writer.prefix("Hypervisor");
    if let Some(var_4014) = &input.hypervisor {
        scope_4013.string(var_4014);
    }
    #[allow(unused_mut)]
    let mut scope_4015 = writer.prefix("KmsKeyId");
    if let Some(var_4016) = &input.kms_key_id {
        scope_4015.string(var_4016);
    }
    #[allow(unused_mut)]
    let mut scope_4017 = writer.prefix("LicenseType");
    if let Some(var_4018) = &input.license_type {
        scope_4017.string(var_4018);
    }
    #[allow(unused_mut)]
    let mut scope_4019 = writer.prefix("Platform");
    if let Some(var_4020) = &input.platform {
        scope_4019.string(var_4020);
    }
    #[allow(unused_mut)]
    let mut scope_4021 = writer.prefix("RoleName");
    if let Some(var_4022) = &input.role_name {
        scope_4021.string(var_4022);
    }
    #[allow(unused_mut)]
    let mut scope_4023 = writer.prefix("LicenseSpecifications");
    if let Some(var_4024) = &input.license_specifications {
        let mut list_4026 = scope_4023.start_list(true, Some("item"));
        for item_4025 in var_4024 {
            #[allow(unused_mut)]
            let mut entry_4027 = list_4026.entry();
            crate::query_ser::serialize_structure_import_image_license_configuration_request(
                entry_4027, item_4025,
            );
        }
        list_4026.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4028 = writer.prefix("TagSpecification");
    if let Some(var_4029) = &input.tag_specifications {
        let mut list_4031 = scope_4028.start_list(true, Some("item"));
        for item_4030 in var_4029 {
            #[allow(unused_mut)]
            let mut entry_4032 = list_4031.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_4032, item_4030);
        }
        list_4031.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4033 = writer.prefix("Description");
    if let Some(var_4034) = &input.description {
        scope_4033.string(var_4034);
    }
    #[allow(unused_mut)]
    let mut scope_4035 = writer.prefix("DiskImage");
    if let Some(var_4036) = &input.disk_images {
        let mut list_4038 = scope_4035.start_list(true, None);
        for item_4037 in var_4036 {
            #[allow(unused_mut)]
            let mut entry_4039 = list_4038.entry();
            crate::query_ser::serialize_structure_disk_image(entry_4039, item_4037);
        }
        list_4038.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4040 = writer.prefix("DryRun");
    if let Some(var_4041) = &input.dry_run {
        scope_4040.boolean(*var_4041);
    }
    #[allow(unused_mut)]
    let mut scope_4042 = writer.prefix("LaunchSpecification");
    if let Some(var_4043) = &input.launch_specification {
        crate::query_ser::serialize_structure_import_instance_launch_specification(
            scope_4042, var_4043,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4044 = writer.prefix("Platform");
    if let Some(var_4045) = &input.platform {
        scope_4044.string(var_4045.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4046 = writer.prefix("DryRun");
    if let Some(var_4047) = &input.dry_run {
        scope_4046.boolean(*var_4047);
    }
    #[allow(unused_mut)]
    let mut scope_4048 = writer.prefix("KeyName");
    if let Some(var_4049) = &input.key_name {
        scope_4048.string(var_4049);
    }
    #[allow(unused_mut)]
    let mut scope_4050 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4051) = &input.public_key_material {
        scope_4050.string(&smithy_types::base64::encode(var_4051));
    }
    #[allow(unused_mut)]
    let mut scope_4052 = writer.prefix("TagSpecification");
    if let Some(var_4053) = &input.tag_specifications {
        let mut list_4055 = scope_4052.start_list(true, Some("item"));
        for item_4054 in var_4053 {
            #[allow(unused_mut)]
            let mut entry_4056 = list_4055.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_4056, item_4054);
        }
        list_4055.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4057 = writer.prefix("ClientData");
    if let Some(var_4058) = &input.client_data {
        crate::query_ser::serialize_structure_client_data(scope_4057, var_4058);
    }
    #[allow(unused_mut)]
    let mut scope_4059 = writer.prefix("ClientToken");
    if let Some(var_4060) = &input.client_token {
        scope_4059.string(var_4060);
    }
    #[allow(unused_mut)]
    let mut scope_4061 = writer.prefix("Description");
    if let Some(var_4062) = &input.description {
        scope_4061.string(var_4062);
    }
    #[allow(unused_mut)]
    let mut scope_4063 = writer.prefix("DiskContainer");
    if let Some(var_4064) = &input.disk_container {
        crate::query_ser::serialize_structure_snapshot_disk_container(scope_4063, var_4064);
    }
    #[allow(unused_mut)]
    let mut scope_4065 = writer.prefix("DryRun");
    if let Some(var_4066) = &input.dry_run {
        scope_4065.boolean(*var_4066);
    }
    #[allow(unused_mut)]
    let mut scope_4067 = writer.prefix("Encrypted");
    if let Some(var_4068) = &input.encrypted {
        scope_4067.boolean(*var_4068);
    }
    #[allow(unused_mut)]
    let mut scope_4069 = writer.prefix("KmsKeyId");
    if let Some(var_4070) = &input.kms_key_id {
        scope_4069.string(var_4070);
    }
    #[allow(unused_mut)]
    let mut scope_4071 = writer.prefix("RoleName");
    if let Some(var_4072) = &input.role_name {
        scope_4071.string(var_4072);
    }
    #[allow(unused_mut)]
    let mut scope_4073 = writer.prefix("TagSpecification");
    if let Some(var_4074) = &input.tag_specifications {
        let mut list_4076 = scope_4073.start_list(true, Some("item"));
        for item_4075 in var_4074 {
            #[allow(unused_mut)]
            let mut entry_4077 = list_4076.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_4077, item_4075);
        }
        list_4076.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4078 = writer.prefix("AvailabilityZone");
    if let Some(var_4079) = &input.availability_zone {
        scope_4078.string(var_4079);
    }
    #[allow(unused_mut)]
    let mut scope_4080 = writer.prefix("Description");
    if let Some(var_4081) = &input.description {
        scope_4080.string(var_4081);
    }
    #[allow(unused_mut)]
    let mut scope_4082 = writer.prefix("DryRun");
    if let Some(var_4083) = &input.dry_run {
        scope_4082.boolean(*var_4083);
    }
    #[allow(unused_mut)]
    let mut scope_4084 = writer.prefix("Image");
    if let Some(var_4085) = &input.image {
        crate::query_ser::serialize_structure_disk_image_detail(scope_4084, var_4085);
    }
    #[allow(unused_mut)]
    let mut scope_4086 = writer.prefix("Volume");
    if let Some(var_4087) = &input.volume {
        crate::query_ser::serialize_structure_volume_detail(scope_4086, var_4087);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4088 = writer.prefix("AllocationId");
    if let Some(var_4089) = &input.allocation_id {
        scope_4088.string(var_4089);
    }
    #[allow(unused_mut)]
    let mut scope_4090 = writer.prefix("DomainName");
    if let Some(var_4091) = &input.domain_name {
        scope_4090.string(var_4091);
    }
    #[allow(unused_mut)]
    let mut scope_4092 = writer.prefix("DryRun");
    if let Some(var_4093) = &input.dry_run {
        scope_4092.boolean(*var_4093);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4094 = writer.prefix("GroupName");
    if let Some(var_4095) = &input.group_name {
        scope_4094.string(var_4095);
    }
    #[allow(unused_mut)]
    let mut scope_4096 = writer.prefix("OptInStatus");
    if let Some(var_4097) = &input.opt_in_status {
        scope_4096.string(var_4097.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4098 = writer.prefix("DryRun");
    if let Some(var_4099) = &input.dry_run {
        scope_4098.boolean(*var_4099);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4100 = writer.prefix("CapacityReservationId");
    if let Some(var_4101) = &input.capacity_reservation_id {
        scope_4100.string(var_4101);
    }
    #[allow(unused_mut)]
    let mut scope_4102 = writer.prefix("InstanceCount");
    if let Some(var_4103) = &input.instance_count {
        scope_4102.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4103).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4104 = writer.prefix("EndDate");
    if let Some(var_4105) = &input.end_date {
        scope_4104.instant(var_4105, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_4106 = writer.prefix("EndDateType");
    if let Some(var_4107) = &input.end_date_type {
        scope_4106.string(var_4107.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4108 = writer.prefix("Accept");
    if let Some(var_4109) = &input.accept {
        scope_4108.boolean(*var_4109);
    }
    #[allow(unused_mut)]
    let mut scope_4110 = writer.prefix("DryRun");
    if let Some(var_4111) = &input.dry_run {
        scope_4110.boolean(*var_4111);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4112 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4113) = &input.client_vpn_endpoint_id {
        scope_4112.string(var_4113);
    }
    #[allow(unused_mut)]
    let mut scope_4114 = writer.prefix("ServerCertificateArn");
    if let Some(var_4115) = &input.server_certificate_arn {
        scope_4114.string(var_4115);
    }
    #[allow(unused_mut)]
    let mut scope_4116 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4117) = &input.connection_log_options {
        crate::query_ser::serialize_structure_connection_log_options(scope_4116, var_4117);
    }
    #[allow(unused_mut)]
    let mut scope_4118 = writer.prefix("DnsServers");
    if let Some(var_4119) = &input.dns_servers {
        crate::query_ser::serialize_structure_dns_servers_options_modify_structure(
            scope_4118, var_4119,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4120 = writer.prefix("VpnPort");
    if let Some(var_4121) = &input.vpn_port {
        scope_4120.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4121).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4122 = writer.prefix("Description");
    if let Some(var_4123) = &input.description {
        scope_4122.string(var_4123);
    }
    #[allow(unused_mut)]
    let mut scope_4124 = writer.prefix("SplitTunnel");
    if let Some(var_4125) = &input.split_tunnel {
        scope_4124.boolean(*var_4125);
    }
    #[allow(unused_mut)]
    let mut scope_4126 = writer.prefix("DryRun");
    if let Some(var_4127) = &input.dry_run {
        scope_4126.boolean(*var_4127);
    }
    #[allow(unused_mut)]
    let mut scope_4128 = writer.prefix("SecurityGroupId");
    if let Some(var_4129) = &input.security_group_ids {
        let mut list_4131 = scope_4128.start_list(true, Some("item"));
        for item_4130 in var_4129 {
            #[allow(unused_mut)]
            let mut entry_4132 = list_4131.entry();
            entry_4132.string(item_4130);
        }
        list_4131.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4133 = writer.prefix("VpcId");
    if let Some(var_4134) = &input.vpc_id {
        scope_4133.string(var_4134);
    }
    #[allow(unused_mut)]
    let mut scope_4135 = writer.prefix("SelfServicePortal");
    if let Some(var_4136) = &input.self_service_portal {
        scope_4135.string(var_4136.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4137 = writer.prefix("ClientConnectOptions");
    if let Some(var_4138) = &input.client_connect_options {
        crate::query_ser::serialize_structure_client_connect_options(scope_4137, var_4138);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4139 = writer.prefix("DryRun");
    if let Some(var_4140) = &input.dry_run {
        scope_4139.boolean(*var_4140);
    }
    #[allow(unused_mut)]
    let mut scope_4141 = writer.prefix("InstanceFamily");
    if let Some(var_4142) = &input.instance_family {
        scope_4141.string(var_4142.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4143 = writer.prefix("CpuCredits");
    if let Some(var_4144) = &input.cpu_credits {
        scope_4143.string(var_4144);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4145 = writer.prefix("KmsKeyId");
    if let Some(var_4146) = &input.kms_key_id {
        scope_4145.string(var_4146);
    }
    #[allow(unused_mut)]
    let mut scope_4147 = writer.prefix("DryRun");
    if let Some(var_4148) = &input.dry_run {
        scope_4147.boolean(*var_4148);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4149 = writer.prefix("DryRun");
    if let Some(var_4150) = &input.dry_run {
        scope_4149.boolean(*var_4150);
    }
    #[allow(unused_mut)]
    let mut scope_4151 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4152) = &input.excess_capacity_termination_policy {
        scope_4151.string(var_4152.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4153 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4154) = &input.launch_template_configs {
        let mut list_4156 = scope_4153.start_list(true, Some("item"));
        for item_4155 in var_4154 {
            #[allow(unused_mut)]
            let mut entry_4157 = list_4156.entry();
            crate::query_ser::serialize_structure_fleet_launch_template_config_request(
                entry_4157, item_4155,
            );
        }
        list_4156.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4158 = writer.prefix("FleetId");
    if let Some(var_4159) = &input.fleet_id {
        scope_4158.string(var_4159);
    }
    #[allow(unused_mut)]
    let mut scope_4160 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4161) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_target_capacity_specification_request(
            scope_4160, var_4161,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4162 = writer.prefix("Context");
    if let Some(var_4163) = &input.context {
        scope_4162.string(var_4163);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4164 = writer.prefix("DryRun");
    if let Some(var_4165) = &input.dry_run {
        scope_4164.boolean(*var_4165);
    }
    #[allow(unused_mut)]
    let mut scope_4166 = writer.prefix("FpgaImageId");
    if let Some(var_4167) = &input.fpga_image_id {
        scope_4166.string(var_4167);
    }
    #[allow(unused_mut)]
    let mut scope_4168 = writer.prefix("Attribute");
    if let Some(var_4169) = &input.attribute {
        scope_4168.string(var_4169.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4170 = writer.prefix("OperationType");
    if let Some(var_4171) = &input.operation_type {
        scope_4170.string(var_4171.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4172 = writer.prefix("UserId");
    if let Some(var_4173) = &input.user_ids {
        let mut list_4175 = scope_4172.start_list(true, Some("UserId"));
        for item_4174 in var_4173 {
            #[allow(unused_mut)]
            let mut entry_4176 = list_4175.entry();
            entry_4176.string(item_4174);
        }
        list_4175.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4177 = writer.prefix("UserGroup");
    if let Some(var_4178) = &input.user_groups {
        let mut list_4180 = scope_4177.start_list(true, Some("UserGroup"));
        for item_4179 in var_4178 {
            #[allow(unused_mut)]
            let mut entry_4181 = list_4180.entry();
            entry_4181.string(item_4179);
        }
        list_4180.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4182 = writer.prefix("ProductCode");
    if let Some(var_4183) = &input.product_codes {
        let mut list_4185 = scope_4182.start_list(true, Some("ProductCode"));
        for item_4184 in var_4183 {
            #[allow(unused_mut)]
            let mut entry_4186 = list_4185.entry();
            entry_4186.string(item_4184);
        }
        list_4185.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4187 = writer.prefix("LoadPermission");
    if let Some(var_4188) = &input.load_permission {
        crate::query_ser::serialize_structure_load_permission_modifications(scope_4187, var_4188);
    }
    #[allow(unused_mut)]
    let mut scope_4189 = writer.prefix("Description");
    if let Some(var_4190) = &input.description {
        scope_4189.string(var_4190);
    }
    #[allow(unused_mut)]
    let mut scope_4191 = writer.prefix("Name");
    if let Some(var_4192) = &input.name {
        scope_4191.string(var_4192);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4193 = writer.prefix("AutoPlacement");
    if let Some(var_4194) = &input.auto_placement {
        scope_4193.string(var_4194.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4195 = writer.prefix("HostId");
    if let Some(var_4196) = &input.host_ids {
        let mut list_4198 = scope_4195.start_list(true, Some("item"));
        for item_4197 in var_4196 {
            #[allow(unused_mut)]
            let mut entry_4199 = list_4198.entry();
            entry_4199.string(item_4197);
        }
        list_4198.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4200 = writer.prefix("HostRecovery");
    if let Some(var_4201) = &input.host_recovery {
        scope_4200.string(var_4201.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4202 = writer.prefix("InstanceType");
    if let Some(var_4203) = &input.instance_type {
        scope_4202.string(var_4203);
    }
    #[allow(unused_mut)]
    let mut scope_4204 = writer.prefix("InstanceFamily");
    if let Some(var_4205) = &input.instance_family {
        scope_4204.string(var_4205);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4206 = writer.prefix("PrincipalArn");
    if let Some(var_4207) = &input.principal_arn {
        scope_4206.string(var_4207);
    }
    #[allow(unused_mut)]
    let mut scope_4208 = writer.prefix("Resource");
    if let Some(var_4209) = &input.resource {
        scope_4208.string(var_4209);
    }
    #[allow(unused_mut)]
    let mut scope_4210 = writer.prefix("UseLongIds");
    if let Some(var_4211) = &input.use_long_ids {
        scope_4210.boolean(*var_4211);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4212 = writer.prefix("Resource");
    if let Some(var_4213) = &input.resource {
        scope_4212.string(var_4213);
    }
    #[allow(unused_mut)]
    let mut scope_4214 = writer.prefix("UseLongIds");
    if let Some(var_4215) = &input.use_long_ids {
        scope_4214.boolean(*var_4215);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4216 = writer.prefix("Attribute");
    if let Some(var_4217) = &input.attribute {
        scope_4216.string(var_4217);
    }
    #[allow(unused_mut)]
    let mut scope_4218 = writer.prefix("Description");
    if let Some(var_4219) = &input.description {
        crate::query_ser::serialize_structure_attribute_value(scope_4218, var_4219);
    }
    #[allow(unused_mut)]
    let mut scope_4220 = writer.prefix("ImageId");
    if let Some(var_4221) = &input.image_id {
        scope_4220.string(var_4221);
    }
    #[allow(unused_mut)]
    let mut scope_4222 = writer.prefix("LaunchPermission");
    if let Some(var_4223) = &input.launch_permission {
        crate::query_ser::serialize_structure_launch_permission_modifications(scope_4222, var_4223);
    }
    #[allow(unused_mut)]
    let mut scope_4224 = writer.prefix("OperationType");
    if let Some(var_4225) = &input.operation_type {
        scope_4224.string(var_4225.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4226 = writer.prefix("ProductCode");
    if let Some(var_4227) = &input.product_codes {
        let mut list_4229 = scope_4226.start_list(true, Some("ProductCode"));
        for item_4228 in var_4227 {
            #[allow(unused_mut)]
            let mut entry_4230 = list_4229.entry();
            entry_4230.string(item_4228);
        }
        list_4229.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4231 = writer.prefix("UserGroup");
    if let Some(var_4232) = &input.user_groups {
        let mut list_4234 = scope_4231.start_list(true, Some("UserGroup"));
        for item_4233 in var_4232 {
            #[allow(unused_mut)]
            let mut entry_4235 = list_4234.entry();
            entry_4235.string(item_4233);
        }
        list_4234.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4236 = writer.prefix("UserId");
    if let Some(var_4237) = &input.user_ids {
        let mut list_4239 = scope_4236.start_list(true, Some("UserId"));
        for item_4238 in var_4237 {
            #[allow(unused_mut)]
            let mut entry_4240 = list_4239.entry();
            entry_4240.string(item_4238);
        }
        list_4239.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4241 = writer.prefix("Value");
    if let Some(var_4242) = &input.value {
        scope_4241.string(var_4242);
    }
    #[allow(unused_mut)]
    let mut scope_4243 = writer.prefix("DryRun");
    if let Some(var_4244) = &input.dry_run {
        scope_4243.boolean(*var_4244);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4245 = writer.prefix("SourceDestCheck");
    if let Some(var_4246) = &input.source_dest_check {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4245, var_4246);
    }
    #[allow(unused_mut)]
    let mut scope_4247 = writer.prefix("Attribute");
    if let Some(var_4248) = &input.attribute {
        scope_4247.string(var_4248.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4249 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4250) = &input.block_device_mappings {
        let mut list_4252 = scope_4249.start_list(true, Some("item"));
        for item_4251 in var_4250 {
            #[allow(unused_mut)]
            let mut entry_4253 = list_4252.entry();
            crate::query_ser::serialize_structure_instance_block_device_mapping_specification(
                entry_4253, item_4251,
            );
        }
        list_4252.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4254 = writer.prefix("DisableApiTermination");
    if let Some(var_4255) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4254, var_4255);
    }
    #[allow(unused_mut)]
    let mut scope_4256 = writer.prefix("DryRun");
    if let Some(var_4257) = &input.dry_run {
        scope_4256.boolean(*var_4257);
    }
    #[allow(unused_mut)]
    let mut scope_4258 = writer.prefix("EbsOptimized");
    if let Some(var_4259) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4258, var_4259);
    }
    #[allow(unused_mut)]
    let mut scope_4260 = writer.prefix("EnaSupport");
    if let Some(var_4261) = &input.ena_support {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4260, var_4261);
    }
    #[allow(unused_mut)]
    let mut scope_4262 = writer.prefix("GroupId");
    if let Some(var_4263) = &input.groups {
        let mut list_4265 = scope_4262.start_list(true, Some("groupId"));
        for item_4264 in var_4263 {
            #[allow(unused_mut)]
            let mut entry_4266 = list_4265.entry();
            entry_4266.string(item_4264);
        }
        list_4265.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4267 = writer.prefix("InstanceId");
    if let Some(var_4268) = &input.instance_id {
        scope_4267.string(var_4268);
    }
    #[allow(unused_mut)]
    let mut scope_4269 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4270) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_attribute_value(scope_4269, var_4270);
    }
    #[allow(unused_mut)]
    let mut scope_4271 = writer.prefix("InstanceType");
    if let Some(var_4272) = &input.instance_type {
        crate::query_ser::serialize_structure_attribute_value(scope_4271, var_4272);
    }
    #[allow(unused_mut)]
    let mut scope_4273 = writer.prefix("Kernel");
    if let Some(var_4274) = &input.kernel {
        crate::query_ser::serialize_structure_attribute_value(scope_4273, var_4274);
    }
    #[allow(unused_mut)]
    let mut scope_4275 = writer.prefix("Ramdisk");
    if let Some(var_4276) = &input.ramdisk {
        crate::query_ser::serialize_structure_attribute_value(scope_4275, var_4276);
    }
    #[allow(unused_mut)]
    let mut scope_4277 = writer.prefix("SriovNetSupport");
    if let Some(var_4278) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_attribute_value(scope_4277, var_4278);
    }
    #[allow(unused_mut)]
    let mut scope_4279 = writer.prefix("UserData");
    if let Some(var_4280) = &input.user_data {
        crate::query_ser::serialize_structure_blob_attribute_value(scope_4279, var_4280);
    }
    #[allow(unused_mut)]
    let mut scope_4281 = writer.prefix("Value");
    if let Some(var_4282) = &input.value {
        scope_4281.string(var_4282);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4283 = writer.prefix("InstanceId");
    if let Some(var_4284) = &input.instance_id {
        scope_4283.string(var_4284);
    }
    #[allow(unused_mut)]
    let mut scope_4285 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_4286) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_capacity_reservation_specification(
            scope_4285, var_4286,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4287 = writer.prefix("DryRun");
    if let Some(var_4288) = &input.dry_run {
        scope_4287.boolean(*var_4288);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4289 = writer.prefix("DryRun");
    if let Some(var_4290) = &input.dry_run {
        scope_4289.boolean(*var_4290);
    }
    #[allow(unused_mut)]
    let mut scope_4291 = writer.prefix("ClientToken");
    if let Some(var_4292) = &input.client_token {
        scope_4291.string(var_4292);
    }
    #[allow(unused_mut)]
    let mut scope_4293 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_4294) = &input.instance_credit_specifications {
        let mut list_4296 = scope_4293.start_list(true, Some("item"));
        for item_4295 in var_4294 {
            #[allow(unused_mut)]
            let mut entry_4297 = list_4296.entry();
            crate::query_ser::serialize_structure_instance_credit_specification_request(
                entry_4297, item_4295,
            );
        }
        list_4296.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4298 = writer.prefix("DryRun");
    if let Some(var_4299) = &input.dry_run {
        scope_4298.boolean(*var_4299);
    }
    #[allow(unused_mut)]
    let mut scope_4300 = writer.prefix("InstanceId");
    if let Some(var_4301) = &input.instance_id {
        scope_4300.string(var_4301);
    }
    #[allow(unused_mut)]
    let mut scope_4302 = writer.prefix("InstanceEventId");
    if let Some(var_4303) = &input.instance_event_id {
        scope_4302.string(var_4303);
    }
    #[allow(unused_mut)]
    let mut scope_4304 = writer.prefix("NotBefore");
    if let Some(var_4305) = &input.not_before {
        scope_4304.instant(var_4305, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_instance_event_window(
    input: &crate::input::ModifyInstanceEventWindowInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4306 = writer.prefix("DryRun");
    if let Some(var_4307) = &input.dry_run {
        scope_4306.boolean(*var_4307);
    }
    #[allow(unused_mut)]
    let mut scope_4308 = writer.prefix("Name");
    if let Some(var_4309) = &input.name {
        scope_4308.string(var_4309);
    }
    #[allow(unused_mut)]
    let mut scope_4310 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4311) = &input.instance_event_window_id {
        scope_4310.string(var_4311);
    }
    #[allow(unused_mut)]
    let mut scope_4312 = writer.prefix("TimeRange");
    if let Some(var_4313) = &input.time_ranges {
        let mut list_4315 = scope_4312.start_list(true, None);
        for item_4314 in var_4313 {
            #[allow(unused_mut)]
            let mut entry_4316 = list_4315.entry();
            crate::query_ser::serialize_structure_instance_event_window_time_range_request(
                entry_4316, item_4314,
            );
        }
        list_4315.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4317 = writer.prefix("CronExpression");
    if let Some(var_4318) = &input.cron_expression {
        scope_4317.string(var_4318);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4319 = writer.prefix("InstanceId");
    if let Some(var_4320) = &input.instance_id {
        scope_4319.string(var_4320);
    }
    #[allow(unused_mut)]
    let mut scope_4321 = writer.prefix("HttpTokens");
    if let Some(var_4322) = &input.http_tokens {
        scope_4321.string(var_4322.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4323 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_4324) = &input.http_put_response_hop_limit {
        scope_4323.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4324).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4325 = writer.prefix("HttpEndpoint");
    if let Some(var_4326) = &input.http_endpoint {
        scope_4325.string(var_4326.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4327 = writer.prefix("DryRun");
    if let Some(var_4328) = &input.dry_run {
        scope_4327.boolean(*var_4328);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4329 = writer.prefix("Affinity");
    if let Some(var_4330) = &input.affinity {
        scope_4329.string(var_4330.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4331 = writer.prefix("GroupName");
    if let Some(var_4332) = &input.group_name {
        scope_4331.string(var_4332);
    }
    #[allow(unused_mut)]
    let mut scope_4333 = writer.prefix("HostId");
    if let Some(var_4334) = &input.host_id {
        scope_4333.string(var_4334);
    }
    #[allow(unused_mut)]
    let mut scope_4335 = writer.prefix("InstanceId");
    if let Some(var_4336) = &input.instance_id {
        scope_4335.string(var_4336);
    }
    #[allow(unused_mut)]
    let mut scope_4337 = writer.prefix("Tenancy");
    if let Some(var_4338) = &input.tenancy {
        scope_4337.string(var_4338.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4339 = writer.prefix("PartitionNumber");
    if let Some(var_4340) = &input.partition_number {
        scope_4339.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4340).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4341 = writer.prefix("HostResourceGroupArn");
    if let Some(var_4342) = &input.host_resource_group_arn {
        scope_4341.string(var_4342);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4343 = writer.prefix("DryRun");
    if let Some(var_4344) = &input.dry_run {
        scope_4343.boolean(*var_4344);
    }
    #[allow(unused_mut)]
    let mut scope_4345 = writer.prefix("ClientToken");
    if let Some(var_4346) = &input.client_token {
        scope_4345.string(var_4346);
    }
    #[allow(unused_mut)]
    let mut scope_4347 = writer.prefix("LaunchTemplateId");
    if let Some(var_4348) = &input.launch_template_id {
        scope_4347.string(var_4348);
    }
    #[allow(unused_mut)]
    let mut scope_4349 = writer.prefix("LaunchTemplateName");
    if let Some(var_4350) = &input.launch_template_name {
        scope_4349.string(var_4350);
    }
    #[allow(unused_mut)]
    let mut scope_4351 = writer.prefix("SetDefaultVersion");
    if let Some(var_4352) = &input.default_version {
        scope_4351.string(var_4352);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4353 = writer.prefix("DryRun");
    if let Some(var_4354) = &input.dry_run {
        scope_4353.boolean(*var_4354);
    }
    #[allow(unused_mut)]
    let mut scope_4355 = writer.prefix("PrefixListId");
    if let Some(var_4356) = &input.prefix_list_id {
        scope_4355.string(var_4356);
    }
    #[allow(unused_mut)]
    let mut scope_4357 = writer.prefix("CurrentVersion");
    if let Some(var_4358) = &input.current_version {
        scope_4357.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4358).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4359 = writer.prefix("PrefixListName");
    if let Some(var_4360) = &input.prefix_list_name {
        scope_4359.string(var_4360);
    }
    #[allow(unused_mut)]
    let mut scope_4361 = writer.prefix("AddEntry");
    if let Some(var_4362) = &input.add_entries {
        let mut list_4364 = scope_4361.start_list(true, None);
        for item_4363 in var_4362 {
            #[allow(unused_mut)]
            let mut entry_4365 = list_4364.entry();
            crate::query_ser::serialize_structure_add_prefix_list_entry(entry_4365, item_4363);
        }
        list_4364.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4366 = writer.prefix("RemoveEntry");
    if let Some(var_4367) = &input.remove_entries {
        let mut list_4369 = scope_4366.start_list(true, None);
        for item_4368 in var_4367 {
            #[allow(unused_mut)]
            let mut entry_4370 = list_4369.entry();
            crate::query_ser::serialize_structure_remove_prefix_list_entry(entry_4370, item_4368);
        }
        list_4369.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4371 = writer.prefix("Attachment");
    if let Some(var_4372) = &input.attachment {
        crate::query_ser::serialize_structure_network_interface_attachment_changes(
            scope_4371, var_4372,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4373 = writer.prefix("Description");
    if let Some(var_4374) = &input.description {
        crate::query_ser::serialize_structure_attribute_value(scope_4373, var_4374);
    }
    #[allow(unused_mut)]
    let mut scope_4375 = writer.prefix("DryRun");
    if let Some(var_4376) = &input.dry_run {
        scope_4375.boolean(*var_4376);
    }
    #[allow(unused_mut)]
    let mut scope_4377 = writer.prefix("SecurityGroupId");
    if let Some(var_4378) = &input.groups {
        let mut list_4380 = scope_4377.start_list(true, Some("SecurityGroupId"));
        for item_4379 in var_4378 {
            #[allow(unused_mut)]
            let mut entry_4381 = list_4380.entry();
            entry_4381.string(item_4379);
        }
        list_4380.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4382 = writer.prefix("NetworkInterfaceId");
    if let Some(var_4383) = &input.network_interface_id {
        scope_4382.string(var_4383);
    }
    #[allow(unused_mut)]
    let mut scope_4384 = writer.prefix("SourceDestCheck");
    if let Some(var_4385) = &input.source_dest_check {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4384, var_4385);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4386 = writer.prefix("ReservedInstancesId");
    if let Some(var_4387) = &input.reserved_instances_ids {
        let mut list_4389 = scope_4386.start_list(true, Some("ReservedInstancesId"));
        for item_4388 in var_4387 {
            #[allow(unused_mut)]
            let mut entry_4390 = list_4389.entry();
            entry_4390.string(item_4388);
        }
        list_4389.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4391 = writer.prefix("ClientToken");
    if let Some(var_4392) = &input.client_token {
        scope_4391.string(var_4392);
    }
    #[allow(unused_mut)]
    let mut scope_4393 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_4394) = &input.target_configurations {
        let mut list_4396 = scope_4393.start_list(true, Some("item"));
        for item_4395 in var_4394 {
            #[allow(unused_mut)]
            let mut entry_4397 = list_4396.entry();
            crate::query_ser::serialize_structure_reserved_instances_configuration(
                entry_4397, item_4395,
            );
        }
        list_4396.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_security_group_rules(
    input: &crate::input::ModifySecurityGroupRulesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4398 = writer.prefix("GroupId");
    if let Some(var_4399) = &input.group_id {
        scope_4398.string(var_4399);
    }
    #[allow(unused_mut)]
    let mut scope_4400 = writer.prefix("SecurityGroupRule");
    if let Some(var_4401) = &input.security_group_rules {
        let mut list_4403 = scope_4400.start_list(true, Some("item"));
        for item_4402 in var_4401 {
            #[allow(unused_mut)]
            let mut entry_4404 = list_4403.entry();
            crate::query_ser::serialize_structure_security_group_rule_update(entry_4404, item_4402);
        }
        list_4403.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4405 = writer.prefix("DryRun");
    if let Some(var_4406) = &input.dry_run {
        scope_4405.boolean(*var_4406);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4407 = writer.prefix("Attribute");
    if let Some(var_4408) = &input.attribute {
        scope_4407.string(var_4408.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4409 = writer.prefix("CreateVolumePermission");
    if let Some(var_4410) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_create_volume_permission_modifications(
            scope_4409, var_4410,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4411 = writer.prefix("UserGroup");
    if let Some(var_4412) = &input.group_names {
        let mut list_4414 = scope_4411.start_list(true, Some("GroupName"));
        for item_4413 in var_4412 {
            #[allow(unused_mut)]
            let mut entry_4415 = list_4414.entry();
            entry_4415.string(item_4413);
        }
        list_4414.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4416 = writer.prefix("OperationType");
    if let Some(var_4417) = &input.operation_type {
        scope_4416.string(var_4417.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4418 = writer.prefix("SnapshotId");
    if let Some(var_4419) = &input.snapshot_id {
        scope_4418.string(var_4419);
    }
    #[allow(unused_mut)]
    let mut scope_4420 = writer.prefix("UserId");
    if let Some(var_4421) = &input.user_ids {
        let mut list_4423 = scope_4420.start_list(true, Some("UserId"));
        for item_4422 in var_4421 {
            #[allow(unused_mut)]
            let mut entry_4424 = list_4423.entry();
            entry_4424.string(item_4422);
        }
        list_4423.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4425 = writer.prefix("DryRun");
    if let Some(var_4426) = &input.dry_run {
        scope_4425.boolean(*var_4426);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4427 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4428) = &input.excess_capacity_termination_policy {
        scope_4427.string(var_4428.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4429 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4430) = &input.launch_template_configs {
        let mut list_4432 = scope_4429.start_list(true, Some("item"));
        for item_4431 in var_4430 {
            #[allow(unused_mut)]
            let mut entry_4433 = list_4432.entry();
            crate::query_ser::serialize_structure_launch_template_config(entry_4433, item_4431);
        }
        list_4432.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4434 = writer.prefix("SpotFleetRequestId");
    if let Some(var_4435) = &input.spot_fleet_request_id {
        scope_4434.string(var_4435);
    }
    #[allow(unused_mut)]
    let mut scope_4436 = writer.prefix("TargetCapacity");
    if let Some(var_4437) = &input.target_capacity {
        scope_4436.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4437).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4438 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_4439) = &input.on_demand_target_capacity {
        scope_4438.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4439).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4440 = writer.prefix("Context");
    if let Some(var_4441) = &input.context {
        scope_4440.string(var_4441);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4442 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_4443) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4442, var_4443);
    }
    #[allow(unused_mut)]
    let mut scope_4444 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_4445) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4444, var_4445);
    }
    #[allow(unused_mut)]
    let mut scope_4446 = writer.prefix("SubnetId");
    if let Some(var_4447) = &input.subnet_id {
        scope_4446.string(var_4447);
    }
    #[allow(unused_mut)]
    let mut scope_4448 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_4449) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4448, var_4449);
    }
    #[allow(unused_mut)]
    let mut scope_4450 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_4451) = &input.customer_owned_ipv4_pool {
        scope_4450.string(var_4451);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4452 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_4453) = &input.traffic_mirror_filter_id {
        scope_4452.string(var_4453);
    }
    #[allow(unused_mut)]
    let mut scope_4454 = writer.prefix("AddNetworkService");
    if let Some(var_4455) = &input.add_network_services {
        let mut list_4457 = scope_4454.start_list(true, Some("item"));
        for item_4456 in var_4455 {
            #[allow(unused_mut)]
            let mut entry_4458 = list_4457.entry();
            entry_4458.string(item_4456.as_str());
        }
        list_4457.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4459 = writer.prefix("RemoveNetworkService");
    if let Some(var_4460) = &input.remove_network_services {
        let mut list_4462 = scope_4459.start_list(true, Some("item"));
        for item_4461 in var_4460 {
            #[allow(unused_mut)]
            let mut entry_4463 = list_4462.entry();
            entry_4463.string(item_4461.as_str());
        }
        list_4462.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4464 = writer.prefix("DryRun");
    if let Some(var_4465) = &input.dry_run {
        scope_4464.boolean(*var_4465);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4466 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_4467) = &input.traffic_mirror_filter_rule_id {
        scope_4466.string(var_4467);
    }
    #[allow(unused_mut)]
    let mut scope_4468 = writer.prefix("TrafficDirection");
    if let Some(var_4469) = &input.traffic_direction {
        scope_4468.string(var_4469.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4470 = writer.prefix("RuleNumber");
    if let Some(var_4471) = &input.rule_number {
        scope_4470.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4471).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4472 = writer.prefix("RuleAction");
    if let Some(var_4473) = &input.rule_action {
        scope_4472.string(var_4473.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4474 = writer.prefix("DestinationPortRange");
    if let Some(var_4475) = &input.destination_port_range {
        crate::query_ser::serialize_structure_traffic_mirror_port_range_request(
            scope_4474, var_4475,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4476 = writer.prefix("SourcePortRange");
    if let Some(var_4477) = &input.source_port_range {
        crate::query_ser::serialize_structure_traffic_mirror_port_range_request(
            scope_4476, var_4477,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4478 = writer.prefix("Protocol");
    if let Some(var_4479) = &input.protocol {
        scope_4478.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4479).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4480 = writer.prefix("DestinationCidrBlock");
    if let Some(var_4481) = &input.destination_cidr_block {
        scope_4480.string(var_4481);
    }
    #[allow(unused_mut)]
    let mut scope_4482 = writer.prefix("SourceCidrBlock");
    if let Some(var_4483) = &input.source_cidr_block {
        scope_4482.string(var_4483);
    }
    #[allow(unused_mut)]
    let mut scope_4484 = writer.prefix("Description");
    if let Some(var_4485) = &input.description {
        scope_4484.string(var_4485);
    }
    #[allow(unused_mut)]
    let mut scope_4486 = writer.prefix("RemoveField");
    if let Some(var_4487) = &input.remove_fields {
        let mut list_4489 = scope_4486.start_list(true, None);
        for item_4488 in var_4487 {
            #[allow(unused_mut)]
            let mut entry_4490 = list_4489.entry();
            entry_4490.string(item_4488.as_str());
        }
        list_4489.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4491 = writer.prefix("DryRun");
    if let Some(var_4492) = &input.dry_run {
        scope_4491.boolean(*var_4492);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4493 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_4494) = &input.traffic_mirror_session_id {
        scope_4493.string(var_4494);
    }
    #[allow(unused_mut)]
    let mut scope_4495 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_4496) = &input.traffic_mirror_target_id {
        scope_4495.string(var_4496);
    }
    #[allow(unused_mut)]
    let mut scope_4497 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_4498) = &input.traffic_mirror_filter_id {
        scope_4497.string(var_4498);
    }
    #[allow(unused_mut)]
    let mut scope_4499 = writer.prefix("PacketLength");
    if let Some(var_4500) = &input.packet_length {
        scope_4499.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4500).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4501 = writer.prefix("SessionNumber");
    if let Some(var_4502) = &input.session_number {
        scope_4501.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4502).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4503 = writer.prefix("VirtualNetworkId");
    if let Some(var_4504) = &input.virtual_network_id {
        scope_4503.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4504).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4505 = writer.prefix("Description");
    if let Some(var_4506) = &input.description {
        scope_4505.string(var_4506);
    }
    #[allow(unused_mut)]
    let mut scope_4507 = writer.prefix("RemoveField");
    if let Some(var_4508) = &input.remove_fields {
        let mut list_4510 = scope_4507.start_list(true, None);
        for item_4509 in var_4508 {
            #[allow(unused_mut)]
            let mut entry_4511 = list_4510.entry();
            entry_4511.string(item_4509.as_str());
        }
        list_4510.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4512 = writer.prefix("DryRun");
    if let Some(var_4513) = &input.dry_run {
        scope_4512.boolean(*var_4513);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4514 = writer.prefix("TransitGatewayId");
    if let Some(var_4515) = &input.transit_gateway_id {
        scope_4514.string(var_4515);
    }
    #[allow(unused_mut)]
    let mut scope_4516 = writer.prefix("Description");
    if let Some(var_4517) = &input.description {
        scope_4516.string(var_4517);
    }
    #[allow(unused_mut)]
    let mut scope_4518 = writer.prefix("Options");
    if let Some(var_4519) = &input.options {
        crate::query_ser::serialize_structure_modify_transit_gateway_options(scope_4518, var_4519);
    }
    #[allow(unused_mut)]
    let mut scope_4520 = writer.prefix("DryRun");
    if let Some(var_4521) = &input.dry_run {
        scope_4520.boolean(*var_4521);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4522 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4523) = &input.transit_gateway_route_table_id {
        scope_4522.string(var_4523);
    }
    #[allow(unused_mut)]
    let mut scope_4524 = writer.prefix("PrefixListId");
    if let Some(var_4525) = &input.prefix_list_id {
        scope_4524.string(var_4525);
    }
    #[allow(unused_mut)]
    let mut scope_4526 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4527) = &input.transit_gateway_attachment_id {
        scope_4526.string(var_4527);
    }
    #[allow(unused_mut)]
    let mut scope_4528 = writer.prefix("Blackhole");
    if let Some(var_4529) = &input.blackhole {
        scope_4528.boolean(*var_4529);
    }
    #[allow(unused_mut)]
    let mut scope_4530 = writer.prefix("DryRun");
    if let Some(var_4531) = &input.dry_run {
        scope_4530.boolean(*var_4531);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4532 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4533) = &input.transit_gateway_attachment_id {
        scope_4532.string(var_4533);
    }
    #[allow(unused_mut)]
    let mut scope_4534 = writer.prefix("AddSubnetIds");
    if let Some(var_4535) = &input.add_subnet_ids {
        let mut list_4537 = scope_4534.start_list(true, Some("item"));
        for item_4536 in var_4535 {
            #[allow(unused_mut)]
            let mut entry_4538 = list_4537.entry();
            entry_4538.string(item_4536);
        }
        list_4537.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4539 = writer.prefix("RemoveSubnetIds");
    if let Some(var_4540) = &input.remove_subnet_ids {
        let mut list_4542 = scope_4539.start_list(true, Some("item"));
        for item_4541 in var_4540 {
            #[allow(unused_mut)]
            let mut entry_4543 = list_4542.entry();
            entry_4543.string(item_4541);
        }
        list_4542.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4544 = writer.prefix("Options");
    if let Some(var_4545) = &input.options {
        crate::query_ser::serialize_structure_modify_transit_gateway_vpc_attachment_request_options(
            scope_4544, var_4545,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4546 = writer.prefix("DryRun");
    if let Some(var_4547) = &input.dry_run {
        scope_4546.boolean(*var_4547);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4548 = writer.prefix("DryRun");
    if let Some(var_4549) = &input.dry_run {
        scope_4548.boolean(*var_4549);
    }
    #[allow(unused_mut)]
    let mut scope_4550 = writer.prefix("VolumeId");
    if let Some(var_4551) = &input.volume_id {
        scope_4550.string(var_4551);
    }
    #[allow(unused_mut)]
    let mut scope_4552 = writer.prefix("Size");
    if let Some(var_4553) = &input.size {
        scope_4552.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4553).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4554 = writer.prefix("VolumeType");
    if let Some(var_4555) = &input.volume_type {
        scope_4554.string(var_4555.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4556 = writer.prefix("Iops");
    if let Some(var_4557) = &input.iops {
        scope_4556.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4557).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4558 = writer.prefix("Throughput");
    if let Some(var_4559) = &input.throughput {
        scope_4558.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4559).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4560 = writer.prefix("MultiAttachEnabled");
    if let Some(var_4561) = &input.multi_attach_enabled {
        scope_4560.boolean(*var_4561);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4562 = writer.prefix("AutoEnableIO");
    if let Some(var_4563) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4562, var_4563);
    }
    #[allow(unused_mut)]
    let mut scope_4564 = writer.prefix("VolumeId");
    if let Some(var_4565) = &input.volume_id {
        scope_4564.string(var_4565);
    }
    #[allow(unused_mut)]
    let mut scope_4566 = writer.prefix("DryRun");
    if let Some(var_4567) = &input.dry_run {
        scope_4566.boolean(*var_4567);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4568 = writer.prefix("EnableDnsHostnames");
    if let Some(var_4569) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4568, var_4569);
    }
    #[allow(unused_mut)]
    let mut scope_4570 = writer.prefix("EnableDnsSupport");
    if let Some(var_4571) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4570, var_4571);
    }
    #[allow(unused_mut)]
    let mut scope_4572 = writer.prefix("VpcId");
    if let Some(var_4573) = &input.vpc_id {
        scope_4572.string(var_4573);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4574 = writer.prefix("DryRun");
    if let Some(var_4575) = &input.dry_run {
        scope_4574.boolean(*var_4575);
    }
    #[allow(unused_mut)]
    let mut scope_4576 = writer.prefix("VpcEndpointId");
    if let Some(var_4577) = &input.vpc_endpoint_id {
        scope_4576.string(var_4577);
    }
    #[allow(unused_mut)]
    let mut scope_4578 = writer.prefix("ResetPolicy");
    if let Some(var_4579) = &input.reset_policy {
        scope_4578.boolean(*var_4579);
    }
    #[allow(unused_mut)]
    let mut scope_4580 = writer.prefix("PolicyDocument");
    if let Some(var_4581) = &input.policy_document {
        scope_4580.string(var_4581);
    }
    #[allow(unused_mut)]
    let mut scope_4582 = writer.prefix("AddRouteTableId");
    if let Some(var_4583) = &input.add_route_table_ids {
        let mut list_4585 = scope_4582.start_list(true, Some("item"));
        for item_4584 in var_4583 {
            #[allow(unused_mut)]
            let mut entry_4586 = list_4585.entry();
            entry_4586.string(item_4584);
        }
        list_4585.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4587 = writer.prefix("RemoveRouteTableId");
    if let Some(var_4588) = &input.remove_route_table_ids {
        let mut list_4590 = scope_4587.start_list(true, Some("item"));
        for item_4589 in var_4588 {
            #[allow(unused_mut)]
            let mut entry_4591 = list_4590.entry();
            entry_4591.string(item_4589);
        }
        list_4590.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4592 = writer.prefix("AddSubnetId");
    if let Some(var_4593) = &input.add_subnet_ids {
        let mut list_4595 = scope_4592.start_list(true, Some("item"));
        for item_4594 in var_4593 {
            #[allow(unused_mut)]
            let mut entry_4596 = list_4595.entry();
            entry_4596.string(item_4594);
        }
        list_4595.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4597 = writer.prefix("RemoveSubnetId");
    if let Some(var_4598) = &input.remove_subnet_ids {
        let mut list_4600 = scope_4597.start_list(true, Some("item"));
        for item_4599 in var_4598 {
            #[allow(unused_mut)]
            let mut entry_4601 = list_4600.entry();
            entry_4601.string(item_4599);
        }
        list_4600.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4602 = writer.prefix("AddSecurityGroupId");
    if let Some(var_4603) = &input.add_security_group_ids {
        let mut list_4605 = scope_4602.start_list(true, Some("item"));
        for item_4604 in var_4603 {
            #[allow(unused_mut)]
            let mut entry_4606 = list_4605.entry();
            entry_4606.string(item_4604);
        }
        list_4605.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4607 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_4608) = &input.remove_security_group_ids {
        let mut list_4610 = scope_4607.start_list(true, Some("item"));
        for item_4609 in var_4608 {
            #[allow(unused_mut)]
            let mut entry_4611 = list_4610.entry();
            entry_4611.string(item_4609);
        }
        list_4610.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4612 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_4613) = &input.private_dns_enabled {
        scope_4612.boolean(*var_4613);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4614 = writer.prefix("DryRun");
    if let Some(var_4615) = &input.dry_run {
        scope_4614.boolean(*var_4615);
    }
    #[allow(unused_mut)]
    let mut scope_4616 = writer.prefix("ConnectionNotificationId");
    if let Some(var_4617) = &input.connection_notification_id {
        scope_4616.string(var_4617);
    }
    #[allow(unused_mut)]
    let mut scope_4618 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_4619) = &input.connection_notification_arn {
        scope_4618.string(var_4619);
    }
    #[allow(unused_mut)]
    let mut scope_4620 = writer.prefix("ConnectionEvents");
    if let Some(var_4621) = &input.connection_events {
        let mut list_4623 = scope_4620.start_list(true, Some("item"));
        for item_4622 in var_4621 {
            #[allow(unused_mut)]
            let mut entry_4624 = list_4623.entry();
            entry_4624.string(item_4622);
        }
        list_4623.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4625 = writer.prefix("DryRun");
    if let Some(var_4626) = &input.dry_run {
        scope_4625.boolean(*var_4626);
    }
    #[allow(unused_mut)]
    let mut scope_4627 = writer.prefix("ServiceId");
    if let Some(var_4628) = &input.service_id {
        scope_4627.string(var_4628);
    }
    #[allow(unused_mut)]
    let mut scope_4629 = writer.prefix("PrivateDnsName");
    if let Some(var_4630) = &input.private_dns_name {
        scope_4629.string(var_4630);
    }
    #[allow(unused_mut)]
    let mut scope_4631 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_4632) = &input.remove_private_dns_name {
        scope_4631.boolean(*var_4632);
    }
    #[allow(unused_mut)]
    let mut scope_4633 = writer.prefix("AcceptanceRequired");
    if let Some(var_4634) = &input.acceptance_required {
        scope_4633.boolean(*var_4634);
    }
    #[allow(unused_mut)]
    let mut scope_4635 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_4636) = &input.add_network_load_balancer_arns {
        let mut list_4638 = scope_4635.start_list(true, Some("item"));
        for item_4637 in var_4636 {
            #[allow(unused_mut)]
            let mut entry_4639 = list_4638.entry();
            entry_4639.string(item_4637);
        }
        list_4638.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4640 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_4641) = &input.remove_network_load_balancer_arns {
        let mut list_4643 = scope_4640.start_list(true, Some("item"));
        for item_4642 in var_4641 {
            #[allow(unused_mut)]
            let mut entry_4644 = list_4643.entry();
            entry_4644.string(item_4642);
        }
        list_4643.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4645 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_4646) = &input.add_gateway_load_balancer_arns {
        let mut list_4648 = scope_4645.start_list(true, Some("item"));
        for item_4647 in var_4646 {
            #[allow(unused_mut)]
            let mut entry_4649 = list_4648.entry();
            entry_4649.string(item_4647);
        }
        list_4648.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4650 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_4651) = &input.remove_gateway_load_balancer_arns {
        let mut list_4653 = scope_4650.start_list(true, Some("item"));
        for item_4652 in var_4651 {
            #[allow(unused_mut)]
            let mut entry_4654 = list_4653.entry();
            entry_4654.string(item_4652);
        }
        list_4653.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4655 = writer.prefix("DryRun");
    if let Some(var_4656) = &input.dry_run {
        scope_4655.boolean(*var_4656);
    }
    #[allow(unused_mut)]
    let mut scope_4657 = writer.prefix("ServiceId");
    if let Some(var_4658) = &input.service_id {
        scope_4657.string(var_4658);
    }
    #[allow(unused_mut)]
    let mut scope_4659 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_4660) = &input.add_allowed_principals {
        let mut list_4662 = scope_4659.start_list(true, Some("item"));
        for item_4661 in var_4660 {
            #[allow(unused_mut)]
            let mut entry_4663 = list_4662.entry();
            entry_4663.string(item_4661);
        }
        list_4662.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4664 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_4665) = &input.remove_allowed_principals {
        let mut list_4667 = scope_4664.start_list(true, Some("item"));
        for item_4666 in var_4665 {
            #[allow(unused_mut)]
            let mut entry_4668 = list_4667.entry();
            entry_4668.string(item_4666);
        }
        list_4667.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpcPeeringConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4669 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_4670) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_peering_connection_options_request(
            scope_4669, var_4670,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4671 = writer.prefix("DryRun");
    if let Some(var_4672) = &input.dry_run {
        scope_4671.boolean(*var_4672);
    }
    #[allow(unused_mut)]
    let mut scope_4673 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_4674) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_peering_connection_options_request(
            scope_4673, var_4674,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4675 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4676) = &input.vpc_peering_connection_id {
        scope_4675.string(var_4676);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4677 = writer.prefix("VpcId");
    if let Some(var_4678) = &input.vpc_id {
        scope_4677.string(var_4678);
    }
    #[allow(unused_mut)]
    let mut scope_4679 = writer.prefix("InstanceTenancy");
    if let Some(var_4680) = &input.instance_tenancy {
        scope_4679.string(var_4680.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4681 = writer.prefix("DryRun");
    if let Some(var_4682) = &input.dry_run {
        scope_4681.boolean(*var_4682);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4683 = writer.prefix("VpnConnectionId");
    if let Some(var_4684) = &input.vpn_connection_id {
        scope_4683.string(var_4684);
    }
    #[allow(unused_mut)]
    let mut scope_4685 = writer.prefix("TransitGatewayId");
    if let Some(var_4686) = &input.transit_gateway_id {
        scope_4685.string(var_4686);
    }
    #[allow(unused_mut)]
    let mut scope_4687 = writer.prefix("CustomerGatewayId");
    if let Some(var_4688) = &input.customer_gateway_id {
        scope_4687.string(var_4688);
    }
    #[allow(unused_mut)]
    let mut scope_4689 = writer.prefix("VpnGatewayId");
    if let Some(var_4690) = &input.vpn_gateway_id {
        scope_4689.string(var_4690);
    }
    #[allow(unused_mut)]
    let mut scope_4691 = writer.prefix("DryRun");
    if let Some(var_4692) = &input.dry_run {
        scope_4691.boolean(*var_4692);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4693 = writer.prefix("VpnConnectionId");
    if let Some(var_4694) = &input.vpn_connection_id {
        scope_4693.string(var_4694);
    }
    #[allow(unused_mut)]
    let mut scope_4695 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_4696) = &input.local_ipv4_network_cidr {
        scope_4695.string(var_4696);
    }
    #[allow(unused_mut)]
    let mut scope_4697 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_4698) = &input.remote_ipv4_network_cidr {
        scope_4697.string(var_4698);
    }
    #[allow(unused_mut)]
    let mut scope_4699 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_4700) = &input.local_ipv6_network_cidr {
        scope_4699.string(var_4700);
    }
    #[allow(unused_mut)]
    let mut scope_4701 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_4702) = &input.remote_ipv6_network_cidr {
        scope_4701.string(var_4702);
    }
    #[allow(unused_mut)]
    let mut scope_4703 = writer.prefix("DryRun");
    if let Some(var_4704) = &input.dry_run {
        scope_4703.boolean(*var_4704);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4705 = writer.prefix("VpnConnectionId");
    if let Some(var_4706) = &input.vpn_connection_id {
        scope_4705.string(var_4706);
    }
    #[allow(unused_mut)]
    let mut scope_4707 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_4708) = &input.vpn_tunnel_outside_ip_address {
        scope_4707.string(var_4708);
    }
    #[allow(unused_mut)]
    let mut scope_4709 = writer.prefix("DryRun");
    if let Some(var_4710) = &input.dry_run {
        scope_4709.boolean(*var_4710);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4711 = writer.prefix("VpnConnectionId");
    if let Some(var_4712) = &input.vpn_connection_id {
        scope_4711.string(var_4712);
    }
    #[allow(unused_mut)]
    let mut scope_4713 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_4714) = &input.vpn_tunnel_outside_ip_address {
        scope_4713.string(var_4714);
    }
    #[allow(unused_mut)]
    let mut scope_4715 = writer.prefix("TunnelOptions");
    if let Some(var_4716) = &input.tunnel_options {
        crate::query_ser::serialize_structure_modify_vpn_tunnel_options_specification(
            scope_4715, var_4716,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4717 = writer.prefix("DryRun");
    if let Some(var_4718) = &input.dry_run {
        scope_4717.boolean(*var_4718);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4719 = writer.prefix("InstanceId");
    if let Some(var_4720) = &input.instance_ids {
        let mut list_4722 = scope_4719.start_list(true, Some("InstanceId"));
        for item_4721 in var_4720 {
            #[allow(unused_mut)]
            let mut entry_4723 = list_4722.entry();
            entry_4723.string(item_4721);
        }
        list_4722.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4724 = writer.prefix("DryRun");
    if let Some(var_4725) = &input.dry_run {
        scope_4724.boolean(*var_4725);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4726 = writer.prefix("DryRun");
    if let Some(var_4727) = &input.dry_run {
        scope_4726.boolean(*var_4727);
    }
    #[allow(unused_mut)]
    let mut scope_4728 = writer.prefix("PublicIp");
    if let Some(var_4729) = &input.public_ip {
        scope_4728.string(var_4729);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4730 = writer.prefix("Cidr");
    if let Some(var_4731) = &input.cidr {
        scope_4730.string(var_4731);
    }
    #[allow(unused_mut)]
    let mut scope_4732 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_4733) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_cidr_authorization_context(scope_4732, var_4733);
    }
    #[allow(unused_mut)]
    let mut scope_4734 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_4735) = &input.publicly_advertisable {
        scope_4734.boolean(*var_4735);
    }
    #[allow(unused_mut)]
    let mut scope_4736 = writer.prefix("Description");
    if let Some(var_4737) = &input.description {
        scope_4736.string(var_4737);
    }
    #[allow(unused_mut)]
    let mut scope_4738 = writer.prefix("DryRun");
    if let Some(var_4739) = &input.dry_run {
        scope_4738.boolean(*var_4739);
    }
    #[allow(unused_mut)]
    let mut scope_4740 = writer.prefix("PoolTagSpecification");
    if let Some(var_4741) = &input.pool_tag_specifications {
        let mut list_4743 = scope_4740.start_list(true, Some("item"));
        for item_4742 in var_4741 {
            #[allow(unused_mut)]
            let mut entry_4744 = list_4743.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_4744, item_4742);
        }
        list_4743.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4745 = writer.prefix("MultiRegion");
    if let Some(var_4746) = &input.multi_region {
        scope_4745.boolean(*var_4746);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4747 = writer.prefix("ClientToken");
    if let Some(var_4748) = &input.client_token {
        scope_4747.string(var_4748);
    }
    #[allow(unused_mut)]
    let mut scope_4749 = writer.prefix("CurrencyCode");
    if let Some(var_4750) = &input.currency_code {
        scope_4749.string(var_4750.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4751 = writer.prefix("HostIdSet");
    if let Some(var_4752) = &input.host_id_set {
        let mut list_4754 = scope_4751.start_list(true, Some("item"));
        for item_4753 in var_4752 {
            #[allow(unused_mut)]
            let mut entry_4755 = list_4754.entry();
            entry_4755.string(item_4753);
        }
        list_4754.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4756 = writer.prefix("LimitPrice");
    if let Some(var_4757) = &input.limit_price {
        scope_4756.string(var_4757);
    }
    #[allow(unused_mut)]
    let mut scope_4758 = writer.prefix("OfferingId");
    if let Some(var_4759) = &input.offering_id {
        scope_4758.string(var_4759);
    }
    #[allow(unused_mut)]
    let mut scope_4760 = writer.prefix("TagSpecification");
    if let Some(var_4761) = &input.tag_specifications {
        let mut list_4763 = scope_4760.start_list(true, Some("item"));
        for item_4762 in var_4761 {
            #[allow(unused_mut)]
            let mut entry_4764 = list_4763.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_4764, item_4762);
        }
        list_4763.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PurchaseReservedInstancesOffering", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4765 = writer.prefix("InstanceCount");
    if let Some(var_4766) = &input.instance_count {
        scope_4765.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4766).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4767 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_4768) = &input.reserved_instances_offering_id {
        scope_4767.string(var_4768);
    }
    #[allow(unused_mut)]
    let mut scope_4769 = writer.prefix("DryRun");
    if let Some(var_4770) = &input.dry_run {
        scope_4769.boolean(*var_4770);
    }
    #[allow(unused_mut)]
    let mut scope_4771 = writer.prefix("LimitPrice");
    if let Some(var_4772) = &input.limit_price {
        crate::query_ser::serialize_structure_reserved_instance_limit_price(scope_4771, var_4772);
    }
    #[allow(unused_mut)]
    let mut scope_4773 = writer.prefix("PurchaseTime");
    if let Some(var_4774) = &input.purchase_time {
        scope_4773.instant(var_4774, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4775 = writer.prefix("ClientToken");
    if let Some(var_4776) = &input.client_token {
        scope_4775.string(var_4776);
    }
    #[allow(unused_mut)]
    let mut scope_4777 = writer.prefix("DryRun");
    if let Some(var_4778) = &input.dry_run {
        scope_4777.boolean(*var_4778);
    }
    #[allow(unused_mut)]
    let mut scope_4779 = writer.prefix("PurchaseRequest");
    if let Some(var_4780) = &input.purchase_requests {
        let mut list_4782 = scope_4779.start_list(true, Some("PurchaseRequest"));
        for item_4781 in var_4780 {
            #[allow(unused_mut)]
            let mut entry_4783 = list_4782.entry();
            crate::query_ser::serialize_structure_purchase_request(entry_4783, item_4781);
        }
        list_4782.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4784 = writer.prefix("InstanceId");
    if let Some(var_4785) = &input.instance_ids {
        let mut list_4787 = scope_4784.start_list(true, Some("InstanceId"));
        for item_4786 in var_4785 {
            #[allow(unused_mut)]
            let mut entry_4788 = list_4787.entry();
            entry_4788.string(item_4786);
        }
        list_4787.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4789 = writer.prefix("DryRun");
    if let Some(var_4790) = &input.dry_run {
        scope_4789.boolean(*var_4790);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4791 = writer.prefix("ImageLocation");
    if let Some(var_4792) = &input.image_location {
        scope_4791.string(var_4792);
    }
    #[allow(unused_mut)]
    let mut scope_4793 = writer.prefix("Architecture");
    if let Some(var_4794) = &input.architecture {
        scope_4793.string(var_4794.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4795 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4796) = &input.block_device_mappings {
        let mut list_4798 = scope_4795.start_list(true, Some("BlockDeviceMapping"));
        for item_4797 in var_4796 {
            #[allow(unused_mut)]
            let mut entry_4799 = list_4798.entry();
            crate::query_ser::serialize_structure_block_device_mapping(entry_4799, item_4797);
        }
        list_4798.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4800 = writer.prefix("Description");
    if let Some(var_4801) = &input.description {
        scope_4800.string(var_4801);
    }
    #[allow(unused_mut)]
    let mut scope_4802 = writer.prefix("DryRun");
    if let Some(var_4803) = &input.dry_run {
        scope_4802.boolean(*var_4803);
    }
    #[allow(unused_mut)]
    let mut scope_4804 = writer.prefix("EnaSupport");
    if let Some(var_4805) = &input.ena_support {
        scope_4804.boolean(*var_4805);
    }
    #[allow(unused_mut)]
    let mut scope_4806 = writer.prefix("KernelId");
    if let Some(var_4807) = &input.kernel_id {
        scope_4806.string(var_4807);
    }
    #[allow(unused_mut)]
    let mut scope_4808 = writer.prefix("Name");
    if let Some(var_4809) = &input.name {
        scope_4808.string(var_4809);
    }
    #[allow(unused_mut)]
    let mut scope_4810 = writer.prefix("BillingProduct");
    if let Some(var_4811) = &input.billing_products {
        let mut list_4813 = scope_4810.start_list(true, Some("item"));
        for item_4812 in var_4811 {
            #[allow(unused_mut)]
            let mut entry_4814 = list_4813.entry();
            entry_4814.string(item_4812);
        }
        list_4813.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4815 = writer.prefix("RamdiskId");
    if let Some(var_4816) = &input.ramdisk_id {
        scope_4815.string(var_4816);
    }
    #[allow(unused_mut)]
    let mut scope_4817 = writer.prefix("RootDeviceName");
    if let Some(var_4818) = &input.root_device_name {
        scope_4817.string(var_4818);
    }
    #[allow(unused_mut)]
    let mut scope_4819 = writer.prefix("SriovNetSupport");
    if let Some(var_4820) = &input.sriov_net_support {
        scope_4819.string(var_4820);
    }
    #[allow(unused_mut)]
    let mut scope_4821 = writer.prefix("VirtualizationType");
    if let Some(var_4822) = &input.virtualization_type {
        scope_4821.string(var_4822);
    }
    #[allow(unused_mut)]
    let mut scope_4823 = writer.prefix("BootMode");
    if let Some(var_4824) = &input.boot_mode {
        scope_4823.string(var_4824.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4825 = writer.prefix("DryRun");
    if let Some(var_4826) = &input.dry_run {
        scope_4825.boolean(*var_4826);
    }
    #[allow(unused_mut)]
    let mut scope_4827 = writer.prefix("InstanceTagAttribute");
    if let Some(var_4828) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_register_instance_tag_attribute_request(
            scope_4827, var_4828,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4829 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4830) = &input.transit_gateway_multicast_domain_id {
        scope_4829.string(var_4830);
    }
    #[allow(unused_mut)]
    let mut scope_4831 = writer.prefix("GroupIpAddress");
    if let Some(var_4832) = &input.group_ip_address {
        scope_4831.string(var_4832);
    }
    #[allow(unused_mut)]
    let mut scope_4833 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_4834) = &input.network_interface_ids {
        let mut list_4836 = scope_4833.start_list(true, Some("item"));
        for item_4835 in var_4834 {
            #[allow(unused_mut)]
            let mut entry_4837 = list_4836.entry();
            entry_4837.string(item_4835);
        }
        list_4836.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4838 = writer.prefix("DryRun");
    if let Some(var_4839) = &input.dry_run {
        scope_4838.boolean(*var_4839);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4840 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4841) = &input.transit_gateway_multicast_domain_id {
        scope_4840.string(var_4841);
    }
    #[allow(unused_mut)]
    let mut scope_4842 = writer.prefix("GroupIpAddress");
    if let Some(var_4843) = &input.group_ip_address {
        scope_4842.string(var_4843);
    }
    #[allow(unused_mut)]
    let mut scope_4844 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_4845) = &input.network_interface_ids {
        let mut list_4847 = scope_4844.start_list(true, Some("item"));
        for item_4846 in var_4845 {
            #[allow(unused_mut)]
            let mut entry_4848 = list_4847.entry();
            entry_4848.string(item_4846);
        }
        list_4847.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4849 = writer.prefix("DryRun");
    if let Some(var_4850) = &input.dry_run {
        scope_4849.boolean(*var_4850);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4851 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4852) = &input.transit_gateway_multicast_domain_id {
        scope_4851.string(var_4852);
    }
    #[allow(unused_mut)]
    let mut scope_4853 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4854) = &input.transit_gateway_attachment_id {
        scope_4853.string(var_4854);
    }
    #[allow(unused_mut)]
    let mut scope_4855 = writer.prefix("SubnetIds");
    if let Some(var_4856) = &input.subnet_ids {
        let mut list_4858 = scope_4855.start_list(true, Some("item"));
        for item_4857 in var_4856 {
            #[allow(unused_mut)]
            let mut entry_4859 = list_4858.entry();
            entry_4859.string(item_4857);
        }
        list_4858.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4860 = writer.prefix("DryRun");
    if let Some(var_4861) = &input.dry_run {
        scope_4860.boolean(*var_4861);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4862 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4863) = &input.transit_gateway_attachment_id {
        scope_4862.string(var_4863);
    }
    #[allow(unused_mut)]
    let mut scope_4864 = writer.prefix("DryRun");
    if let Some(var_4865) = &input.dry_run {
        scope_4864.boolean(*var_4865);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RejectTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4866 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4867) = &input.transit_gateway_attachment_id {
        scope_4866.string(var_4867);
    }
    #[allow(unused_mut)]
    let mut scope_4868 = writer.prefix("DryRun");
    if let Some(var_4869) = &input.dry_run {
        scope_4868.boolean(*var_4869);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4870 = writer.prefix("DryRun");
    if let Some(var_4871) = &input.dry_run {
        scope_4870.boolean(*var_4871);
    }
    #[allow(unused_mut)]
    let mut scope_4872 = writer.prefix("ServiceId");
    if let Some(var_4873) = &input.service_id {
        scope_4872.string(var_4873);
    }
    #[allow(unused_mut)]
    let mut scope_4874 = writer.prefix("VpcEndpointId");
    if let Some(var_4875) = &input.vpc_endpoint_ids {
        let mut list_4877 = scope_4874.start_list(true, Some("item"));
        for item_4876 in var_4875 {
            #[allow(unused_mut)]
            let mut entry_4878 = list_4877.entry();
            entry_4878.string(item_4876);
        }
        list_4877.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4879 = writer.prefix("DryRun");
    if let Some(var_4880) = &input.dry_run {
        scope_4879.boolean(*var_4880);
    }
    #[allow(unused_mut)]
    let mut scope_4881 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4882) = &input.vpc_peering_connection_id {
        scope_4881.string(var_4882);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4883 = writer.prefix("AllocationId");
    if let Some(var_4884) = &input.allocation_id {
        scope_4883.string(var_4884);
    }
    #[allow(unused_mut)]
    let mut scope_4885 = writer.prefix("PublicIp");
    if let Some(var_4886) = &input.public_ip {
        scope_4885.string(var_4886);
    }
    #[allow(unused_mut)]
    let mut scope_4887 = writer.prefix("NetworkBorderGroup");
    if let Some(var_4888) = &input.network_border_group {
        scope_4887.string(var_4888);
    }
    #[allow(unused_mut)]
    let mut scope_4889 = writer.prefix("DryRun");
    if let Some(var_4890) = &input.dry_run {
        scope_4889.boolean(*var_4890);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4891 = writer.prefix("HostId");
    if let Some(var_4892) = &input.host_ids {
        let mut list_4894 = scope_4891.start_list(true, Some("item"));
        for item_4893 in var_4892 {
            #[allow(unused_mut)]
            let mut entry_4895 = list_4894.entry();
            entry_4895.string(item_4893);
        }
        list_4894.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4896 = writer.prefix("IamInstanceProfile");
    if let Some(var_4897) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_iam_instance_profile_specification(
            scope_4896, var_4897,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4898 = writer.prefix("AssociationId");
    if let Some(var_4899) = &input.association_id {
        scope_4898.string(var_4899);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4900 = writer.prefix("AssociationId");
    if let Some(var_4901) = &input.association_id {
        scope_4900.string(var_4901);
    }
    #[allow(unused_mut)]
    let mut scope_4902 = writer.prefix("DryRun");
    if let Some(var_4903) = &input.dry_run {
        scope_4902.boolean(*var_4903);
    }
    #[allow(unused_mut)]
    let mut scope_4904 = writer.prefix("NetworkAclId");
    if let Some(var_4905) = &input.network_acl_id {
        scope_4904.string(var_4905);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4906 = writer.prefix("CidrBlock");
    if let Some(var_4907) = &input.cidr_block {
        scope_4906.string(var_4907);
    }
    #[allow(unused_mut)]
    let mut scope_4908 = writer.prefix("DryRun");
    if let Some(var_4909) = &input.dry_run {
        scope_4908.boolean(*var_4909);
    }
    #[allow(unused_mut)]
    let mut scope_4910 = writer.prefix("Egress");
    if let Some(var_4911) = &input.egress {
        scope_4910.boolean(*var_4911);
    }
    #[allow(unused_mut)]
    let mut scope_4912 = writer.prefix("Icmp");
    if let Some(var_4913) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_icmp_type_code(scope_4912, var_4913);
    }
    #[allow(unused_mut)]
    let mut scope_4914 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_4915) = &input.ipv6_cidr_block {
        scope_4914.string(var_4915);
    }
    #[allow(unused_mut)]
    let mut scope_4916 = writer.prefix("NetworkAclId");
    if let Some(var_4917) = &input.network_acl_id {
        scope_4916.string(var_4917);
    }
    #[allow(unused_mut)]
    let mut scope_4918 = writer.prefix("PortRange");
    if let Some(var_4919) = &input.port_range {
        crate::query_ser::serialize_structure_port_range(scope_4918, var_4919);
    }
    #[allow(unused_mut)]
    let mut scope_4920 = writer.prefix("Protocol");
    if let Some(var_4921) = &input.protocol {
        scope_4920.string(var_4921);
    }
    #[allow(unused_mut)]
    let mut scope_4922 = writer.prefix("RuleAction");
    if let Some(var_4923) = &input.rule_action {
        scope_4922.string(var_4923.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4924 = writer.prefix("RuleNumber");
    if let Some(var_4925) = &input.rule_number {
        scope_4924.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4925).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4926 = writer.prefix("DestinationCidrBlock");
    if let Some(var_4927) = &input.destination_cidr_block {
        scope_4926.string(var_4927);
    }
    #[allow(unused_mut)]
    let mut scope_4928 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_4929) = &input.destination_ipv6_cidr_block {
        scope_4928.string(var_4929);
    }
    #[allow(unused_mut)]
    let mut scope_4930 = writer.prefix("DestinationPrefixListId");
    if let Some(var_4931) = &input.destination_prefix_list_id {
        scope_4930.string(var_4931);
    }
    #[allow(unused_mut)]
    let mut scope_4932 = writer.prefix("DryRun");
    if let Some(var_4933) = &input.dry_run {
        scope_4932.boolean(*var_4933);
    }
    #[allow(unused_mut)]
    let mut scope_4934 = writer.prefix("VpcEndpointId");
    if let Some(var_4935) = &input.vpc_endpoint_id {
        scope_4934.string(var_4935);
    }
    #[allow(unused_mut)]
    let mut scope_4936 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_4937) = &input.egress_only_internet_gateway_id {
        scope_4936.string(var_4937);
    }
    #[allow(unused_mut)]
    let mut scope_4938 = writer.prefix("GatewayId");
    if let Some(var_4939) = &input.gateway_id {
        scope_4938.string(var_4939);
    }
    #[allow(unused_mut)]
    let mut scope_4940 = writer.prefix("InstanceId");
    if let Some(var_4941) = &input.instance_id {
        scope_4940.string(var_4941);
    }
    #[allow(unused_mut)]
    let mut scope_4942 = writer.prefix("LocalTarget");
    if let Some(var_4943) = &input.local_target {
        scope_4942.boolean(*var_4943);
    }
    #[allow(unused_mut)]
    let mut scope_4944 = writer.prefix("NatGatewayId");
    if let Some(var_4945) = &input.nat_gateway_id {
        scope_4944.string(var_4945);
    }
    #[allow(unused_mut)]
    let mut scope_4946 = writer.prefix("TransitGatewayId");
    if let Some(var_4947) = &input.transit_gateway_id {
        scope_4946.string(var_4947);
    }
    #[allow(unused_mut)]
    let mut scope_4948 = writer.prefix("LocalGatewayId");
    if let Some(var_4949) = &input.local_gateway_id {
        scope_4948.string(var_4949);
    }
    #[allow(unused_mut)]
    let mut scope_4950 = writer.prefix("CarrierGatewayId");
    if let Some(var_4951) = &input.carrier_gateway_id {
        scope_4950.string(var_4951);
    }
    #[allow(unused_mut)]
    let mut scope_4952 = writer.prefix("NetworkInterfaceId");
    if let Some(var_4953) = &input.network_interface_id {
        scope_4952.string(var_4953);
    }
    #[allow(unused_mut)]
    let mut scope_4954 = writer.prefix("RouteTableId");
    if let Some(var_4955) = &input.route_table_id {
        scope_4954.string(var_4955);
    }
    #[allow(unused_mut)]
    let mut scope_4956 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4957) = &input.vpc_peering_connection_id {
        scope_4956.string(var_4957);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4958 = writer.prefix("AssociationId");
    if let Some(var_4959) = &input.association_id {
        scope_4958.string(var_4959);
    }
    #[allow(unused_mut)]
    let mut scope_4960 = writer.prefix("DryRun");
    if let Some(var_4961) = &input.dry_run {
        scope_4960.boolean(*var_4961);
    }
    #[allow(unused_mut)]
    let mut scope_4962 = writer.prefix("RouteTableId");
    if let Some(var_4963) = &input.route_table_id {
        scope_4962.string(var_4963);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4964 = writer.prefix("DestinationCidrBlock");
    if let Some(var_4965) = &input.destination_cidr_block {
        scope_4964.string(var_4965);
    }
    #[allow(unused_mut)]
    let mut scope_4966 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4967) = &input.transit_gateway_route_table_id {
        scope_4966.string(var_4967);
    }
    #[allow(unused_mut)]
    let mut scope_4968 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4969) = &input.transit_gateway_attachment_id {
        scope_4968.string(var_4969);
    }
    #[allow(unused_mut)]
    let mut scope_4970 = writer.prefix("Blackhole");
    if let Some(var_4971) = &input.blackhole {
        scope_4970.boolean(*var_4971);
    }
    #[allow(unused_mut)]
    let mut scope_4972 = writer.prefix("DryRun");
    if let Some(var_4973) = &input.dry_run {
        scope_4972.boolean(*var_4973);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4974 = writer.prefix("Description");
    if let Some(var_4975) = &input.description {
        scope_4974.string(var_4975);
    }
    #[allow(unused_mut)]
    let mut scope_4976 = writer.prefix("DryRun");
    if let Some(var_4977) = &input.dry_run {
        scope_4976.boolean(*var_4977);
    }
    #[allow(unused_mut)]
    let mut scope_4978 = writer.prefix("EndTime");
    if let Some(var_4979) = &input.end_time {
        scope_4978.instant(var_4979, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_4980 = writer.prefix("InstanceId");
    if let Some(var_4981) = &input.instances {
        let mut list_4983 = scope_4980.start_list(true, Some("InstanceId"));
        for item_4982 in var_4981 {
            #[allow(unused_mut)]
            let mut entry_4984 = list_4983.entry();
            entry_4984.string(item_4982);
        }
        list_4983.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4985 = writer.prefix("ReasonCode");
    if let Some(var_4986) = &input.reason_codes {
        let mut list_4988 = scope_4985.start_list(true, Some("item"));
        for item_4987 in var_4986 {
            #[allow(unused_mut)]
            let mut entry_4989 = list_4988.entry();
            entry_4989.string(item_4987.as_str());
        }
        list_4988.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4990 = writer.prefix("StartTime");
    if let Some(var_4991) = &input.start_time {
        scope_4990.instant(var_4991, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_4992 = writer.prefix("Status");
    if let Some(var_4993) = &input.status {
        scope_4992.string(var_4993.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4994 = writer.prefix("DryRun");
    if let Some(var_4995) = &input.dry_run {
        scope_4994.boolean(*var_4995);
    }
    #[allow(unused_mut)]
    let mut scope_4996 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_4997) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_spot_fleet_request_config_data(scope_4996, var_4997);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4998 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_4999) = &input.availability_zone_group {
        scope_4998.string(var_4999);
    }
    #[allow(unused_mut)]
    let mut scope_5000 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5001) = &input.block_duration_minutes {
        scope_5000.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5001).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5002 = writer.prefix("ClientToken");
    if let Some(var_5003) = &input.client_token {
        scope_5002.string(var_5003);
    }
    #[allow(unused_mut)]
    let mut scope_5004 = writer.prefix("DryRun");
    if let Some(var_5005) = &input.dry_run {
        scope_5004.boolean(*var_5005);
    }
    #[allow(unused_mut)]
    let mut scope_5006 = writer.prefix("InstanceCount");
    if let Some(var_5007) = &input.instance_count {
        scope_5006.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5007).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5008 = writer.prefix("LaunchGroup");
    if let Some(var_5009) = &input.launch_group {
        scope_5008.string(var_5009);
    }
    #[allow(unused_mut)]
    let mut scope_5010 = writer.prefix("LaunchSpecification");
    if let Some(var_5011) = &input.launch_specification {
        crate::query_ser::serialize_structure_request_spot_launch_specification(
            scope_5010, var_5011,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5012 = writer.prefix("SpotPrice");
    if let Some(var_5013) = &input.spot_price {
        scope_5012.string(var_5013);
    }
    #[allow(unused_mut)]
    let mut scope_5014 = writer.prefix("Type");
    if let Some(var_5015) = &input.r#type {
        scope_5014.string(var_5015.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5016 = writer.prefix("ValidFrom");
    if let Some(var_5017) = &input.valid_from {
        scope_5016.instant(var_5017, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_5018 = writer.prefix("ValidUntil");
    if let Some(var_5019) = &input.valid_until {
        scope_5018.instant(var_5019, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_5020 = writer.prefix("TagSpecification");
    if let Some(var_5021) = &input.tag_specifications {
        let mut list_5023 = scope_5020.start_list(true, Some("item"));
        for item_5022 in var_5021 {
            #[allow(unused_mut)]
            let mut entry_5024 = list_5023.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_5024, item_5022);
        }
        list_5023.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5025 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5026) = &input.instance_interruption_behavior {
        scope_5025.string(var_5026.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5027 = writer.prefix("AllocationId");
    if let Some(var_5028) = &input.allocation_id {
        scope_5027.string(var_5028);
    }
    #[allow(unused_mut)]
    let mut scope_5029 = writer.prefix("Attribute");
    if let Some(var_5030) = &input.attribute {
        scope_5029.string(var_5030.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5031 = writer.prefix("DryRun");
    if let Some(var_5032) = &input.dry_run {
        scope_5031.boolean(*var_5032);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5033 = writer.prefix("DryRun");
    if let Some(var_5034) = &input.dry_run {
        scope_5033.boolean(*var_5034);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5035 = writer.prefix("DryRun");
    if let Some(var_5036) = &input.dry_run {
        scope_5035.boolean(*var_5036);
    }
    #[allow(unused_mut)]
    let mut scope_5037 = writer.prefix("FpgaImageId");
    if let Some(var_5038) = &input.fpga_image_id {
        scope_5037.string(var_5038);
    }
    #[allow(unused_mut)]
    let mut scope_5039 = writer.prefix("Attribute");
    if let Some(var_5040) = &input.attribute {
        scope_5039.string(var_5040.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5041 = writer.prefix("Attribute");
    if let Some(var_5042) = &input.attribute {
        scope_5041.string(var_5042.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5043 = writer.prefix("ImageId");
    if let Some(var_5044) = &input.image_id {
        scope_5043.string(var_5044);
    }
    #[allow(unused_mut)]
    let mut scope_5045 = writer.prefix("DryRun");
    if let Some(var_5046) = &input.dry_run {
        scope_5045.boolean(*var_5046);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5047 = writer.prefix("Attribute");
    if let Some(var_5048) = &input.attribute {
        scope_5047.string(var_5048.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5049 = writer.prefix("DryRun");
    if let Some(var_5050) = &input.dry_run {
        scope_5049.boolean(*var_5050);
    }
    #[allow(unused_mut)]
    let mut scope_5051 = writer.prefix("InstanceId");
    if let Some(var_5052) = &input.instance_id {
        scope_5051.string(var_5052);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5053 = writer.prefix("DryRun");
    if let Some(var_5054) = &input.dry_run {
        scope_5053.boolean(*var_5054);
    }
    #[allow(unused_mut)]
    let mut scope_5055 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5056) = &input.network_interface_id {
        scope_5055.string(var_5056);
    }
    #[allow(unused_mut)]
    let mut scope_5057 = writer.prefix("SourceDestCheck");
    if let Some(var_5058) = &input.source_dest_check {
        scope_5057.string(var_5058);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5059 = writer.prefix("Attribute");
    if let Some(var_5060) = &input.attribute {
        scope_5059.string(var_5060.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5061 = writer.prefix("SnapshotId");
    if let Some(var_5062) = &input.snapshot_id {
        scope_5061.string(var_5062);
    }
    #[allow(unused_mut)]
    let mut scope_5063 = writer.prefix("DryRun");
    if let Some(var_5064) = &input.dry_run {
        scope_5063.boolean(*var_5064);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5065 = writer.prefix("DryRun");
    if let Some(var_5066) = &input.dry_run {
        scope_5065.boolean(*var_5066);
    }
    #[allow(unused_mut)]
    let mut scope_5067 = writer.prefix("PublicIp");
    if let Some(var_5068) = &input.public_ip {
        scope_5067.string(var_5068);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RestoreManagedPrefixListVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5069 = writer.prefix("DryRun");
    if let Some(var_5070) = &input.dry_run {
        scope_5069.boolean(*var_5070);
    }
    #[allow(unused_mut)]
    let mut scope_5071 = writer.prefix("PrefixListId");
    if let Some(var_5072) = &input.prefix_list_id {
        scope_5071.string(var_5072);
    }
    #[allow(unused_mut)]
    let mut scope_5073 = writer.prefix("PreviousVersion");
    if let Some(var_5074) = &input.previous_version {
        scope_5073.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5074).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5075 = writer.prefix("CurrentVersion");
    if let Some(var_5076) = &input.current_version {
        scope_5075.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5076).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5077 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5078) = &input.client_vpn_endpoint_id {
        scope_5077.string(var_5078);
    }
    #[allow(unused_mut)]
    let mut scope_5079 = writer.prefix("TargetNetworkCidr");
    if let Some(var_5080) = &input.target_network_cidr {
        scope_5079.string(var_5080);
    }
    #[allow(unused_mut)]
    let mut scope_5081 = writer.prefix("AccessGroupId");
    if let Some(var_5082) = &input.access_group_id {
        scope_5081.string(var_5082);
    }
    #[allow(unused_mut)]
    let mut scope_5083 = writer.prefix("RevokeAllGroups");
    if let Some(var_5084) = &input.revoke_all_groups {
        scope_5083.boolean(*var_5084);
    }
    #[allow(unused_mut)]
    let mut scope_5085 = writer.prefix("DryRun");
    if let Some(var_5086) = &input.dry_run {
        scope_5085.boolean(*var_5086);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5087 = writer.prefix("DryRun");
    if let Some(var_5088) = &input.dry_run {
        scope_5087.boolean(*var_5088);
    }
    #[allow(unused_mut)]
    let mut scope_5089 = writer.prefix("GroupId");
    if let Some(var_5090) = &input.group_id {
        scope_5089.string(var_5090);
    }
    #[allow(unused_mut)]
    let mut scope_5091 = writer.prefix("IpPermissions");
    if let Some(var_5092) = &input.ip_permissions {
        let mut list_5094 = scope_5091.start_list(true, Some("item"));
        for item_5093 in var_5092 {
            #[allow(unused_mut)]
            let mut entry_5095 = list_5094.entry();
            crate::query_ser::serialize_structure_ip_permission(entry_5095, item_5093);
        }
        list_5094.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5096 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5097) = &input.security_group_rule_ids {
        let mut list_5099 = scope_5096.start_list(true, Some("item"));
        for item_5098 in var_5097 {
            #[allow(unused_mut)]
            let mut entry_5100 = list_5099.entry();
            entry_5100.string(item_5098);
        }
        list_5099.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5101 = writer.prefix("CidrIp");
    if let Some(var_5102) = &input.cidr_ip {
        scope_5101.string(var_5102);
    }
    #[allow(unused_mut)]
    let mut scope_5103 = writer.prefix("FromPort");
    if let Some(var_5104) = &input.from_port {
        scope_5103.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5105 = writer.prefix("IpProtocol");
    if let Some(var_5106) = &input.ip_protocol {
        scope_5105.string(var_5106);
    }
    #[allow(unused_mut)]
    let mut scope_5107 = writer.prefix("ToPort");
    if let Some(var_5108) = &input.to_port {
        scope_5107.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5108).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5109 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5110) = &input.source_security_group_name {
        scope_5109.string(var_5110);
    }
    #[allow(unused_mut)]
    let mut scope_5111 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5112) = &input.source_security_group_owner_id {
        scope_5111.string(var_5112);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5113 = writer.prefix("CidrIp");
    if let Some(var_5114) = &input.cidr_ip {
        scope_5113.string(var_5114);
    }
    #[allow(unused_mut)]
    let mut scope_5115 = writer.prefix("FromPort");
    if let Some(var_5116) = &input.from_port {
        scope_5115.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5116).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5117 = writer.prefix("GroupId");
    if let Some(var_5118) = &input.group_id {
        scope_5117.string(var_5118);
    }
    #[allow(unused_mut)]
    let mut scope_5119 = writer.prefix("GroupName");
    if let Some(var_5120) = &input.group_name {
        scope_5119.string(var_5120);
    }
    #[allow(unused_mut)]
    let mut scope_5121 = writer.prefix("IpPermissions");
    if let Some(var_5122) = &input.ip_permissions {
        let mut list_5124 = scope_5121.start_list(true, Some("item"));
        for item_5123 in var_5122 {
            #[allow(unused_mut)]
            let mut entry_5125 = list_5124.entry();
            crate::query_ser::serialize_structure_ip_permission(entry_5125, item_5123);
        }
        list_5124.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5126 = writer.prefix("IpProtocol");
    if let Some(var_5127) = &input.ip_protocol {
        scope_5126.string(var_5127);
    }
    #[allow(unused_mut)]
    let mut scope_5128 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5129) = &input.source_security_group_name {
        scope_5128.string(var_5129);
    }
    #[allow(unused_mut)]
    let mut scope_5130 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5131) = &input.source_security_group_owner_id {
        scope_5130.string(var_5131);
    }
    #[allow(unused_mut)]
    let mut scope_5132 = writer.prefix("ToPort");
    if let Some(var_5133) = &input.to_port {
        scope_5132.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5133).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5134 = writer.prefix("DryRun");
    if let Some(var_5135) = &input.dry_run {
        scope_5134.boolean(*var_5135);
    }
    #[allow(unused_mut)]
    let mut scope_5136 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5137) = &input.security_group_rule_ids {
        let mut list_5139 = scope_5136.start_list(true, Some("item"));
        for item_5138 in var_5137 {
            #[allow(unused_mut)]
            let mut entry_5140 = list_5139.entry();
            entry_5140.string(item_5138);
        }
        list_5139.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5141 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5142) = &input.block_device_mappings {
        let mut list_5144 = scope_5141.start_list(true, Some("BlockDeviceMapping"));
        for item_5143 in var_5142 {
            #[allow(unused_mut)]
            let mut entry_5145 = list_5144.entry();
            crate::query_ser::serialize_structure_block_device_mapping(entry_5145, item_5143);
        }
        list_5144.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5146 = writer.prefix("ImageId");
    if let Some(var_5147) = &input.image_id {
        scope_5146.string(var_5147);
    }
    #[allow(unused_mut)]
    let mut scope_5148 = writer.prefix("InstanceType");
    if let Some(var_5149) = &input.instance_type {
        scope_5148.string(var_5149.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5150 = writer.prefix("Ipv6AddressCount");
    if let Some(var_5151) = &input.ipv6_address_count {
        scope_5150.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5151).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5152 = writer.prefix("Ipv6Address");
    if let Some(var_5153) = &input.ipv6_addresses {
        let mut list_5155 = scope_5152.start_list(true, Some("item"));
        for item_5154 in var_5153 {
            #[allow(unused_mut)]
            let mut entry_5156 = list_5155.entry();
            crate::query_ser::serialize_structure_instance_ipv6_address(entry_5156, item_5154);
        }
        list_5155.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5157 = writer.prefix("KernelId");
    if let Some(var_5158) = &input.kernel_id {
        scope_5157.string(var_5158);
    }
    #[allow(unused_mut)]
    let mut scope_5159 = writer.prefix("KeyName");
    if let Some(var_5160) = &input.key_name {
        scope_5159.string(var_5160);
    }
    #[allow(unused_mut)]
    let mut scope_5161 = writer.prefix("MaxCount");
    if let Some(var_5162) = &input.max_count {
        scope_5161.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5162).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5163 = writer.prefix("MinCount");
    if let Some(var_5164) = &input.min_count {
        scope_5163.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5164).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5165 = writer.prefix("Monitoring");
    if let Some(var_5166) = &input.monitoring {
        crate::query_ser::serialize_structure_run_instances_monitoring_enabled(
            scope_5165, var_5166,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5167 = writer.prefix("Placement");
    if let Some(var_5168) = &input.placement {
        crate::query_ser::serialize_structure_placement(scope_5167, var_5168);
    }
    #[allow(unused_mut)]
    let mut scope_5169 = writer.prefix("RamdiskId");
    if let Some(var_5170) = &input.ramdisk_id {
        scope_5169.string(var_5170);
    }
    #[allow(unused_mut)]
    let mut scope_5171 = writer.prefix("SecurityGroupId");
    if let Some(var_5172) = &input.security_group_ids {
        let mut list_5174 = scope_5171.start_list(true, Some("SecurityGroupId"));
        for item_5173 in var_5172 {
            #[allow(unused_mut)]
            let mut entry_5175 = list_5174.entry();
            entry_5175.string(item_5173);
        }
        list_5174.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5176 = writer.prefix("SecurityGroup");
    if let Some(var_5177) = &input.security_groups {
        let mut list_5179 = scope_5176.start_list(true, Some("SecurityGroup"));
        for item_5178 in var_5177 {
            #[allow(unused_mut)]
            let mut entry_5180 = list_5179.entry();
            entry_5180.string(item_5178);
        }
        list_5179.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5181 = writer.prefix("SubnetId");
    if let Some(var_5182) = &input.subnet_id {
        scope_5181.string(var_5182);
    }
    #[allow(unused_mut)]
    let mut scope_5183 = writer.prefix("UserData");
    if let Some(var_5184) = &input.user_data {
        scope_5183.string(var_5184);
    }
    #[allow(unused_mut)]
    let mut scope_5185 = writer.prefix("AdditionalInfo");
    if let Some(var_5186) = &input.additional_info {
        scope_5185.string(var_5186);
    }
    #[allow(unused_mut)]
    let mut scope_5187 = writer.prefix("ClientToken");
    if let Some(var_5188) = &input.client_token {
        scope_5187.string(var_5188);
    }
    #[allow(unused_mut)]
    let mut scope_5189 = writer.prefix("DisableApiTermination");
    if let Some(var_5190) = &input.disable_api_termination {
        scope_5189.boolean(*var_5190);
    }
    #[allow(unused_mut)]
    let mut scope_5191 = writer.prefix("DryRun");
    if let Some(var_5192) = &input.dry_run {
        scope_5191.boolean(*var_5192);
    }
    #[allow(unused_mut)]
    let mut scope_5193 = writer.prefix("EbsOptimized");
    if let Some(var_5194) = &input.ebs_optimized {
        scope_5193.boolean(*var_5194);
    }
    #[allow(unused_mut)]
    let mut scope_5195 = writer.prefix("IamInstanceProfile");
    if let Some(var_5196) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_iam_instance_profile_specification(
            scope_5195, var_5196,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5197 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5198) = &input.instance_initiated_shutdown_behavior {
        scope_5197.string(var_5198.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5199 = writer.prefix("NetworkInterface");
    if let Some(var_5200) = &input.network_interfaces {
        let mut list_5202 = scope_5199.start_list(true, Some("item"));
        for item_5201 in var_5200 {
            #[allow(unused_mut)]
            let mut entry_5203 = list_5202.entry();
            crate::query_ser::serialize_structure_instance_network_interface_specification(
                entry_5203, item_5201,
            );
        }
        list_5202.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5204 = writer.prefix("PrivateIpAddress");
    if let Some(var_5205) = &input.private_ip_address {
        scope_5204.string(var_5205);
    }
    #[allow(unused_mut)]
    let mut scope_5206 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_5207) = &input.elastic_gpu_specification {
        let mut list_5209 = scope_5206.start_list(true, Some("item"));
        for item_5208 in var_5207 {
            #[allow(unused_mut)]
            let mut entry_5210 = list_5209.entry();
            crate::query_ser::serialize_structure_elastic_gpu_specification(entry_5210, item_5208);
        }
        list_5209.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5211 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_5212) = &input.elastic_inference_accelerators {
        let mut list_5214 = scope_5211.start_list(true, Some("item"));
        for item_5213 in var_5212 {
            #[allow(unused_mut)]
            let mut entry_5215 = list_5214.entry();
            crate::query_ser::serialize_structure_elastic_inference_accelerator(
                entry_5215, item_5213,
            );
        }
        list_5214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5216 = writer.prefix("TagSpecification");
    if let Some(var_5217) = &input.tag_specifications {
        let mut list_5219 = scope_5216.start_list(true, Some("item"));
        for item_5218 in var_5217 {
            #[allow(unused_mut)]
            let mut entry_5220 = list_5219.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_5220, item_5218);
        }
        list_5219.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5221 = writer.prefix("LaunchTemplate");
    if let Some(var_5222) = &input.launch_template {
        crate::query_ser::serialize_structure_launch_template_specification(scope_5221, var_5222);
    }
    #[allow(unused_mut)]
    let mut scope_5223 = writer.prefix("InstanceMarketOptions");
    if let Some(var_5224) = &input.instance_market_options {
        crate::query_ser::serialize_structure_instance_market_options_request(scope_5223, var_5224);
    }
    #[allow(unused_mut)]
    let mut scope_5225 = writer.prefix("CreditSpecification");
    if let Some(var_5226) = &input.credit_specification {
        crate::query_ser::serialize_structure_credit_specification_request(scope_5225, var_5226);
    }
    #[allow(unused_mut)]
    let mut scope_5227 = writer.prefix("CpuOptions");
    if let Some(var_5228) = &input.cpu_options {
        crate::query_ser::serialize_structure_cpu_options_request(scope_5227, var_5228);
    }
    #[allow(unused_mut)]
    let mut scope_5229 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5230) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_capacity_reservation_specification(
            scope_5229, var_5230,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5231 = writer.prefix("HibernationOptions");
    if let Some(var_5232) = &input.hibernation_options {
        crate::query_ser::serialize_structure_hibernation_options_request(scope_5231, var_5232);
    }
    #[allow(unused_mut)]
    let mut scope_5233 = writer.prefix("LicenseSpecification");
    if let Some(var_5234) = &input.license_specifications {
        let mut list_5236 = scope_5233.start_list(true, Some("item"));
        for item_5235 in var_5234 {
            #[allow(unused_mut)]
            let mut entry_5237 = list_5236.entry();
            crate::query_ser::serialize_structure_license_configuration_request(
                entry_5237, item_5235,
            );
        }
        list_5236.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5238 = writer.prefix("MetadataOptions");
    if let Some(var_5239) = &input.metadata_options {
        crate::query_ser::serialize_structure_instance_metadata_options_request(
            scope_5238, var_5239,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5240 = writer.prefix("EnclaveOptions");
    if let Some(var_5241) = &input.enclave_options {
        crate::query_ser::serialize_structure_enclave_options_request(scope_5240, var_5241);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5242 = writer.prefix("ClientToken");
    if let Some(var_5243) = &input.client_token {
        scope_5242.string(var_5243);
    }
    #[allow(unused_mut)]
    let mut scope_5244 = writer.prefix("DryRun");
    if let Some(var_5245) = &input.dry_run {
        scope_5244.boolean(*var_5245);
    }
    #[allow(unused_mut)]
    let mut scope_5246 = writer.prefix("InstanceCount");
    if let Some(var_5247) = &input.instance_count {
        scope_5246.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5247).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5248 = writer.prefix("LaunchSpecification");
    if let Some(var_5249) = &input.launch_specification {
        crate::query_ser::serialize_structure_scheduled_instances_launch_specification(
            scope_5248, var_5249,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5250 = writer.prefix("ScheduledInstanceId");
    if let Some(var_5251) = &input.scheduled_instance_id {
        scope_5250.string(var_5251);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5252 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_5253) = &input.local_gateway_route_table_id {
        scope_5252.string(var_5253);
    }
    #[allow(unused_mut)]
    let mut scope_5254 = writer.prefix("Filter");
    if let Some(var_5255) = &input.filters {
        let mut list_5257 = scope_5254.start_list(true, Some("Filter"));
        for item_5256 in var_5255 {
            #[allow(unused_mut)]
            let mut entry_5258 = list_5257.entry();
            crate::query_ser::serialize_structure_filter(entry_5258, item_5256);
        }
        list_5257.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5259 = writer.prefix("MaxResults");
    if let Some(var_5260) = &input.max_results {
        scope_5259.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5260).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5261 = writer.prefix("NextToken");
    if let Some(var_5262) = &input.next_token {
        scope_5261.string(var_5262);
    }
    #[allow(unused_mut)]
    let mut scope_5263 = writer.prefix("DryRun");
    if let Some(var_5264) = &input.dry_run {
        scope_5263.boolean(*var_5264);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5265 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5266) = &input.transit_gateway_multicast_domain_id {
        scope_5265.string(var_5266);
    }
    #[allow(unused_mut)]
    let mut scope_5267 = writer.prefix("Filter");
    if let Some(var_5268) = &input.filters {
        let mut list_5270 = scope_5267.start_list(true, Some("Filter"));
        for item_5269 in var_5268 {
            #[allow(unused_mut)]
            let mut entry_5271 = list_5270.entry();
            crate::query_ser::serialize_structure_filter(entry_5271, item_5269);
        }
        list_5270.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5272 = writer.prefix("MaxResults");
    if let Some(var_5273) = &input.max_results {
        scope_5272.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5273).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5274 = writer.prefix("NextToken");
    if let Some(var_5275) = &input.next_token {
        scope_5274.string(var_5275);
    }
    #[allow(unused_mut)]
    let mut scope_5276 = writer.prefix("DryRun");
    if let Some(var_5277) = &input.dry_run {
        scope_5276.boolean(*var_5277);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5278 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5279) = &input.transit_gateway_route_table_id {
        scope_5278.string(var_5279);
    }
    #[allow(unused_mut)]
    let mut scope_5280 = writer.prefix("Filter");
    if let Some(var_5281) = &input.filters {
        let mut list_5283 = scope_5280.start_list(true, Some("Filter"));
        for item_5282 in var_5281 {
            #[allow(unused_mut)]
            let mut entry_5284 = list_5283.entry();
            crate::query_ser::serialize_structure_filter(entry_5284, item_5282);
        }
        list_5283.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5285 = writer.prefix("MaxResults");
    if let Some(var_5286) = &input.max_results {
        scope_5285.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5286).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5287 = writer.prefix("DryRun");
    if let Some(var_5288) = &input.dry_run {
        scope_5287.boolean(*var_5288);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5289 = writer.prefix("InstanceId");
    if let Some(var_5290) = &input.instance_id {
        scope_5289.string(var_5290);
    }
    #[allow(unused_mut)]
    let mut scope_5291 = writer.prefix("DryRun");
    if let Some(var_5292) = &input.dry_run {
        scope_5291.boolean(*var_5292);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5293 = writer.prefix("InstanceId");
    if let Some(var_5294) = &input.instance_ids {
        let mut list_5296 = scope_5293.start_list(true, Some("InstanceId"));
        for item_5295 in var_5294 {
            #[allow(unused_mut)]
            let mut entry_5297 = list_5296.entry();
            entry_5297.string(item_5295);
        }
        list_5296.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5298 = writer.prefix("AdditionalInfo");
    if let Some(var_5299) = &input.additional_info {
        scope_5298.string(var_5299);
    }
    #[allow(unused_mut)]
    let mut scope_5300 = writer.prefix("DryRun");
    if let Some(var_5301) = &input.dry_run {
        scope_5300.boolean(*var_5301);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5302 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_5303) = &input.network_insights_path_id {
        scope_5302.string(var_5303);
    }
    #[allow(unused_mut)]
    let mut scope_5304 = writer.prefix("FilterInArn");
    if let Some(var_5305) = &input.filter_in_arns {
        let mut list_5307 = scope_5304.start_list(true, Some("item"));
        for item_5306 in var_5305 {
            #[allow(unused_mut)]
            let mut entry_5308 = list_5307.entry();
            entry_5308.string(item_5306);
        }
        list_5307.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5309 = writer.prefix("DryRun");
    if let Some(var_5310) = &input.dry_run {
        scope_5309.boolean(*var_5310);
    }
    #[allow(unused_mut)]
    let mut scope_5311 = writer.prefix("TagSpecification");
    if let Some(var_5312) = &input.tag_specifications {
        let mut list_5314 = scope_5311.start_list(true, Some("item"));
        for item_5313 in var_5312 {
            #[allow(unused_mut)]
            let mut entry_5315 = list_5314.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_5315, item_5313);
        }
        list_5314.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5316 = writer.prefix("ClientToken");
    if let Some(var_5317) = &input.client_token {
        scope_5316.string(var_5317);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5318 = writer.prefix("DryRun");
    if let Some(var_5319) = &input.dry_run {
        scope_5318.boolean(*var_5319);
    }
    #[allow(unused_mut)]
    let mut scope_5320 = writer.prefix("ServiceId");
    if let Some(var_5321) = &input.service_id {
        scope_5320.string(var_5321);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5322 = writer.prefix("InstanceId");
    if let Some(var_5323) = &input.instance_ids {
        let mut list_5325 = scope_5322.start_list(true, Some("InstanceId"));
        for item_5324 in var_5323 {
            #[allow(unused_mut)]
            let mut entry_5326 = list_5325.entry();
            entry_5326.string(item_5324);
        }
        list_5325.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5327 = writer.prefix("Hibernate");
    if let Some(var_5328) = &input.hibernate {
        scope_5327.boolean(*var_5328);
    }
    #[allow(unused_mut)]
    let mut scope_5329 = writer.prefix("DryRun");
    if let Some(var_5330) = &input.dry_run {
        scope_5329.boolean(*var_5330);
    }
    #[allow(unused_mut)]
    let mut scope_5331 = writer.prefix("Force");
    if let Some(var_5332) = &input.force {
        scope_5331.boolean(*var_5332);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5333 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5334) = &input.client_vpn_endpoint_id {
        scope_5333.string(var_5334);
    }
    #[allow(unused_mut)]
    let mut scope_5335 = writer.prefix("ConnectionId");
    if let Some(var_5336) = &input.connection_id {
        scope_5335.string(var_5336);
    }
    #[allow(unused_mut)]
    let mut scope_5337 = writer.prefix("Username");
    if let Some(var_5338) = &input.username {
        scope_5337.string(var_5338);
    }
    #[allow(unused_mut)]
    let mut scope_5339 = writer.prefix("DryRun");
    if let Some(var_5340) = &input.dry_run {
        scope_5339.boolean(*var_5340);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5341 = writer.prefix("InstanceId");
    if let Some(var_5342) = &input.instance_ids {
        let mut list_5344 = scope_5341.start_list(true, Some("InstanceId"));
        for item_5343 in var_5342 {
            #[allow(unused_mut)]
            let mut entry_5345 = list_5344.entry();
            entry_5345.string(item_5343);
        }
        list_5344.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5346 = writer.prefix("DryRun");
    if let Some(var_5347) = &input.dry_run {
        scope_5346.boolean(*var_5347);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5348 = writer.prefix("Ipv6Addresses");
    if let Some(var_5349) = &input.ipv6_addresses {
        let mut list_5351 = scope_5348.start_list(true, Some("item"));
        for item_5350 in var_5349 {
            #[allow(unused_mut)]
            let mut entry_5352 = list_5351.entry();
            entry_5352.string(item_5350);
        }
        list_5351.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5353 = writer.prefix("Ipv6Prefix");
    if let Some(var_5354) = &input.ipv6_prefixes {
        let mut list_5356 = scope_5353.start_list(true, Some("item"));
        for item_5355 in var_5354 {
            #[allow(unused_mut)]
            let mut entry_5357 = list_5356.entry();
            entry_5357.string(item_5355);
        }
        list_5356.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5358 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5359) = &input.network_interface_id {
        scope_5358.string(var_5359);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5360 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5361) = &input.network_interface_id {
        scope_5360.string(var_5361);
    }
    #[allow(unused_mut)]
    let mut scope_5362 = writer.prefix("PrivateIpAddress");
    if let Some(var_5363) = &input.private_ip_addresses {
        let mut list_5365 = scope_5362.start_list(true, Some("PrivateIpAddress"));
        for item_5364 in var_5363 {
            #[allow(unused_mut)]
            let mut entry_5366 = list_5365.entry();
            entry_5366.string(item_5364);
        }
        list_5365.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5367 = writer.prefix("Ipv4Prefix");
    if let Some(var_5368) = &input.ipv4_prefixes {
        let mut list_5370 = scope_5367.start_list(true, Some("item"));
        for item_5369 in var_5368 {
            #[allow(unused_mut)]
            let mut entry_5371 = list_5370.entry();
            entry_5371.string(item_5369);
        }
        list_5370.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5372 = writer.prefix("InstanceId");
    if let Some(var_5373) = &input.instance_ids {
        let mut list_5375 = scope_5372.start_list(true, Some("InstanceId"));
        for item_5374 in var_5373 {
            #[allow(unused_mut)]
            let mut entry_5376 = list_5375.entry();
            entry_5376.string(item_5374);
        }
        list_5375.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5377 = writer.prefix("DryRun");
    if let Some(var_5378) = &input.dry_run {
        scope_5377.boolean(*var_5378);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5379 = writer.prefix("DryRun");
    if let Some(var_5380) = &input.dry_run {
        scope_5379.boolean(*var_5380);
    }
    #[allow(unused_mut)]
    let mut scope_5381 = writer.prefix("GroupId");
    if let Some(var_5382) = &input.group_id {
        scope_5381.string(var_5382);
    }
    #[allow(unused_mut)]
    let mut scope_5383 = writer.prefix("GroupName");
    if let Some(var_5384) = &input.group_name {
        scope_5383.string(var_5384);
    }
    #[allow(unused_mut)]
    let mut scope_5385 = writer.prefix("IpPermissions");
    if let Some(var_5386) = &input.ip_permissions {
        let mut list_5388 = scope_5385.start_list(true, Some("item"));
        for item_5387 in var_5386 {
            #[allow(unused_mut)]
            let mut entry_5389 = list_5388.entry();
            crate::query_ser::serialize_structure_ip_permission(entry_5389, item_5387);
        }
        list_5388.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5390 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_5391) = &input.security_group_rule_descriptions {
        let mut list_5393 = scope_5390.start_list(true, Some("item"));
        for item_5392 in var_5391 {
            #[allow(unused_mut)]
            let mut entry_5394 = list_5393.entry();
            crate::query_ser::serialize_structure_security_group_rule_description(
                entry_5394, item_5392,
            );
        }
        list_5393.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5395 = writer.prefix("DryRun");
    if let Some(var_5396) = &input.dry_run {
        scope_5395.boolean(*var_5396);
    }
    #[allow(unused_mut)]
    let mut scope_5397 = writer.prefix("GroupId");
    if let Some(var_5398) = &input.group_id {
        scope_5397.string(var_5398);
    }
    #[allow(unused_mut)]
    let mut scope_5399 = writer.prefix("GroupName");
    if let Some(var_5400) = &input.group_name {
        scope_5399.string(var_5400);
    }
    #[allow(unused_mut)]
    let mut scope_5401 = writer.prefix("IpPermissions");
    if let Some(var_5402) = &input.ip_permissions {
        let mut list_5404 = scope_5401.start_list(true, Some("item"));
        for item_5403 in var_5402 {
            #[allow(unused_mut)]
            let mut entry_5405 = list_5404.entry();
            crate::query_ser::serialize_structure_ip_permission(entry_5405, item_5403);
        }
        list_5404.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5406 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_5407) = &input.security_group_rule_descriptions {
        let mut list_5409 = scope_5406.start_list(true, Some("item"));
        for item_5408 in var_5407 {
            #[allow(unused_mut)]
            let mut entry_5410 = list_5409.entry();
            crate::query_ser::serialize_structure_security_group_rule_description(
                entry_5410, item_5408,
            );
        }
        list_5409.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5411 = writer.prefix("Cidr");
    if let Some(var_5412) = &input.cidr {
        scope_5411.string(var_5412);
    }
    #[allow(unused_mut)]
    let mut scope_5413 = writer.prefix("DryRun");
    if let Some(var_5414) = &input.dry_run {
        scope_5413.boolean(*var_5414);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}
