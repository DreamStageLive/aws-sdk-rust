// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_instance_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddInstanceFleetInput,
) {
    if let Some(var_1) = &input.cluster_id {
        object.key("ClusterId").string(var_1);
    }
    if let Some(var_2) = &input.instance_fleet {
        let mut object_3 = object.key("InstanceFleet").start_object();
        crate::json_ser::serialize_structure_instance_fleet_config(&mut object_3, var_2);
        object_3.finish();
    }
}

pub fn serialize_structure_add_instance_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddInstanceGroupsInput,
) {
    if let Some(var_4) = &input.instance_groups {
        let mut array_5 = object.key("InstanceGroups").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_instance_group_config(&mut object_7, item_6);
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.job_flow_id {
        object.key("JobFlowId").string(var_8);
    }
}

pub fn serialize_structure_add_job_flow_steps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddJobFlowStepsInput,
) {
    if let Some(var_9) = &input.job_flow_id {
        object.key("JobFlowId").string(var_9);
    }
    if let Some(var_10) = &input.steps {
        let mut array_11 = object.key("Steps").start_array();
        for item_12 in var_10 {
            {
                let mut object_13 = array_11.value().start_object();
                crate::json_ser::serialize_structure_step_config(&mut object_13, item_12);
                object_13.finish();
            }
        }
        array_11.finish();
    }
}

pub fn serialize_structure_add_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsInput,
) {
    if let Some(var_14) = &input.resource_id {
        object.key("ResourceId").string(var_14);
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_18, item_17);
                object_18.finish();
            }
        }
        array_16.finish();
    }
}

pub fn serialize_structure_cancel_steps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelStepsInput,
) {
    if let Some(var_19) = &input.cluster_id {
        object.key("ClusterId").string(var_19);
    }
    if let Some(var_20) = &input.step_ids {
        let mut array_21 = object.key("StepIds").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22);
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.step_cancellation_option {
        object.key("StepCancellationOption").string(var_23.as_str());
    }
}

pub fn serialize_structure_create_security_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityConfigurationInput,
) {
    if let Some(var_24) = &input.name {
        object.key("Name").string(var_24);
    }
    if let Some(var_25) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_25);
    }
}

pub fn serialize_structure_create_studio_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStudioInput,
) {
    if let Some(var_26) = &input.name {
        object.key("Name").string(var_26);
    }
    if let Some(var_27) = &input.description {
        object.key("Description").string(var_27);
    }
    if let Some(var_28) = &input.auth_mode {
        object.key("AuthMode").string(var_28.as_str());
    }
    if let Some(var_29) = &input.vpc_id {
        object.key("VpcId").string(var_29);
    }
    if let Some(var_30) = &input.subnet_ids {
        let mut array_31 = object.key("SubnetIds").start_array();
        for item_32 in var_30 {
            {
                array_31.value().string(item_32);
            }
        }
        array_31.finish();
    }
    if let Some(var_33) = &input.service_role {
        object.key("ServiceRole").string(var_33);
    }
    if let Some(var_34) = &input.user_role {
        object.key("UserRole").string(var_34);
    }
    if let Some(var_35) = &input.workspace_security_group_id {
        object.key("WorkspaceSecurityGroupId").string(var_35);
    }
    if let Some(var_36) = &input.engine_security_group_id {
        object.key("EngineSecurityGroupId").string(var_36);
    }
    if let Some(var_37) = &input.default_s3_location {
        object.key("DefaultS3Location").string(var_37);
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("Tags").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_41, item_40);
                object_41.finish();
            }
        }
        array_39.finish();
    }
}

pub fn serialize_structure_create_studio_session_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStudioSessionMappingInput,
) {
    if let Some(var_42) = &input.studio_id {
        object.key("StudioId").string(var_42);
    }
    if let Some(var_43) = &input.identity_id {
        object.key("IdentityId").string(var_43);
    }
    if let Some(var_44) = &input.identity_name {
        object.key("IdentityName").string(var_44);
    }
    if let Some(var_45) = &input.identity_type {
        object.key("IdentityType").string(var_45.as_str());
    }
    if let Some(var_46) = &input.session_policy_arn {
        object.key("SessionPolicyArn").string(var_46);
    }
}

pub fn serialize_structure_delete_security_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSecurityConfigurationInput,
) {
    if let Some(var_47) = &input.name {
        object.key("Name").string(var_47);
    }
}

pub fn serialize_structure_delete_studio_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStudioInput,
) {
    if let Some(var_48) = &input.studio_id {
        object.key("StudioId").string(var_48);
    }
}

pub fn serialize_structure_delete_studio_session_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStudioSessionMappingInput,
) {
    if let Some(var_49) = &input.studio_id {
        object.key("StudioId").string(var_49);
    }
    if let Some(var_50) = &input.identity_id {
        object.key("IdentityId").string(var_50);
    }
    if let Some(var_51) = &input.identity_name {
        object.key("IdentityName").string(var_51);
    }
    if let Some(var_52) = &input.identity_type {
        object.key("IdentityType").string(var_52.as_str());
    }
}

pub fn serialize_structure_describe_cluster_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeClusterInput,
) {
    if let Some(var_53) = &input.cluster_id {
        object.key("ClusterId").string(var_53);
    }
}

pub fn serialize_structure_describe_job_flows_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobFlowsInput,
) {
    if let Some(var_54) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_54, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_55) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_55, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_56) = &input.job_flow_ids {
        let mut array_57 = object.key("JobFlowIds").start_array();
        for item_58 in var_56 {
            {
                array_57.value().string(item_58);
            }
        }
        array_57.finish();
    }
    if let Some(var_59) = &input.job_flow_states {
        let mut array_60 = object.key("JobFlowStates").start_array();
        for item_61 in var_59 {
            {
                array_60.value().string(item_61.as_str());
            }
        }
        array_60.finish();
    }
}

pub fn serialize_structure_describe_notebook_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookExecutionInput,
) {
    if let Some(var_62) = &input.notebook_execution_id {
        object.key("NotebookExecutionId").string(var_62);
    }
}

pub fn serialize_structure_describe_release_label_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReleaseLabelInput,
) {
    if let Some(var_63) = &input.release_label {
        object.key("ReleaseLabel").string(var_63);
    }
    if let Some(var_64) = &input.next_token {
        object.key("NextToken").string(var_64);
    }
    if let Some(var_65) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_65).into()),
        );
    }
}

pub fn serialize_structure_describe_security_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSecurityConfigurationInput,
) {
    if let Some(var_66) = &input.name {
        object.key("Name").string(var_66);
    }
}

pub fn serialize_structure_describe_step_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStepInput,
) {
    if let Some(var_67) = &input.cluster_id {
        object.key("ClusterId").string(var_67);
    }
    if let Some(var_68) = &input.step_id {
        object.key("StepId").string(var_68);
    }
}

pub fn serialize_structure_describe_studio_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStudioInput,
) {
    if let Some(var_69) = &input.studio_id {
        object.key("StudioId").string(var_69);
    }
}

pub fn serialize_structure_get_managed_scaling_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetManagedScalingPolicyInput,
) {
    if let Some(var_70) = &input.cluster_id {
        object.key("ClusterId").string(var_70);
    }
}

pub fn serialize_structure_get_studio_session_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStudioSessionMappingInput,
) {
    if let Some(var_71) = &input.studio_id {
        object.key("StudioId").string(var_71);
    }
    if let Some(var_72) = &input.identity_id {
        object.key("IdentityId").string(var_72);
    }
    if let Some(var_73) = &input.identity_name {
        object.key("IdentityName").string(var_73);
    }
    if let Some(var_74) = &input.identity_type {
        object.key("IdentityType").string(var_74.as_str());
    }
}

pub fn serialize_structure_list_bootstrap_actions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBootstrapActionsInput,
) {
    if let Some(var_75) = &input.cluster_id {
        object.key("ClusterId").string(var_75);
    }
    if let Some(var_76) = &input.marker {
        object.key("Marker").string(var_76);
    }
}

pub fn serialize_structure_list_clusters_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListClustersInput,
) {
    if let Some(var_77) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_77, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_78) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_78, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_79) = &input.cluster_states {
        let mut array_80 = object.key("ClusterStates").start_array();
        for item_81 in var_79 {
            {
                array_80.value().string(item_81.as_str());
            }
        }
        array_80.finish();
    }
    if let Some(var_82) = &input.marker {
        object.key("Marker").string(var_82);
    }
}

pub fn serialize_structure_list_instance_fleets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInstanceFleetsInput,
) {
    if let Some(var_83) = &input.cluster_id {
        object.key("ClusterId").string(var_83);
    }
    if let Some(var_84) = &input.marker {
        object.key("Marker").string(var_84);
    }
}

pub fn serialize_structure_list_instance_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInstanceGroupsInput,
) {
    if let Some(var_85) = &input.cluster_id {
        object.key("ClusterId").string(var_85);
    }
    if let Some(var_86) = &input.marker {
        object.key("Marker").string(var_86);
    }
}

pub fn serialize_structure_list_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInstancesInput,
) {
    if let Some(var_87) = &input.cluster_id {
        object.key("ClusterId").string(var_87);
    }
    if let Some(var_88) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_88);
    }
    if let Some(var_89) = &input.instance_group_types {
        let mut array_90 = object.key("InstanceGroupTypes").start_array();
        for item_91 in var_89 {
            {
                array_90.value().string(item_91.as_str());
            }
        }
        array_90.finish();
    }
    if let Some(var_92) = &input.instance_fleet_id {
        object.key("InstanceFleetId").string(var_92);
    }
    if let Some(var_93) = &input.instance_fleet_type {
        object.key("InstanceFleetType").string(var_93.as_str());
    }
    if let Some(var_94) = &input.instance_states {
        let mut array_95 = object.key("InstanceStates").start_array();
        for item_96 in var_94 {
            {
                array_95.value().string(item_96.as_str());
            }
        }
        array_95.finish();
    }
    if let Some(var_97) = &input.marker {
        object.key("Marker").string(var_97);
    }
}

pub fn serialize_structure_list_notebook_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookExecutionsInput,
) {
    if let Some(var_98) = &input.editor_id {
        object.key("EditorId").string(var_98);
    }
    if let Some(var_99) = &input.status {
        object.key("Status").string(var_99.as_str());
    }
    if let Some(var_100) = &input.from {
        object
            .key("From")
            .instant(var_100, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_101) = &input.to {
        object
            .key("To")
            .instant(var_101, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_102) = &input.marker {
        object.key("Marker").string(var_102);
    }
}

pub fn serialize_structure_list_release_labels_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListReleaseLabelsInput,
) {
    if let Some(var_103) = &input.filters {
        let mut object_104 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_release_label_filter(&mut object_104, var_103);
        object_104.finish();
    }
    if let Some(var_105) = &input.next_token {
        object.key("NextToken").string(var_105);
    }
    if let Some(var_106) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_106).into()),
        );
    }
}

pub fn serialize_structure_list_security_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSecurityConfigurationsInput,
) {
    if let Some(var_107) = &input.marker {
        object.key("Marker").string(var_107);
    }
}

pub fn serialize_structure_list_steps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStepsInput,
) {
    if let Some(var_108) = &input.cluster_id {
        object.key("ClusterId").string(var_108);
    }
    if let Some(var_109) = &input.step_states {
        let mut array_110 = object.key("StepStates").start_array();
        for item_111 in var_109 {
            {
                array_110.value().string(item_111.as_str());
            }
        }
        array_110.finish();
    }
    if let Some(var_112) = &input.step_ids {
        let mut array_113 = object.key("StepIds").start_array();
        for item_114 in var_112 {
            {
                array_113.value().string(item_114);
            }
        }
        array_113.finish();
    }
    if let Some(var_115) = &input.marker {
        object.key("Marker").string(var_115);
    }
}

pub fn serialize_structure_list_studios_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStudiosInput,
) {
    if let Some(var_116) = &input.marker {
        object.key("Marker").string(var_116);
    }
}

pub fn serialize_structure_list_studio_session_mappings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStudioSessionMappingsInput,
) {
    if let Some(var_117) = &input.studio_id {
        object.key("StudioId").string(var_117);
    }
    if let Some(var_118) = &input.identity_type {
        object.key("IdentityType").string(var_118.as_str());
    }
    if let Some(var_119) = &input.marker {
        object.key("Marker").string(var_119);
    }
}

pub fn serialize_structure_modify_cluster_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyClusterInput,
) {
    if let Some(var_120) = &input.cluster_id {
        object.key("ClusterId").string(var_120);
    }
    if let Some(var_121) = &input.step_concurrency_level {
        object.key("StepConcurrencyLevel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_121).into()),
        );
    }
}

pub fn serialize_structure_modify_instance_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyInstanceFleetInput,
) {
    if let Some(var_122) = &input.cluster_id {
        object.key("ClusterId").string(var_122);
    }
    if let Some(var_123) = &input.instance_fleet {
        let mut object_124 = object.key("InstanceFleet").start_object();
        crate::json_ser::serialize_structure_instance_fleet_modify_config(&mut object_124, var_123);
        object_124.finish();
    }
}

pub fn serialize_structure_modify_instance_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyInstanceGroupsInput,
) {
    if let Some(var_125) = &input.cluster_id {
        object.key("ClusterId").string(var_125);
    }
    if let Some(var_126) = &input.instance_groups {
        let mut array_127 = object.key("InstanceGroups").start_array();
        for item_128 in var_126 {
            {
                let mut object_129 = array_127.value().start_object();
                crate::json_ser::serialize_structure_instance_group_modify_config(
                    &mut object_129,
                    item_128,
                );
                object_129.finish();
            }
        }
        array_127.finish();
    }
}

pub fn serialize_structure_put_auto_scaling_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAutoScalingPolicyInput,
) {
    if let Some(var_130) = &input.cluster_id {
        object.key("ClusterId").string(var_130);
    }
    if let Some(var_131) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_131);
    }
    if let Some(var_132) = &input.auto_scaling_policy {
        let mut object_133 = object.key("AutoScalingPolicy").start_object();
        crate::json_ser::serialize_structure_auto_scaling_policy(&mut object_133, var_132);
        object_133.finish();
    }
}

pub fn serialize_structure_put_block_public_access_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutBlockPublicAccessConfigurationInput,
) {
    if let Some(var_134) = &input.block_public_access_configuration {
        let mut object_135 = object.key("BlockPublicAccessConfiguration").start_object();
        crate::json_ser::serialize_structure_block_public_access_configuration(
            &mut object_135,
            var_134,
        );
        object_135.finish();
    }
}

pub fn serialize_structure_put_managed_scaling_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutManagedScalingPolicyInput,
) {
    if let Some(var_136) = &input.cluster_id {
        object.key("ClusterId").string(var_136);
    }
    if let Some(var_137) = &input.managed_scaling_policy {
        let mut object_138 = object.key("ManagedScalingPolicy").start_object();
        crate::json_ser::serialize_structure_managed_scaling_policy(&mut object_138, var_137);
        object_138.finish();
    }
}

pub fn serialize_structure_remove_auto_scaling_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveAutoScalingPolicyInput,
) {
    if let Some(var_139) = &input.cluster_id {
        object.key("ClusterId").string(var_139);
    }
    if let Some(var_140) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_140);
    }
}

pub fn serialize_structure_remove_managed_scaling_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveManagedScalingPolicyInput,
) {
    if let Some(var_141) = &input.cluster_id {
        object.key("ClusterId").string(var_141);
    }
}

pub fn serialize_structure_remove_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsInput,
) {
    if let Some(var_142) = &input.resource_id {
        object.key("ResourceId").string(var_142);
    }
    if let Some(var_143) = &input.tag_keys {
        let mut array_144 = object.key("TagKeys").start_array();
        for item_145 in var_143 {
            {
                array_144.value().string(item_145);
            }
        }
        array_144.finish();
    }
}

pub fn serialize_structure_run_job_flow_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RunJobFlowInput,
) {
    if let Some(var_146) = &input.name {
        object.key("Name").string(var_146);
    }
    if let Some(var_147) = &input.log_uri {
        object.key("LogUri").string(var_147);
    }
    if let Some(var_148) = &input.log_encryption_kms_key_id {
        object.key("LogEncryptionKmsKeyId").string(var_148);
    }
    if let Some(var_149) = &input.additional_info {
        object.key("AdditionalInfo").string(var_149);
    }
    if let Some(var_150) = &input.ami_version {
        object.key("AmiVersion").string(var_150);
    }
    if let Some(var_151) = &input.release_label {
        object.key("ReleaseLabel").string(var_151);
    }
    if let Some(var_152) = &input.instances {
        let mut object_153 = object.key("Instances").start_object();
        crate::json_ser::serialize_structure_job_flow_instances_config(&mut object_153, var_152);
        object_153.finish();
    }
    if let Some(var_154) = &input.steps {
        let mut array_155 = object.key("Steps").start_array();
        for item_156 in var_154 {
            {
                let mut object_157 = array_155.value().start_object();
                crate::json_ser::serialize_structure_step_config(&mut object_157, item_156);
                object_157.finish();
            }
        }
        array_155.finish();
    }
    if let Some(var_158) = &input.bootstrap_actions {
        let mut array_159 = object.key("BootstrapActions").start_array();
        for item_160 in var_158 {
            {
                let mut object_161 = array_159.value().start_object();
                crate::json_ser::serialize_structure_bootstrap_action_config(
                    &mut object_161,
                    item_160,
                );
                object_161.finish();
            }
        }
        array_159.finish();
    }
    if let Some(var_162) = &input.supported_products {
        let mut array_163 = object.key("SupportedProducts").start_array();
        for item_164 in var_162 {
            {
                array_163.value().string(item_164);
            }
        }
        array_163.finish();
    }
    if let Some(var_165) = &input.new_supported_products {
        let mut array_166 = object.key("NewSupportedProducts").start_array();
        for item_167 in var_165 {
            {
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_supported_product_config(
                    &mut object_168,
                    item_167,
                );
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.applications {
        let mut array_170 = object.key("Applications").start_array();
        for item_171 in var_169 {
            {
                let mut object_172 = array_170.value().start_object();
                crate::json_ser::serialize_structure_application(&mut object_172, item_171);
                object_172.finish();
            }
        }
        array_170.finish();
    }
    if let Some(var_173) = &input.configurations {
        let mut array_174 = object.key("Configurations").start_array();
        for item_175 in var_173 {
            {
                let mut object_176 = array_174.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_176, item_175);
                object_176.finish();
            }
        }
        array_174.finish();
    }
    if input.visible_to_all_users {
        object
            .key("VisibleToAllUsers")
            .boolean(input.visible_to_all_users);
    }
    if let Some(var_177) = &input.job_flow_role {
        object.key("JobFlowRole").string(var_177);
    }
    if let Some(var_178) = &input.service_role {
        object.key("ServiceRole").string(var_178);
    }
    if let Some(var_179) = &input.tags {
        let mut array_180 = object.key("Tags").start_array();
        for item_181 in var_179 {
            {
                let mut object_182 = array_180.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_182, item_181);
                object_182.finish();
            }
        }
        array_180.finish();
    }
    if let Some(var_183) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_183);
    }
    if let Some(var_184) = &input.auto_scaling_role {
        object.key("AutoScalingRole").string(var_184);
    }
    if let Some(var_185) = &input.scale_down_behavior {
        object.key("ScaleDownBehavior").string(var_185.as_str());
    }
    if let Some(var_186) = &input.custom_ami_id {
        object.key("CustomAmiId").string(var_186);
    }
    if let Some(var_187) = &input.ebs_root_volume_size {
        object.key("EbsRootVolumeSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_187).into()),
        );
    }
    if let Some(var_188) = &input.repo_upgrade_on_boot {
        object.key("RepoUpgradeOnBoot").string(var_188.as_str());
    }
    if let Some(var_189) = &input.kerberos_attributes {
        let mut object_190 = object.key("KerberosAttributes").start_object();
        crate::json_ser::serialize_structure_kerberos_attributes(&mut object_190, var_189);
        object_190.finish();
    }
    if let Some(var_191) = &input.step_concurrency_level {
        object.key("StepConcurrencyLevel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_191).into()),
        );
    }
    if let Some(var_192) = &input.managed_scaling_policy {
        let mut object_193 = object.key("ManagedScalingPolicy").start_object();
        crate::json_ser::serialize_structure_managed_scaling_policy(&mut object_193, var_192);
        object_193.finish();
    }
    if let Some(var_194) = &input.placement_group_configs {
        let mut array_195 = object.key("PlacementGroupConfigs").start_array();
        for item_196 in var_194 {
            {
                let mut object_197 = array_195.value().start_object();
                crate::json_ser::serialize_structure_placement_group_config(
                    &mut object_197,
                    item_196,
                );
                object_197.finish();
            }
        }
        array_195.finish();
    }
}

pub fn serialize_structure_set_termination_protection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetTerminationProtectionInput,
) {
    if let Some(var_198) = &input.job_flow_ids {
        let mut array_199 = object.key("JobFlowIds").start_array();
        for item_200 in var_198 {
            {
                array_199.value().string(item_200);
            }
        }
        array_199.finish();
    }
    {
        object
            .key("TerminationProtected")
            .boolean(input.termination_protected);
    }
}

pub fn serialize_structure_set_visible_to_all_users_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetVisibleToAllUsersInput,
) {
    if let Some(var_201) = &input.job_flow_ids {
        let mut array_202 = object.key("JobFlowIds").start_array();
        for item_203 in var_201 {
            {
                array_202.value().string(item_203);
            }
        }
        array_202.finish();
    }
    {
        object
            .key("VisibleToAllUsers")
            .boolean(input.visible_to_all_users);
    }
}

pub fn serialize_structure_start_notebook_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartNotebookExecutionInput,
) {
    if let Some(var_204) = &input.editor_id {
        object.key("EditorId").string(var_204);
    }
    if let Some(var_205) = &input.relative_path {
        object.key("RelativePath").string(var_205);
    }
    if let Some(var_206) = &input.notebook_execution_name {
        object.key("NotebookExecutionName").string(var_206);
    }
    if let Some(var_207) = &input.notebook_params {
        object.key("NotebookParams").string(var_207);
    }
    if let Some(var_208) = &input.execution_engine {
        let mut object_209 = object.key("ExecutionEngine").start_object();
        crate::json_ser::serialize_structure_execution_engine_config(&mut object_209, var_208);
        object_209.finish();
    }
    if let Some(var_210) = &input.service_role {
        object.key("ServiceRole").string(var_210);
    }
    if let Some(var_211) = &input.notebook_instance_security_group_id {
        object
            .key("NotebookInstanceSecurityGroupId")
            .string(var_211);
    }
    if let Some(var_212) = &input.tags {
        let mut array_213 = object.key("Tags").start_array();
        for item_214 in var_212 {
            {
                let mut object_215 = array_213.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_215, item_214);
                object_215.finish();
            }
        }
        array_213.finish();
    }
}

pub fn serialize_structure_stop_notebook_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopNotebookExecutionInput,
) {
    if let Some(var_216) = &input.notebook_execution_id {
        object.key("NotebookExecutionId").string(var_216);
    }
}

pub fn serialize_structure_terminate_job_flows_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateJobFlowsInput,
) {
    if let Some(var_217) = &input.job_flow_ids {
        let mut array_218 = object.key("JobFlowIds").start_array();
        for item_219 in var_217 {
            {
                array_218.value().string(item_219);
            }
        }
        array_218.finish();
    }
}

pub fn serialize_structure_update_studio_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStudioInput,
) {
    if let Some(var_220) = &input.studio_id {
        object.key("StudioId").string(var_220);
    }
    if let Some(var_221) = &input.name {
        object.key("Name").string(var_221);
    }
    if let Some(var_222) = &input.description {
        object.key("Description").string(var_222);
    }
    if let Some(var_223) = &input.subnet_ids {
        let mut array_224 = object.key("SubnetIds").start_array();
        for item_225 in var_223 {
            {
                array_224.value().string(item_225);
            }
        }
        array_224.finish();
    }
    if let Some(var_226) = &input.default_s3_location {
        object.key("DefaultS3Location").string(var_226);
    }
}

pub fn serialize_structure_update_studio_session_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStudioSessionMappingInput,
) {
    if let Some(var_227) = &input.studio_id {
        object.key("StudioId").string(var_227);
    }
    if let Some(var_228) = &input.identity_id {
        object.key("IdentityId").string(var_228);
    }
    if let Some(var_229) = &input.identity_name {
        object.key("IdentityName").string(var_229);
    }
    if let Some(var_230) = &input.identity_type {
        object.key("IdentityType").string(var_230.as_str());
    }
    if let Some(var_231) = &input.session_policy_arn {
        object.key("SessionPolicyArn").string(var_231);
    }
}

pub fn serialize_structure_instance_fleet_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceFleetConfig,
) {
    if let Some(var_232) = &input.name {
        object.key("Name").string(var_232);
    }
    if let Some(var_233) = &input.instance_fleet_type {
        object.key("InstanceFleetType").string(var_233.as_str());
    }
    if let Some(var_234) = &input.target_on_demand_capacity {
        object.key("TargetOnDemandCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_234).into()),
        );
    }
    if let Some(var_235) = &input.target_spot_capacity {
        object.key("TargetSpotCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_235).into()),
        );
    }
    if let Some(var_236) = &input.instance_type_configs {
        let mut array_237 = object.key("InstanceTypeConfigs").start_array();
        for item_238 in var_236 {
            {
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_instance_type_config(
                    &mut object_239,
                    item_238,
                );
                object_239.finish();
            }
        }
        array_237.finish();
    }
    if let Some(var_240) = &input.launch_specifications {
        let mut object_241 = object.key("LaunchSpecifications").start_object();
        crate::json_ser::serialize_structure_instance_fleet_provisioning_specifications(
            &mut object_241,
            var_240,
        );
        object_241.finish();
    }
}

pub fn serialize_structure_instance_group_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceGroupConfig,
) {
    if let Some(var_242) = &input.name {
        object.key("Name").string(var_242);
    }
    if let Some(var_243) = &input.market {
        object.key("Market").string(var_243.as_str());
    }
    if let Some(var_244) = &input.instance_role {
        object.key("InstanceRole").string(var_244.as_str());
    }
    if let Some(var_245) = &input.bid_price {
        object.key("BidPrice").string(var_245);
    }
    if let Some(var_246) = &input.instance_type {
        object.key("InstanceType").string(var_246);
    }
    if let Some(var_247) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_247).into()),
        );
    }
    if let Some(var_248) = &input.configurations {
        let mut array_249 = object.key("Configurations").start_array();
        for item_250 in var_248 {
            {
                let mut object_251 = array_249.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_251, item_250);
                object_251.finish();
            }
        }
        array_249.finish();
    }
    if let Some(var_252) = &input.ebs_configuration {
        let mut object_253 = object.key("EbsConfiguration").start_object();
        crate::json_ser::serialize_structure_ebs_configuration(&mut object_253, var_252);
        object_253.finish();
    }
    if let Some(var_254) = &input.auto_scaling_policy {
        let mut object_255 = object.key("AutoScalingPolicy").start_object();
        crate::json_ser::serialize_structure_auto_scaling_policy(&mut object_255, var_254);
        object_255.finish();
    }
}

pub fn serialize_structure_step_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StepConfig,
) {
    if let Some(var_256) = &input.name {
        object.key("Name").string(var_256);
    }
    if let Some(var_257) = &input.action_on_failure {
        object.key("ActionOnFailure").string(var_257.as_str());
    }
    if let Some(var_258) = &input.hadoop_jar_step {
        let mut object_259 = object.key("HadoopJarStep").start_object();
        crate::json_ser::serialize_structure_hadoop_jar_step_config(&mut object_259, var_258);
        object_259.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_260) = &input.key {
        object.key("Key").string(var_260);
    }
    if let Some(var_261) = &input.value {
        object.key("Value").string(var_261);
    }
}

pub fn serialize_structure_release_label_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReleaseLabelFilter,
) {
    if let Some(var_262) = &input.prefix {
        object.key("Prefix").string(var_262);
    }
    if let Some(var_263) = &input.application {
        object.key("Application").string(var_263);
    }
}

pub fn serialize_structure_instance_fleet_modify_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceFleetModifyConfig,
) {
    if let Some(var_264) = &input.instance_fleet_id {
        object.key("InstanceFleetId").string(var_264);
    }
    if let Some(var_265) = &input.target_on_demand_capacity {
        object.key("TargetOnDemandCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_265).into()),
        );
    }
    if let Some(var_266) = &input.target_spot_capacity {
        object.key("TargetSpotCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_266).into()),
        );
    }
}

pub fn serialize_structure_instance_group_modify_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceGroupModifyConfig,
) {
    if let Some(var_267) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_267);
    }
    if let Some(var_268) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_268).into()),
        );
    }
    if let Some(var_269) = &input.ec2_instance_ids_to_terminate {
        let mut array_270 = object.key("EC2InstanceIdsToTerminate").start_array();
        for item_271 in var_269 {
            {
                array_270.value().string(item_271);
            }
        }
        array_270.finish();
    }
    if let Some(var_272) = &input.shrink_policy {
        let mut object_273 = object.key("ShrinkPolicy").start_object();
        crate::json_ser::serialize_structure_shrink_policy(&mut object_273, var_272);
        object_273.finish();
    }
    if let Some(var_274) = &input.configurations {
        let mut array_275 = object.key("Configurations").start_array();
        for item_276 in var_274 {
            {
                let mut object_277 = array_275.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_277, item_276);
                object_277.finish();
            }
        }
        array_275.finish();
    }
}

pub fn serialize_structure_auto_scaling_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoScalingPolicy,
) {
    if let Some(var_278) = &input.constraints {
        let mut object_279 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_scaling_constraints(&mut object_279, var_278);
        object_279.finish();
    }
    if let Some(var_280) = &input.rules {
        let mut array_281 = object.key("Rules").start_array();
        for item_282 in var_280 {
            {
                let mut object_283 = array_281.value().start_object();
                crate::json_ser::serialize_structure_scaling_rule(&mut object_283, item_282);
                object_283.finish();
            }
        }
        array_281.finish();
    }
}

pub fn serialize_structure_block_public_access_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlockPublicAccessConfiguration,
) {
    {
        object
            .key("BlockPublicSecurityGroupRules")
            .boolean(input.block_public_security_group_rules);
    }
    if let Some(var_284) = &input.permitted_public_security_group_rule_ranges {
        let mut array_285 = object
            .key("PermittedPublicSecurityGroupRuleRanges")
            .start_array();
        for item_286 in var_284 {
            {
                let mut object_287 = array_285.value().start_object();
                crate::json_ser::serialize_structure_port_range(&mut object_287, item_286);
                object_287.finish();
            }
        }
        array_285.finish();
    }
    if let Some(var_288) = &input.classification {
        object.key("Classification").string(var_288);
    }
    if let Some(var_289) = &input.configurations {
        let mut array_290 = object.key("Configurations").start_array();
        for item_291 in var_289 {
            {
                let mut object_292 = array_290.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_292, item_291);
                object_292.finish();
            }
        }
        array_290.finish();
    }
    if let Some(var_293) = &input.properties {
        let mut object_294 = object.key("Properties").start_object();
        for (key_295, value_296) in var_293 {
            {
                object_294.key(key_295).string(value_296);
            }
        }
        object_294.finish();
    }
}

pub fn serialize_structure_managed_scaling_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManagedScalingPolicy,
) {
    if let Some(var_297) = &input.compute_limits {
        let mut object_298 = object.key("ComputeLimits").start_object();
        crate::json_ser::serialize_structure_compute_limits(&mut object_298, var_297);
        object_298.finish();
    }
}

pub fn serialize_structure_job_flow_instances_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobFlowInstancesConfig,
) {
    if let Some(var_299) = &input.master_instance_type {
        object.key("MasterInstanceType").string(var_299);
    }
    if let Some(var_300) = &input.slave_instance_type {
        object.key("SlaveInstanceType").string(var_300);
    }
    if let Some(var_301) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_301).into()),
        );
    }
    if let Some(var_302) = &input.instance_groups {
        let mut array_303 = object.key("InstanceGroups").start_array();
        for item_304 in var_302 {
            {
                let mut object_305 = array_303.value().start_object();
                crate::json_ser::serialize_structure_instance_group_config(
                    &mut object_305,
                    item_304,
                );
                object_305.finish();
            }
        }
        array_303.finish();
    }
    if let Some(var_306) = &input.instance_fleets {
        let mut array_307 = object.key("InstanceFleets").start_array();
        for item_308 in var_306 {
            {
                let mut object_309 = array_307.value().start_object();
                crate::json_ser::serialize_structure_instance_fleet_config(
                    &mut object_309,
                    item_308,
                );
                object_309.finish();
            }
        }
        array_307.finish();
    }
    if let Some(var_310) = &input.ec2_key_name {
        object.key("Ec2KeyName").string(var_310);
    }
    if let Some(var_311) = &input.placement {
        let mut object_312 = object.key("Placement").start_object();
        crate::json_ser::serialize_structure_placement_type(&mut object_312, var_311);
        object_312.finish();
    }
    if input.keep_job_flow_alive_when_no_steps {
        object
            .key("KeepJobFlowAliveWhenNoSteps")
            .boolean(input.keep_job_flow_alive_when_no_steps);
    }
    if input.termination_protected {
        object
            .key("TerminationProtected")
            .boolean(input.termination_protected);
    }
    if let Some(var_313) = &input.hadoop_version {
        object.key("HadoopVersion").string(var_313);
    }
    if let Some(var_314) = &input.ec2_subnet_id {
        object.key("Ec2SubnetId").string(var_314);
    }
    if let Some(var_315) = &input.ec2_subnet_ids {
        let mut array_316 = object.key("Ec2SubnetIds").start_array();
        for item_317 in var_315 {
            {
                array_316.value().string(item_317);
            }
        }
        array_316.finish();
    }
    if let Some(var_318) = &input.emr_managed_master_security_group {
        object.key("EmrManagedMasterSecurityGroup").string(var_318);
    }
    if let Some(var_319) = &input.emr_managed_slave_security_group {
        object.key("EmrManagedSlaveSecurityGroup").string(var_319);
    }
    if let Some(var_320) = &input.service_access_security_group {
        object.key("ServiceAccessSecurityGroup").string(var_320);
    }
    if let Some(var_321) = &input.additional_master_security_groups {
        let mut array_322 = object.key("AdditionalMasterSecurityGroups").start_array();
        for item_323 in var_321 {
            {
                array_322.value().string(item_323);
            }
        }
        array_322.finish();
    }
    if let Some(var_324) = &input.additional_slave_security_groups {
        let mut array_325 = object.key("AdditionalSlaveSecurityGroups").start_array();
        for item_326 in var_324 {
            {
                array_325.value().string(item_326);
            }
        }
        array_325.finish();
    }
}

pub fn serialize_structure_bootstrap_action_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BootstrapActionConfig,
) {
    if let Some(var_327) = &input.name {
        object.key("Name").string(var_327);
    }
    if let Some(var_328) = &input.script_bootstrap_action {
        let mut object_329 = object.key("ScriptBootstrapAction").start_object();
        crate::json_ser::serialize_structure_script_bootstrap_action_config(
            &mut object_329,
            var_328,
        );
        object_329.finish();
    }
}

pub fn serialize_structure_supported_product_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SupportedProductConfig,
) {
    if let Some(var_330) = &input.name {
        object.key("Name").string(var_330);
    }
    if let Some(var_331) = &input.args {
        let mut array_332 = object.key("Args").start_array();
        for item_333 in var_331 {
            {
                array_332.value().string(item_333);
            }
        }
        array_332.finish();
    }
}

pub fn serialize_structure_application(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Application,
) {
    if let Some(var_334) = &input.name {
        object.key("Name").string(var_334);
    }
    if let Some(var_335) = &input.version {
        object.key("Version").string(var_335);
    }
    if let Some(var_336) = &input.args {
        let mut array_337 = object.key("Args").start_array();
        for item_338 in var_336 {
            {
                array_337.value().string(item_338);
            }
        }
        array_337.finish();
    }
    if let Some(var_339) = &input.additional_info {
        let mut object_340 = object.key("AdditionalInfo").start_object();
        for (key_341, value_342) in var_339 {
            {
                object_340.key(key_341).string(value_342);
            }
        }
        object_340.finish();
    }
}

pub fn serialize_structure_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Configuration,
) {
    if let Some(var_343) = &input.classification {
        object.key("Classification").string(var_343);
    }
    if let Some(var_344) = &input.configurations {
        let mut array_345 = object.key("Configurations").start_array();
        for item_346 in var_344 {
            {
                let mut object_347 = array_345.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_347, item_346);
                object_347.finish();
            }
        }
        array_345.finish();
    }
    if let Some(var_348) = &input.properties {
        let mut object_349 = object.key("Properties").start_object();
        for (key_350, value_351) in var_348 {
            {
                object_349.key(key_350).string(value_351);
            }
        }
        object_349.finish();
    }
}

pub fn serialize_structure_kerberos_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KerberosAttributes,
) {
    if let Some(var_352) = &input.realm {
        object.key("Realm").string(var_352);
    }
    if let Some(var_353) = &input.kdc_admin_password {
        object.key("KdcAdminPassword").string(var_353);
    }
    if let Some(var_354) = &input.cross_realm_trust_principal_password {
        object
            .key("CrossRealmTrustPrincipalPassword")
            .string(var_354);
    }
    if let Some(var_355) = &input.ad_domain_join_user {
        object.key("ADDomainJoinUser").string(var_355);
    }
    if let Some(var_356) = &input.ad_domain_join_password {
        object.key("ADDomainJoinPassword").string(var_356);
    }
}

pub fn serialize_structure_placement_group_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementGroupConfig,
) {
    if let Some(var_357) = &input.instance_role {
        object.key("InstanceRole").string(var_357.as_str());
    }
    if let Some(var_358) = &input.placement_strategy {
        object.key("PlacementStrategy").string(var_358.as_str());
    }
}

pub fn serialize_structure_execution_engine_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecutionEngineConfig,
) {
    if let Some(var_359) = &input.id {
        object.key("Id").string(var_359);
    }
    if let Some(var_360) = &input.r#type {
        object.key("Type").string(var_360.as_str());
    }
    if let Some(var_361) = &input.master_instance_security_group_id {
        object.key("MasterInstanceSecurityGroupId").string(var_361);
    }
}

pub fn serialize_structure_instance_type_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceTypeConfig,
) {
    if let Some(var_362) = &input.instance_type {
        object.key("InstanceType").string(var_362);
    }
    if let Some(var_363) = &input.weighted_capacity {
        object.key("WeightedCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_363).into()),
        );
    }
    if let Some(var_364) = &input.bid_price {
        object.key("BidPrice").string(var_364);
    }
    if let Some(var_365) = &input.bid_price_as_percentage_of_on_demand_price {
        object.key("BidPriceAsPercentageOfOnDemandPrice").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_365).into()),
        );
    }
    if let Some(var_366) = &input.ebs_configuration {
        let mut object_367 = object.key("EbsConfiguration").start_object();
        crate::json_ser::serialize_structure_ebs_configuration(&mut object_367, var_366);
        object_367.finish();
    }
    if let Some(var_368) = &input.configurations {
        let mut array_369 = object.key("Configurations").start_array();
        for item_370 in var_368 {
            {
                let mut object_371 = array_369.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_371, item_370);
                object_371.finish();
            }
        }
        array_369.finish();
    }
}

pub fn serialize_structure_instance_fleet_provisioning_specifications(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceFleetProvisioningSpecifications,
) {
    if let Some(var_372) = &input.spot_specification {
        let mut object_373 = object.key("SpotSpecification").start_object();
        crate::json_ser::serialize_structure_spot_provisioning_specification(
            &mut object_373,
            var_372,
        );
        object_373.finish();
    }
    if let Some(var_374) = &input.on_demand_specification {
        let mut object_375 = object.key("OnDemandSpecification").start_object();
        crate::json_ser::serialize_structure_on_demand_provisioning_specification(
            &mut object_375,
            var_374,
        );
        object_375.finish();
    }
}

pub fn serialize_structure_ebs_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EbsConfiguration,
) {
    if let Some(var_376) = &input.ebs_block_device_configs {
        let mut array_377 = object.key("EbsBlockDeviceConfigs").start_array();
        for item_378 in var_376 {
            {
                let mut object_379 = array_377.value().start_object();
                crate::json_ser::serialize_structure_ebs_block_device_config(
                    &mut object_379,
                    item_378,
                );
                object_379.finish();
            }
        }
        array_377.finish();
    }
    if let Some(var_380) = &input.ebs_optimized {
        object.key("EbsOptimized").boolean(*var_380);
    }
}

pub fn serialize_structure_hadoop_jar_step_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HadoopJarStepConfig,
) {
    if let Some(var_381) = &input.properties {
        let mut array_382 = object.key("Properties").start_array();
        for item_383 in var_381 {
            {
                let mut object_384 = array_382.value().start_object();
                crate::json_ser::serialize_structure_key_value(&mut object_384, item_383);
                object_384.finish();
            }
        }
        array_382.finish();
    }
    if let Some(var_385) = &input.jar {
        object.key("Jar").string(var_385);
    }
    if let Some(var_386) = &input.main_class {
        object.key("MainClass").string(var_386);
    }
    if let Some(var_387) = &input.args {
        let mut array_388 = object.key("Args").start_array();
        for item_389 in var_387 {
            {
                array_388.value().string(item_389);
            }
        }
        array_388.finish();
    }
}

pub fn serialize_structure_shrink_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ShrinkPolicy,
) {
    if let Some(var_390) = &input.decommission_timeout {
        object.key("DecommissionTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_390).into()),
        );
    }
    if let Some(var_391) = &input.instance_resize_policy {
        let mut object_392 = object.key("InstanceResizePolicy").start_object();
        crate::json_ser::serialize_structure_instance_resize_policy(&mut object_392, var_391);
        object_392.finish();
    }
}

pub fn serialize_structure_scaling_constraints(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingConstraints,
) {
    if let Some(var_393) = &input.min_capacity {
        object.key("MinCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_393).into()),
        );
    }
    if let Some(var_394) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_394).into()),
        );
    }
}

pub fn serialize_structure_scaling_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingRule,
) {
    if let Some(var_395) = &input.name {
        object.key("Name").string(var_395);
    }
    if let Some(var_396) = &input.description {
        object.key("Description").string(var_396);
    }
    if let Some(var_397) = &input.action {
        let mut object_398 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_scaling_action(&mut object_398, var_397);
        object_398.finish();
    }
    if let Some(var_399) = &input.trigger {
        let mut object_400 = object.key("Trigger").start_object();
        crate::json_ser::serialize_structure_scaling_trigger(&mut object_400, var_399);
        object_400.finish();
    }
}

pub fn serialize_structure_port_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRange,
) {
    if let Some(var_401) = &input.min_range {
        object.key("MinRange").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_401).into()),
        );
    }
    if let Some(var_402) = &input.max_range {
        object.key("MaxRange").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_402).into()),
        );
    }
}

pub fn serialize_structure_compute_limits(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputeLimits,
) {
    if let Some(var_403) = &input.unit_type {
        object.key("UnitType").string(var_403.as_str());
    }
    if let Some(var_404) = &input.minimum_capacity_units {
        object.key("MinimumCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_404).into()),
        );
    }
    if let Some(var_405) = &input.maximum_capacity_units {
        object.key("MaximumCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_405).into()),
        );
    }
    if let Some(var_406) = &input.maximum_on_demand_capacity_units {
        object.key("MaximumOnDemandCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_406).into()),
        );
    }
    if let Some(var_407) = &input.maximum_core_capacity_units {
        object.key("MaximumCoreCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_407).into()),
        );
    }
}

pub fn serialize_structure_placement_type(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementType,
) {
    if let Some(var_408) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_408);
    }
    if let Some(var_409) = &input.availability_zones {
        let mut array_410 = object.key("AvailabilityZones").start_array();
        for item_411 in var_409 {
            {
                array_410.value().string(item_411);
            }
        }
        array_410.finish();
    }
}

pub fn serialize_structure_script_bootstrap_action_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScriptBootstrapActionConfig,
) {
    if let Some(var_412) = &input.path {
        object.key("Path").string(var_412);
    }
    if let Some(var_413) = &input.args {
        let mut array_414 = object.key("Args").start_array();
        for item_415 in var_413 {
            {
                array_414.value().string(item_415);
            }
        }
        array_414.finish();
    }
}

pub fn serialize_structure_spot_provisioning_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SpotProvisioningSpecification,
) {
    if let Some(var_416) = &input.timeout_duration_minutes {
        object.key("TimeoutDurationMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_416).into()),
        );
    }
    if let Some(var_417) = &input.timeout_action {
        object.key("TimeoutAction").string(var_417.as_str());
    }
    if let Some(var_418) = &input.block_duration_minutes {
        object.key("BlockDurationMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_418).into()),
        );
    }
    if let Some(var_419) = &input.allocation_strategy {
        object.key("AllocationStrategy").string(var_419.as_str());
    }
}

pub fn serialize_structure_on_demand_provisioning_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnDemandProvisioningSpecification,
) {
    if let Some(var_420) = &input.allocation_strategy {
        object.key("AllocationStrategy").string(var_420.as_str());
    }
    if let Some(var_421) = &input.capacity_reservation_options {
        let mut object_422 = object.key("CapacityReservationOptions").start_object();
        crate::json_ser::serialize_structure_on_demand_capacity_reservation_options(
            &mut object_422,
            var_421,
        );
        object_422.finish();
    }
}

pub fn serialize_structure_ebs_block_device_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EbsBlockDeviceConfig,
) {
    if let Some(var_423) = &input.volume_specification {
        let mut object_424 = object.key("VolumeSpecification").start_object();
        crate::json_ser::serialize_structure_volume_specification(&mut object_424, var_423);
        object_424.finish();
    }
    if let Some(var_425) = &input.volumes_per_instance {
        object.key("VolumesPerInstance").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_425).into()),
        );
    }
}

pub fn serialize_structure_key_value(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeyValue,
) {
    if let Some(var_426) = &input.key {
        object.key("Key").string(var_426);
    }
    if let Some(var_427) = &input.value {
        object.key("Value").string(var_427);
    }
}

pub fn serialize_structure_instance_resize_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceResizePolicy,
) {
    if let Some(var_428) = &input.instances_to_terminate {
        let mut array_429 = object.key("InstancesToTerminate").start_array();
        for item_430 in var_428 {
            {
                array_429.value().string(item_430);
            }
        }
        array_429.finish();
    }
    if let Some(var_431) = &input.instances_to_protect {
        let mut array_432 = object.key("InstancesToProtect").start_array();
        for item_433 in var_431 {
            {
                array_432.value().string(item_433);
            }
        }
        array_432.finish();
    }
    if let Some(var_434) = &input.instance_termination_timeout {
        object.key("InstanceTerminationTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_434).into()),
        );
    }
}

pub fn serialize_structure_scaling_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingAction,
) {
    if let Some(var_435) = &input.market {
        object.key("Market").string(var_435.as_str());
    }
    if let Some(var_436) = &input.simple_scaling_policy_configuration {
        let mut object_437 = object
            .key("SimpleScalingPolicyConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_simple_scaling_policy_configuration(
            &mut object_437,
            var_436,
        );
        object_437.finish();
    }
}

pub fn serialize_structure_scaling_trigger(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingTrigger,
) {
    if let Some(var_438) = &input.cloud_watch_alarm_definition {
        let mut object_439 = object.key("CloudWatchAlarmDefinition").start_object();
        crate::json_ser::serialize_structure_cloud_watch_alarm_definition(&mut object_439, var_438);
        object_439.finish();
    }
}

pub fn serialize_structure_on_demand_capacity_reservation_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnDemandCapacityReservationOptions,
) {
    if let Some(var_440) = &input.usage_strategy {
        object.key("UsageStrategy").string(var_440.as_str());
    }
    if let Some(var_441) = &input.capacity_reservation_preference {
        object
            .key("CapacityReservationPreference")
            .string(var_441.as_str());
    }
    if let Some(var_442) = &input.capacity_reservation_resource_group_arn {
        object
            .key("CapacityReservationResourceGroupArn")
            .string(var_442);
    }
}

pub fn serialize_structure_volume_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VolumeSpecification,
) {
    if let Some(var_443) = &input.volume_type {
        object.key("VolumeType").string(var_443);
    }
    if let Some(var_444) = &input.iops {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_444).into()),
        );
    }
    if let Some(var_445) = &input.size_in_gb {
        object.key("SizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_445).into()),
        );
    }
}

pub fn serialize_structure_simple_scaling_policy_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SimpleScalingPolicyConfiguration,
) {
    if let Some(var_446) = &input.adjustment_type {
        object.key("AdjustmentType").string(var_446.as_str());
    }
    if let Some(var_447) = &input.scaling_adjustment {
        object.key("ScalingAdjustment").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_447).into()),
        );
    }
    if let Some(var_448) = &input.cool_down {
        object.key("CoolDown").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_448).into()),
        );
    }
}

pub fn serialize_structure_cloud_watch_alarm_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchAlarmDefinition,
) {
    if let Some(var_449) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_449.as_str());
    }
    if let Some(var_450) = &input.evaluation_periods {
        object.key("EvaluationPeriods").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_450).into()),
        );
    }
    if let Some(var_451) = &input.metric_name {
        object.key("MetricName").string(var_451);
    }
    if let Some(var_452) = &input.namespace {
        object.key("Namespace").string(var_452);
    }
    if let Some(var_453) = &input.period {
        object.key("Period").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_453).into()),
        );
    }
    if let Some(var_454) = &input.statistic {
        object.key("Statistic").string(var_454.as_str());
    }
    if let Some(var_455) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_455).into()),
        );
    }
    if let Some(var_456) = &input.unit {
        object.key("Unit").string(var_456.as_str());
    }
    if let Some(var_457) = &input.dimensions {
        let mut array_458 = object.key("Dimensions").start_array();
        for item_459 in var_457 {
            {
                let mut object_460 = array_458.value().start_object();
                crate::json_ser::serialize_structure_metric_dimension(&mut object_460, item_459);
                object_460.finish();
            }
        }
        array_458.finish();
    }
}

pub fn serialize_structure_metric_dimension(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDimension,
) {
    if let Some(var_461) = &input.key {
        object.key("Key").string(var_461);
    }
    if let Some(var_462) = &input.value {
        object.key("Value").string(var_462);
    }
}
