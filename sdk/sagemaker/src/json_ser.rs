// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddAssociationInput,
) {
    if let Some(var_1) = &input.source_arn {
        object.key("SourceArn").string(var_1);
    }
    if let Some(var_2) = &input.destination_arn {
        object.key("DestinationArn").string(var_2);
    }
    if let Some(var_3) = &input.association_type {
        object.key("AssociationType").string(var_3.as_str());
    }
}

pub fn serialize_structure_add_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsInput,
) {
    if let Some(var_4) = &input.resource_arn {
        object.key("ResourceArn").string(var_4);
    }
    if let Some(var_5) = &input.tags {
        let mut array_6 = object.key("Tags").start_array();
        for item_7 in var_5 {
            {
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_8, item_7);
                object_8.finish();
            }
        }
        array_6.finish();
    }
}

pub fn serialize_structure_associate_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateTrialComponentInput,
) {
    if let Some(var_9) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_9);
    }
    if let Some(var_10) = &input.trial_name {
        object.key("TrialName").string(var_10);
    }
}

pub fn serialize_structure_create_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActionInput,
) {
    if let Some(var_11) = &input.action_name {
        object.key("ActionName").string(var_11);
    }
    if let Some(var_12) = &input.source {
        let mut object_13 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_action_source(&mut object_13, var_12);
        object_13.finish();
    }
    if let Some(var_14) = &input.action_type {
        object.key("ActionType").string(var_14);
    }
    if let Some(var_15) = &input.description {
        object.key("Description").string(var_15);
    }
    if let Some(var_16) = &input.status {
        object.key("Status").string(var_16.as_str());
    }
    if let Some(var_17) = &input.properties {
        let mut object_18 = object.key("Properties").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19).string(value_20);
            }
        }
        object_18.finish();
    }
    if let Some(var_21) = &input.metadata_properties {
        let mut object_22 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_22, var_21);
        object_22.finish();
    }
    if let Some(var_23) = &input.tags {
        let mut array_24 = object.key("Tags").start_array();
        for item_25 in var_23 {
            {
                let mut object_26 = array_24.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_26, item_25);
                object_26.finish();
            }
        }
        array_24.finish();
    }
}

pub fn serialize_structure_create_algorithm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAlgorithmInput,
) {
    if let Some(var_27) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_27);
    }
    if let Some(var_28) = &input.algorithm_description {
        object.key("AlgorithmDescription").string(var_28);
    }
    if let Some(var_29) = &input.training_specification {
        let mut object_30 = object.key("TrainingSpecification").start_object();
        crate::json_ser::serialize_structure_training_specification(&mut object_30, var_29);
        object_30.finish();
    }
    if let Some(var_31) = &input.inference_specification {
        let mut object_32 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_inference_specification(&mut object_32, var_31);
        object_32.finish();
    }
    if let Some(var_33) = &input.validation_specification {
        let mut object_34 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_algorithm_validation_specification(
            &mut object_34,
            var_33,
        );
        object_34.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_35) = &input.tags {
        let mut array_36 = object.key("Tags").start_array();
        for item_37 in var_35 {
            {
                let mut object_38 = array_36.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_38, item_37);
                object_38.finish();
            }
        }
        array_36.finish();
    }
}

pub fn serialize_structure_create_app_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppInput,
) {
    if let Some(var_39) = &input.domain_id {
        object.key("DomainId").string(var_39);
    }
    if let Some(var_40) = &input.user_profile_name {
        object.key("UserProfileName").string(var_40);
    }
    if let Some(var_41) = &input.app_type {
        object.key("AppType").string(var_41.as_str());
    }
    if let Some(var_42) = &input.app_name {
        object.key("AppName").string(var_42);
    }
    if let Some(var_43) = &input.tags {
        let mut array_44 = object.key("Tags").start_array();
        for item_45 in var_43 {
            {
                let mut object_46 = array_44.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_46, item_45);
                object_46.finish();
            }
        }
        array_44.finish();
    }
    if let Some(var_47) = &input.resource_spec {
        let mut object_48 = object.key("ResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_48, var_47);
        object_48.finish();
    }
}

pub fn serialize_structure_create_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppImageConfigInput,
) {
    if let Some(var_49) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_49);
    }
    if let Some(var_50) = &input.tags {
        let mut array_51 = object.key("Tags").start_array();
        for item_52 in var_50 {
            {
                let mut object_53 = array_51.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_53, item_52);
                object_53.finish();
            }
        }
        array_51.finish();
    }
    if let Some(var_54) = &input.kernel_gateway_image_config {
        let mut object_55 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_kernel_gateway_image_config(&mut object_55, var_54);
        object_55.finish();
    }
}

pub fn serialize_structure_create_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateArtifactInput,
) {
    if let Some(var_56) = &input.artifact_name {
        object.key("ArtifactName").string(var_56);
    }
    if let Some(var_57) = &input.source {
        let mut object_58 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_artifact_source(&mut object_58, var_57);
        object_58.finish();
    }
    if let Some(var_59) = &input.artifact_type {
        object.key("ArtifactType").string(var_59);
    }
    if let Some(var_60) = &input.properties {
        let mut object_61 = object.key("Properties").start_object();
        for (key_62, value_63) in var_60 {
            {
                object_61.key(key_62).string(value_63);
            }
        }
        object_61.finish();
    }
    if let Some(var_64) = &input.metadata_properties {
        let mut object_65 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_65, var_64);
        object_65.finish();
    }
    if let Some(var_66) = &input.tags {
        let mut array_67 = object.key("Tags").start_array();
        for item_68 in var_66 {
            {
                let mut object_69 = array_67.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_69, item_68);
                object_69.finish();
            }
        }
        array_67.finish();
    }
}

pub fn serialize_structure_create_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAutoMlJobInput,
) {
    if let Some(var_70) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_70);
    }
    if let Some(var_71) = &input.input_data_config {
        let mut array_72 = object.key("InputDataConfig").start_array();
        for item_73 in var_71 {
            {
                let mut object_74 = array_72.value().start_object();
                crate::json_ser::serialize_structure_auto_ml_channel(&mut object_74, item_73);
                object_74.finish();
            }
        }
        array_72.finish();
    }
    if let Some(var_75) = &input.output_data_config {
        let mut object_76 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_auto_ml_output_data_config(&mut object_76, var_75);
        object_76.finish();
    }
    if let Some(var_77) = &input.problem_type {
        object.key("ProblemType").string(var_77.as_str());
    }
    if let Some(var_78) = &input.auto_ml_job_objective {
        let mut object_79 = object.key("AutoMLJobObjective").start_object();
        crate::json_ser::serialize_structure_auto_ml_job_objective(&mut object_79, var_78);
        object_79.finish();
    }
    if let Some(var_80) = &input.auto_ml_job_config {
        let mut object_81 = object.key("AutoMLJobConfig").start_object();
        crate::json_ser::serialize_structure_auto_ml_job_config(&mut object_81, var_80);
        object_81.finish();
    }
    if let Some(var_82) = &input.role_arn {
        object.key("RoleArn").string(var_82);
    }
    if input.generate_candidate_definitions_only {
        object
            .key("GenerateCandidateDefinitionsOnly")
            .boolean(input.generate_candidate_definitions_only);
    }
    if let Some(var_83) = &input.tags {
        let mut array_84 = object.key("Tags").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_86, item_85);
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.model_deploy_config {
        let mut object_88 = object.key("ModelDeployConfig").start_object();
        crate::json_ser::serialize_structure_model_deploy_config(&mut object_88, var_87);
        object_88.finish();
    }
}

pub fn serialize_structure_create_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCodeRepositoryInput,
) {
    if let Some(var_89) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_89);
    }
    if let Some(var_90) = &input.git_config {
        let mut object_91 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_git_config(&mut object_91, var_90);
        object_91.finish();
    }
    if let Some(var_92) = &input.tags {
        let mut array_93 = object.key("Tags").start_array();
        for item_94 in var_92 {
            {
                let mut object_95 = array_93.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_95, item_94);
                object_95.finish();
            }
        }
        array_93.finish();
    }
}

pub fn serialize_structure_create_compilation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCompilationJobInput,
) {
    if let Some(var_96) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_96);
    }
    if let Some(var_97) = &input.role_arn {
        object.key("RoleArn").string(var_97);
    }
    if let Some(var_98) = &input.input_config {
        let mut object_99 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_input_config(&mut object_99, var_98);
        object_99.finish();
    }
    if let Some(var_100) = &input.output_config {
        let mut object_101 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_output_config(&mut object_101, var_100);
        object_101.finish();
    }
    if let Some(var_102) = &input.vpc_config {
        let mut object_103 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_neo_vpc_config(&mut object_103, var_102);
        object_103.finish();
    }
    if let Some(var_104) = &input.stopping_condition {
        let mut object_105 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_105, var_104);
        object_105.finish();
    }
    if let Some(var_106) = &input.tags {
        let mut array_107 = object.key("Tags").start_array();
        for item_108 in var_106 {
            {
                let mut object_109 = array_107.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_109, item_108);
                object_109.finish();
            }
        }
        array_107.finish();
    }
}

pub fn serialize_structure_create_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContextInput,
) {
    if let Some(var_110) = &input.context_name {
        object.key("ContextName").string(var_110);
    }
    if let Some(var_111) = &input.source {
        let mut object_112 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_context_source(&mut object_112, var_111);
        object_112.finish();
    }
    if let Some(var_113) = &input.context_type {
        object.key("ContextType").string(var_113);
    }
    if let Some(var_114) = &input.description {
        object.key("Description").string(var_114);
    }
    if let Some(var_115) = &input.properties {
        let mut object_116 = object.key("Properties").start_object();
        for (key_117, value_118) in var_115 {
            {
                object_116.key(key_117).string(value_118);
            }
        }
        object_116.finish();
    }
    if let Some(var_119) = &input.tags {
        let mut array_120 = object.key("Tags").start_array();
        for item_121 in var_119 {
            {
                let mut object_122 = array_120.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_122, item_121);
                object_122.finish();
            }
        }
        array_120.finish();
    }
}

pub fn serialize_structure_create_data_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataQualityJobDefinitionInput,
) {
    if let Some(var_123) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_123);
    }
    if let Some(var_124) = &input.data_quality_baseline_config {
        let mut object_125 = object.key("DataQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_data_quality_baseline_config(&mut object_125, var_124);
        object_125.finish();
    }
    if let Some(var_126) = &input.data_quality_app_specification {
        let mut object_127 = object.key("DataQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_data_quality_app_specification(
            &mut object_127,
            var_126,
        );
        object_127.finish();
    }
    if let Some(var_128) = &input.data_quality_job_input {
        let mut object_129 = object.key("DataQualityJobInput").start_object();
        crate::json_ser::serialize_structure_data_quality_job_input(&mut object_129, var_128);
        object_129.finish();
    }
    if let Some(var_130) = &input.data_quality_job_output_config {
        let mut object_131 = object.key("DataQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_131, var_130);
        object_131.finish();
    }
    if let Some(var_132) = &input.job_resources {
        let mut object_133 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_133, var_132);
        object_133.finish();
    }
    if let Some(var_134) = &input.network_config {
        let mut object_135 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_135, var_134);
        object_135.finish();
    }
    if let Some(var_136) = &input.role_arn {
        object.key("RoleArn").string(var_136);
    }
    if let Some(var_137) = &input.stopping_condition {
        let mut object_138 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_138,
            var_137,
        );
        object_138.finish();
    }
    if let Some(var_139) = &input.tags {
        let mut array_140 = object.key("Tags").start_array();
        for item_141 in var_139 {
            {
                let mut object_142 = array_140.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_142, item_141);
                object_142.finish();
            }
        }
        array_140.finish();
    }
}

pub fn serialize_structure_create_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeviceFleetInput,
) {
    if let Some(var_143) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_143);
    }
    if let Some(var_144) = &input.role_arn {
        object.key("RoleArn").string(var_144);
    }
    if let Some(var_145) = &input.description {
        object.key("Description").string(var_145);
    }
    if let Some(var_146) = &input.output_config {
        let mut object_147 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_edge_output_config(&mut object_147, var_146);
        object_147.finish();
    }
    if let Some(var_148) = &input.tags {
        let mut array_149 = object.key("Tags").start_array();
        for item_150 in var_148 {
            {
                let mut object_151 = array_149.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_151, item_150);
                object_151.finish();
            }
        }
        array_149.finish();
    }
    if let Some(var_152) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_152);
    }
}

pub fn serialize_structure_create_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainInput,
) {
    if let Some(var_153) = &input.domain_name {
        object.key("DomainName").string(var_153);
    }
    if let Some(var_154) = &input.auth_mode {
        object.key("AuthMode").string(var_154.as_str());
    }
    if let Some(var_155) = &input.default_user_settings {
        let mut object_156 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_156, var_155);
        object_156.finish();
    }
    if let Some(var_157) = &input.subnet_ids {
        let mut array_158 = object.key("SubnetIds").start_array();
        for item_159 in var_157 {
            {
                array_158.value().string(item_159);
            }
        }
        array_158.finish();
    }
    if let Some(var_160) = &input.vpc_id {
        object.key("VpcId").string(var_160);
    }
    if let Some(var_161) = &input.tags {
        let mut array_162 = object.key("Tags").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_164, item_163);
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.app_network_access_type {
        object.key("AppNetworkAccessType").string(var_165.as_str());
    }
    if let Some(var_166) = &input.home_efs_file_system_kms_key_id {
        object.key("HomeEfsFileSystemKmsKeyId").string(var_166);
    }
    if let Some(var_167) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_167);
    }
}

pub fn serialize_structure_create_edge_packaging_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEdgePackagingJobInput,
) {
    if let Some(var_168) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_168);
    }
    if let Some(var_169) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_169);
    }
    if let Some(var_170) = &input.model_name {
        object.key("ModelName").string(var_170);
    }
    if let Some(var_171) = &input.model_version {
        object.key("ModelVersion").string(var_171);
    }
    if let Some(var_172) = &input.role_arn {
        object.key("RoleArn").string(var_172);
    }
    if let Some(var_173) = &input.output_config {
        let mut object_174 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_edge_output_config(&mut object_174, var_173);
        object_174.finish();
    }
    if let Some(var_175) = &input.resource_key {
        object.key("ResourceKey").string(var_175);
    }
    if let Some(var_176) = &input.tags {
        let mut array_177 = object.key("Tags").start_array();
        for item_178 in var_176 {
            {
                let mut object_179 = array_177.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_179, item_178);
                object_179.finish();
            }
        }
        array_177.finish();
    }
}

pub fn serialize_structure_create_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointInput,
) {
    if let Some(var_180) = &input.endpoint_name {
        object.key("EndpointName").string(var_180);
    }
    if let Some(var_181) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_181);
    }
    if let Some(var_182) = &input.tags {
        let mut array_183 = object.key("Tags").start_array();
        for item_184 in var_182 {
            {
                let mut object_185 = array_183.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_185, item_184);
                object_185.finish();
            }
        }
        array_183.finish();
    }
}

pub fn serialize_structure_create_endpoint_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointConfigInput,
) {
    if let Some(var_186) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_186);
    }
    if let Some(var_187) = &input.production_variants {
        let mut array_188 = object.key("ProductionVariants").start_array();
        for item_189 in var_187 {
            {
                let mut object_190 = array_188.value().start_object();
                crate::json_ser::serialize_structure_production_variant(&mut object_190, item_189);
                object_190.finish();
            }
        }
        array_188.finish();
    }
    if let Some(var_191) = &input.data_capture_config {
        let mut object_192 = object.key("DataCaptureConfig").start_object();
        crate::json_ser::serialize_structure_data_capture_config(&mut object_192, var_191);
        object_192.finish();
    }
    if let Some(var_193) = &input.tags {
        let mut array_194 = object.key("Tags").start_array();
        for item_195 in var_193 {
            {
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_196, item_195);
                object_196.finish();
            }
        }
        array_194.finish();
    }
    if let Some(var_197) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_197);
    }
    if let Some(var_198) = &input.async_inference_config {
        let mut object_199 = object.key("AsyncInferenceConfig").start_object();
        crate::json_ser::serialize_structure_async_inference_config(&mut object_199, var_198);
        object_199.finish();
    }
}

pub fn serialize_structure_create_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExperimentInput,
) {
    if let Some(var_200) = &input.experiment_name {
        object.key("ExperimentName").string(var_200);
    }
    if let Some(var_201) = &input.display_name {
        object.key("DisplayName").string(var_201);
    }
    if let Some(var_202) = &input.description {
        object.key("Description").string(var_202);
    }
    if let Some(var_203) = &input.tags {
        let mut array_204 = object.key("Tags").start_array();
        for item_205 in var_203 {
            {
                let mut object_206 = array_204.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_206, item_205);
                object_206.finish();
            }
        }
        array_204.finish();
    }
}

pub fn serialize_structure_create_feature_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFeatureGroupInput,
) {
    if let Some(var_207) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_207);
    }
    if let Some(var_208) = &input.record_identifier_feature_name {
        object.key("RecordIdentifierFeatureName").string(var_208);
    }
    if let Some(var_209) = &input.event_time_feature_name {
        object.key("EventTimeFeatureName").string(var_209);
    }
    if let Some(var_210) = &input.feature_definitions {
        let mut array_211 = object.key("FeatureDefinitions").start_array();
        for item_212 in var_210 {
            {
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_feature_definition(&mut object_213, item_212);
                object_213.finish();
            }
        }
        array_211.finish();
    }
    if let Some(var_214) = &input.online_store_config {
        let mut object_215 = object.key("OnlineStoreConfig").start_object();
        crate::json_ser::serialize_structure_online_store_config(&mut object_215, var_214);
        object_215.finish();
    }
    if let Some(var_216) = &input.offline_store_config {
        let mut object_217 = object.key("OfflineStoreConfig").start_object();
        crate::json_ser::serialize_structure_offline_store_config(&mut object_217, var_216);
        object_217.finish();
    }
    if let Some(var_218) = &input.role_arn {
        object.key("RoleArn").string(var_218);
    }
    if let Some(var_219) = &input.description {
        object.key("Description").string(var_219);
    }
    if let Some(var_220) = &input.tags {
        let mut array_221 = object.key("Tags").start_array();
        for item_222 in var_220 {
            {
                let mut object_223 = array_221.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_223, item_222);
                object_223.finish();
            }
        }
        array_221.finish();
    }
}

pub fn serialize_structure_create_flow_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFlowDefinitionInput,
) {
    if let Some(var_224) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_224);
    }
    if let Some(var_225) = &input.human_loop_request_source {
        let mut object_226 = object.key("HumanLoopRequestSource").start_object();
        crate::json_ser::serialize_structure_human_loop_request_source(&mut object_226, var_225);
        object_226.finish();
    }
    if let Some(var_227) = &input.human_loop_activation_config {
        let mut object_228 = object.key("HumanLoopActivationConfig").start_object();
        crate::json_ser::serialize_structure_human_loop_activation_config(&mut object_228, var_227);
        object_228.finish();
    }
    if let Some(var_229) = &input.human_loop_config {
        let mut object_230 = object.key("HumanLoopConfig").start_object();
        crate::json_ser::serialize_structure_human_loop_config(&mut object_230, var_229);
        object_230.finish();
    }
    if let Some(var_231) = &input.output_config {
        let mut object_232 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_flow_definition_output_config(
            &mut object_232,
            var_231,
        );
        object_232.finish();
    }
    if let Some(var_233) = &input.role_arn {
        object.key("RoleArn").string(var_233);
    }
    if let Some(var_234) = &input.tags {
        let mut array_235 = object.key("Tags").start_array();
        for item_236 in var_234 {
            {
                let mut object_237 = array_235.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_237, item_236);
                object_237.finish();
            }
        }
        array_235.finish();
    }
}

pub fn serialize_structure_create_human_task_ui_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHumanTaskUiInput,
) {
    if let Some(var_238) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_238);
    }
    if let Some(var_239) = &input.ui_template {
        let mut object_240 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_ui_template(&mut object_240, var_239);
        object_240.finish();
    }
    if let Some(var_241) = &input.tags {
        let mut array_242 = object.key("Tags").start_array();
        for item_243 in var_241 {
            {
                let mut object_244 = array_242.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_244, item_243);
                object_244.finish();
            }
        }
        array_242.finish();
    }
}

pub fn serialize_structure_create_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHyperParameterTuningJobInput,
) {
    if let Some(var_245) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_245);
    }
    if let Some(var_246) = &input.hyper_parameter_tuning_job_config {
        let mut object_247 = object.key("HyperParameterTuningJobConfig").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_config(
            &mut object_247,
            var_246,
        );
        object_247.finish();
    }
    if let Some(var_248) = &input.training_job_definition {
        let mut object_249 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_training_job_definition(
            &mut object_249,
            var_248,
        );
        object_249.finish();
    }
    if let Some(var_250) = &input.training_job_definitions {
        let mut array_251 = object.key("TrainingJobDefinitions").start_array();
        for item_252 in var_250 {
            {
                let mut object_253 = array_251.value().start_object();
                crate::json_ser::serialize_structure_hyper_parameter_training_job_definition(
                    &mut object_253,
                    item_252,
                );
                object_253.finish();
            }
        }
        array_251.finish();
    }
    if let Some(var_254) = &input.warm_start_config {
        let mut object_255 = object.key("WarmStartConfig").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_warm_start_config(
            &mut object_255,
            var_254,
        );
        object_255.finish();
    }
    if let Some(var_256) = &input.tags {
        let mut array_257 = object.key("Tags").start_array();
        for item_258 in var_256 {
            {
                let mut object_259 = array_257.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_259, item_258);
                object_259.finish();
            }
        }
        array_257.finish();
    }
}

pub fn serialize_structure_create_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageInput,
) {
    if let Some(var_260) = &input.description {
        object.key("Description").string(var_260);
    }
    if let Some(var_261) = &input.display_name {
        object.key("DisplayName").string(var_261);
    }
    if let Some(var_262) = &input.image_name {
        object.key("ImageName").string(var_262);
    }
    if let Some(var_263) = &input.role_arn {
        object.key("RoleArn").string(var_263);
    }
    if let Some(var_264) = &input.tags {
        let mut array_265 = object.key("Tags").start_array();
        for item_266 in var_264 {
            {
                let mut object_267 = array_265.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_267, item_266);
                object_267.finish();
            }
        }
        array_265.finish();
    }
}

pub fn serialize_structure_create_image_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageVersionInput,
) {
    if let Some(var_268) = &input.base_image {
        object.key("BaseImage").string(var_268);
    }
    if let Some(var_269) = &input.client_token {
        object.key("ClientToken").string(var_269);
    }
    if let Some(var_270) = &input.image_name {
        object.key("ImageName").string(var_270);
    }
}

pub fn serialize_structure_create_labeling_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLabelingJobInput,
) {
    if let Some(var_271) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_271);
    }
    if let Some(var_272) = &input.label_attribute_name {
        object.key("LabelAttributeName").string(var_272);
    }
    if let Some(var_273) = &input.input_config {
        let mut object_274 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_input_config(&mut object_274, var_273);
        object_274.finish();
    }
    if let Some(var_275) = &input.output_config {
        let mut object_276 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_output_config(&mut object_276, var_275);
        object_276.finish();
    }
    if let Some(var_277) = &input.role_arn {
        object.key("RoleArn").string(var_277);
    }
    if let Some(var_278) = &input.label_category_config_s3_uri {
        object.key("LabelCategoryConfigS3Uri").string(var_278);
    }
    if let Some(var_279) = &input.stopping_conditions {
        let mut object_280 = object.key("StoppingConditions").start_object();
        crate::json_ser::serialize_structure_labeling_job_stopping_conditions(
            &mut object_280,
            var_279,
        );
        object_280.finish();
    }
    if let Some(var_281) = &input.labeling_job_algorithms_config {
        let mut object_282 = object.key("LabelingJobAlgorithmsConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_algorithms_config(
            &mut object_282,
            var_281,
        );
        object_282.finish();
    }
    if let Some(var_283) = &input.human_task_config {
        let mut object_284 = object.key("HumanTaskConfig").start_object();
        crate::json_ser::serialize_structure_human_task_config(&mut object_284, var_283);
        object_284.finish();
    }
    if let Some(var_285) = &input.tags {
        let mut array_286 = object.key("Tags").start_array();
        for item_287 in var_285 {
            {
                let mut object_288 = array_286.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_288, item_287);
                object_288.finish();
            }
        }
        array_286.finish();
    }
}

pub fn serialize_structure_create_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelInput,
) {
    if let Some(var_289) = &input.model_name {
        object.key("ModelName").string(var_289);
    }
    if let Some(var_290) = &input.primary_container {
        let mut object_291 = object.key("PrimaryContainer").start_object();
        crate::json_ser::serialize_structure_container_definition(&mut object_291, var_290);
        object_291.finish();
    }
    if let Some(var_292) = &input.containers {
        let mut array_293 = object.key("Containers").start_array();
        for item_294 in var_292 {
            {
                let mut object_295 = array_293.value().start_object();
                crate::json_ser::serialize_structure_container_definition(
                    &mut object_295,
                    item_294,
                );
                object_295.finish();
            }
        }
        array_293.finish();
    }
    if let Some(var_296) = &input.inference_execution_config {
        let mut object_297 = object.key("InferenceExecutionConfig").start_object();
        crate::json_ser::serialize_structure_inference_execution_config(&mut object_297, var_296);
        object_297.finish();
    }
    if let Some(var_298) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_298);
    }
    if let Some(var_299) = &input.tags {
        let mut array_300 = object.key("Tags").start_array();
        for item_301 in var_299 {
            {
                let mut object_302 = array_300.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_302, item_301);
                object_302.finish();
            }
        }
        array_300.finish();
    }
    if let Some(var_303) = &input.vpc_config {
        let mut object_304 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_304, var_303);
        object_304.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
}

pub fn serialize_structure_create_model_bias_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelBiasJobDefinitionInput,
) {
    if let Some(var_305) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_305);
    }
    if let Some(var_306) = &input.model_bias_baseline_config {
        let mut object_307 = object.key("ModelBiasBaselineConfig").start_object();
        crate::json_ser::serialize_structure_model_bias_baseline_config(&mut object_307, var_306);
        object_307.finish();
    }
    if let Some(var_308) = &input.model_bias_app_specification {
        let mut object_309 = object.key("ModelBiasAppSpecification").start_object();
        crate::json_ser::serialize_structure_model_bias_app_specification(&mut object_309, var_308);
        object_309.finish();
    }
    if let Some(var_310) = &input.model_bias_job_input {
        let mut object_311 = object.key("ModelBiasJobInput").start_object();
        crate::json_ser::serialize_structure_model_bias_job_input(&mut object_311, var_310);
        object_311.finish();
    }
    if let Some(var_312) = &input.model_bias_job_output_config {
        let mut object_313 = object.key("ModelBiasJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_313, var_312);
        object_313.finish();
    }
    if let Some(var_314) = &input.job_resources {
        let mut object_315 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_315, var_314);
        object_315.finish();
    }
    if let Some(var_316) = &input.network_config {
        let mut object_317 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_317, var_316);
        object_317.finish();
    }
    if let Some(var_318) = &input.role_arn {
        object.key("RoleArn").string(var_318);
    }
    if let Some(var_319) = &input.stopping_condition {
        let mut object_320 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_320,
            var_319,
        );
        object_320.finish();
    }
    if let Some(var_321) = &input.tags {
        let mut array_322 = object.key("Tags").start_array();
        for item_323 in var_321 {
            {
                let mut object_324 = array_322.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_324, item_323);
                object_324.finish();
            }
        }
        array_322.finish();
    }
}

pub fn serialize_structure_create_model_explainability_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelExplainabilityJobDefinitionInput,
) {
    if let Some(var_325) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_325);
    }
    if let Some(var_326) = &input.model_explainability_baseline_config {
        let mut object_327 = object
            .key("ModelExplainabilityBaselineConfig")
            .start_object();
        crate::json_ser::serialize_structure_model_explainability_baseline_config(
            &mut object_327,
            var_326,
        );
        object_327.finish();
    }
    if let Some(var_328) = &input.model_explainability_app_specification {
        let mut object_329 = object
            .key("ModelExplainabilityAppSpecification")
            .start_object();
        crate::json_ser::serialize_structure_model_explainability_app_specification(
            &mut object_329,
            var_328,
        );
        object_329.finish();
    }
    if let Some(var_330) = &input.model_explainability_job_input {
        let mut object_331 = object.key("ModelExplainabilityJobInput").start_object();
        crate::json_ser::serialize_structure_model_explainability_job_input(
            &mut object_331,
            var_330,
        );
        object_331.finish();
    }
    if let Some(var_332) = &input.model_explainability_job_output_config {
        let mut object_333 = object
            .key("ModelExplainabilityJobOutputConfig")
            .start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_333, var_332);
        object_333.finish();
    }
    if let Some(var_334) = &input.job_resources {
        let mut object_335 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_335, var_334);
        object_335.finish();
    }
    if let Some(var_336) = &input.network_config {
        let mut object_337 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_337, var_336);
        object_337.finish();
    }
    if let Some(var_338) = &input.role_arn {
        object.key("RoleArn").string(var_338);
    }
    if let Some(var_339) = &input.stopping_condition {
        let mut object_340 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_340,
            var_339,
        );
        object_340.finish();
    }
    if let Some(var_341) = &input.tags {
        let mut array_342 = object.key("Tags").start_array();
        for item_343 in var_341 {
            {
                let mut object_344 = array_342.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_344, item_343);
                object_344.finish();
            }
        }
        array_342.finish();
    }
}

pub fn serialize_structure_create_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageInput,
) {
    if let Some(var_345) = &input.model_package_name {
        object.key("ModelPackageName").string(var_345);
    }
    if let Some(var_346) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_346);
    }
    if let Some(var_347) = &input.model_package_description {
        object.key("ModelPackageDescription").string(var_347);
    }
    if let Some(var_348) = &input.inference_specification {
        let mut object_349 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_inference_specification(&mut object_349, var_348);
        object_349.finish();
    }
    if let Some(var_350) = &input.validation_specification {
        let mut object_351 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_model_package_validation_specification(
            &mut object_351,
            var_350,
        );
        object_351.finish();
    }
    if let Some(var_352) = &input.source_algorithm_specification {
        let mut object_353 = object.key("SourceAlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_source_algorithm_specification(
            &mut object_353,
            var_352,
        );
        object_353.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_354) = &input.tags {
        let mut array_355 = object.key("Tags").start_array();
        for item_356 in var_354 {
            {
                let mut object_357 = array_355.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_357, item_356);
                object_357.finish();
            }
        }
        array_355.finish();
    }
    if let Some(var_358) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_358.as_str());
    }
    if let Some(var_359) = &input.metadata_properties {
        let mut object_360 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_360, var_359);
        object_360.finish();
    }
    if let Some(var_361) = &input.model_metrics {
        let mut object_362 = object.key("ModelMetrics").start_object();
        crate::json_ser::serialize_structure_model_metrics(&mut object_362, var_361);
        object_362.finish();
    }
    if let Some(var_363) = &input.client_token {
        object.key("ClientToken").string(var_363);
    }
}

pub fn serialize_structure_create_model_package_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageGroupInput,
) {
    if let Some(var_364) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_364);
    }
    if let Some(var_365) = &input.model_package_group_description {
        object.key("ModelPackageGroupDescription").string(var_365);
    }
    if let Some(var_366) = &input.tags {
        let mut array_367 = object.key("Tags").start_array();
        for item_368 in var_366 {
            {
                let mut object_369 = array_367.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_369, item_368);
                object_369.finish();
            }
        }
        array_367.finish();
    }
}

pub fn serialize_structure_create_model_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelQualityJobDefinitionInput,
) {
    if let Some(var_370) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_370);
    }
    if let Some(var_371) = &input.model_quality_baseline_config {
        let mut object_372 = object.key("ModelQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_model_quality_baseline_config(
            &mut object_372,
            var_371,
        );
        object_372.finish();
    }
    if let Some(var_373) = &input.model_quality_app_specification {
        let mut object_374 = object.key("ModelQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_model_quality_app_specification(
            &mut object_374,
            var_373,
        );
        object_374.finish();
    }
    if let Some(var_375) = &input.model_quality_job_input {
        let mut object_376 = object.key("ModelQualityJobInput").start_object();
        crate::json_ser::serialize_structure_model_quality_job_input(&mut object_376, var_375);
        object_376.finish();
    }
    if let Some(var_377) = &input.model_quality_job_output_config {
        let mut object_378 = object.key("ModelQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_378, var_377);
        object_378.finish();
    }
    if let Some(var_379) = &input.job_resources {
        let mut object_380 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_380, var_379);
        object_380.finish();
    }
    if let Some(var_381) = &input.network_config {
        let mut object_382 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_382, var_381);
        object_382.finish();
    }
    if let Some(var_383) = &input.role_arn {
        object.key("RoleArn").string(var_383);
    }
    if let Some(var_384) = &input.stopping_condition {
        let mut object_385 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_385,
            var_384,
        );
        object_385.finish();
    }
    if let Some(var_386) = &input.tags {
        let mut array_387 = object.key("Tags").start_array();
        for item_388 in var_386 {
            {
                let mut object_389 = array_387.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_389, item_388);
                object_389.finish();
            }
        }
        array_387.finish();
    }
}

pub fn serialize_structure_create_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMonitoringScheduleInput,
) {
    if let Some(var_390) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_390);
    }
    if let Some(var_391) = &input.monitoring_schedule_config {
        let mut object_392 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_schedule_config(&mut object_392, var_391);
        object_392.finish();
    }
    if let Some(var_393) = &input.tags {
        let mut array_394 = object.key("Tags").start_array();
        for item_395 in var_393 {
            {
                let mut object_396 = array_394.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_396, item_395);
                object_396.finish();
            }
        }
        array_394.finish();
    }
}

pub fn serialize_structure_create_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceInput,
) {
    if let Some(var_397) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_397);
    }
    if let Some(var_398) = &input.instance_type {
        object.key("InstanceType").string(var_398.as_str());
    }
    if let Some(var_399) = &input.subnet_id {
        object.key("SubnetId").string(var_399);
    }
    if let Some(var_400) = &input.security_group_ids {
        let mut array_401 = object.key("SecurityGroupIds").start_array();
        for item_402 in var_400 {
            {
                array_401.value().string(item_402);
            }
        }
        array_401.finish();
    }
    if let Some(var_403) = &input.role_arn {
        object.key("RoleArn").string(var_403);
    }
    if let Some(var_404) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_404);
    }
    if let Some(var_405) = &input.tags {
        let mut array_406 = object.key("Tags").start_array();
        for item_407 in var_405 {
            {
                let mut object_408 = array_406.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_408, item_407);
                object_408.finish();
            }
        }
        array_406.finish();
    }
    if let Some(var_409) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_409);
    }
    if let Some(var_410) = &input.direct_internet_access {
        object.key("DirectInternetAccess").string(var_410.as_str());
    }
    if let Some(var_411) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_411).into()),
        );
    }
    if let Some(var_412) = &input.accelerator_types {
        let mut array_413 = object.key("AcceleratorTypes").start_array();
        for item_414 in var_412 {
            {
                array_413.value().string(item_414.as_str());
            }
        }
        array_413.finish();
    }
    if let Some(var_415) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_415);
    }
    if let Some(var_416) = &input.additional_code_repositories {
        let mut array_417 = object.key("AdditionalCodeRepositories").start_array();
        for item_418 in var_416 {
            {
                array_417.value().string(item_418);
            }
        }
        array_417.finish();
    }
    if let Some(var_419) = &input.root_access {
        object.key("RootAccess").string(var_419.as_str());
    }
    if let Some(var_420) = &input.platform_identifier {
        object.key("PlatformIdentifier").string(var_420);
    }
}

pub fn serialize_structure_create_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_421) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_421);
    }
    if let Some(var_422) = &input.on_create {
        let mut array_423 = object.key("OnCreate").start_array();
        for item_424 in var_422 {
            {
                let mut object_425 = array_423.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_425,
                    item_424,
                );
                object_425.finish();
            }
        }
        array_423.finish();
    }
    if let Some(var_426) = &input.on_start {
        let mut array_427 = object.key("OnStart").start_array();
        for item_428 in var_426 {
            {
                let mut object_429 = array_427.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_429,
                    item_428,
                );
                object_429.finish();
            }
        }
        array_427.finish();
    }
}

pub fn serialize_structure_create_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePipelineInput,
) {
    if let Some(var_430) = &input.pipeline_name {
        object.key("PipelineName").string(var_430);
    }
    if let Some(var_431) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_431);
    }
    if let Some(var_432) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_432);
    }
    if let Some(var_433) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_433);
    }
    if let Some(var_434) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_434);
    }
    if let Some(var_435) = &input.role_arn {
        object.key("RoleArn").string(var_435);
    }
    if let Some(var_436) = &input.tags {
        let mut array_437 = object.key("Tags").start_array();
        for item_438 in var_436 {
            {
                let mut object_439 = array_437.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_439, item_438);
                object_439.finish();
            }
        }
        array_437.finish();
    }
}

pub fn serialize_structure_create_presigned_domain_url_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedDomainUrlInput,
) {
    if let Some(var_440) = &input.domain_id {
        object.key("DomainId").string(var_440);
    }
    if let Some(var_441) = &input.user_profile_name {
        object.key("UserProfileName").string(var_441);
    }
    if let Some(var_442) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_442).into()),
        );
    }
    if let Some(var_443) = &input.expires_in_seconds {
        object.key("ExpiresInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_443).into()),
        );
    }
}

pub fn serialize_structure_create_presigned_notebook_instance_url_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedNotebookInstanceUrlInput,
) {
    if let Some(var_444) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_444);
    }
    if let Some(var_445) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_445).into()),
        );
    }
}

pub fn serialize_structure_create_processing_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProcessingJobInput,
) {
    if let Some(var_446) = &input.processing_inputs {
        let mut array_447 = object.key("ProcessingInputs").start_array();
        for item_448 in var_446 {
            {
                let mut object_449 = array_447.value().start_object();
                crate::json_ser::serialize_structure_processing_input(&mut object_449, item_448);
                object_449.finish();
            }
        }
        array_447.finish();
    }
    if let Some(var_450) = &input.processing_output_config {
        let mut object_451 = object.key("ProcessingOutputConfig").start_object();
        crate::json_ser::serialize_structure_processing_output_config(&mut object_451, var_450);
        object_451.finish();
    }
    if let Some(var_452) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_452);
    }
    if let Some(var_453) = &input.processing_resources {
        let mut object_454 = object.key("ProcessingResources").start_object();
        crate::json_ser::serialize_structure_processing_resources(&mut object_454, var_453);
        object_454.finish();
    }
    if let Some(var_455) = &input.stopping_condition {
        let mut object_456 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_processing_stopping_condition(
            &mut object_456,
            var_455,
        );
        object_456.finish();
    }
    if let Some(var_457) = &input.app_specification {
        let mut object_458 = object.key("AppSpecification").start_object();
        crate::json_ser::serialize_structure_app_specification(&mut object_458, var_457);
        object_458.finish();
    }
    if let Some(var_459) = &input.environment {
        let mut object_460 = object.key("Environment").start_object();
        for (key_461, value_462) in var_459 {
            {
                object_460.key(key_461).string(value_462);
            }
        }
        object_460.finish();
    }
    if let Some(var_463) = &input.network_config {
        let mut object_464 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_network_config(&mut object_464, var_463);
        object_464.finish();
    }
    if let Some(var_465) = &input.role_arn {
        object.key("RoleArn").string(var_465);
    }
    if let Some(var_466) = &input.tags {
        let mut array_467 = object.key("Tags").start_array();
        for item_468 in var_466 {
            {
                let mut object_469 = array_467.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_469, item_468);
                object_469.finish();
            }
        }
        array_467.finish();
    }
    if let Some(var_470) = &input.experiment_config {
        let mut object_471 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_experiment_config(&mut object_471, var_470);
        object_471.finish();
    }
}

pub fn serialize_structure_create_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProjectInput,
) {
    if let Some(var_472) = &input.project_name {
        object.key("ProjectName").string(var_472);
    }
    if let Some(var_473) = &input.project_description {
        object.key("ProjectDescription").string(var_473);
    }
    if let Some(var_474) = &input.service_catalog_provisioning_details {
        let mut object_475 = object
            .key("ServiceCatalogProvisioningDetails")
            .start_object();
        crate::json_ser::serialize_structure_service_catalog_provisioning_details(
            &mut object_475,
            var_474,
        );
        object_475.finish();
    }
    if let Some(var_476) = &input.tags {
        let mut array_477 = object.key("Tags").start_array();
        for item_478 in var_476 {
            {
                let mut object_479 = array_477.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_479, item_478);
                object_479.finish();
            }
        }
        array_477.finish();
    }
}

pub fn serialize_structure_create_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrainingJobInput,
) {
    if let Some(var_480) = &input.training_job_name {
        object.key("TrainingJobName").string(var_480);
    }
    if let Some(var_481) = &input.hyper_parameters {
        let mut object_482 = object.key("HyperParameters").start_object();
        for (key_483, value_484) in var_481 {
            {
                object_482.key(key_483).string(value_484);
            }
        }
        object_482.finish();
    }
    if let Some(var_485) = &input.algorithm_specification {
        let mut object_486 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_algorithm_specification(&mut object_486, var_485);
        object_486.finish();
    }
    if let Some(var_487) = &input.role_arn {
        object.key("RoleArn").string(var_487);
    }
    if let Some(var_488) = &input.input_data_config {
        let mut array_489 = object.key("InputDataConfig").start_array();
        for item_490 in var_488 {
            {
                let mut object_491 = array_489.value().start_object();
                crate::json_ser::serialize_structure_channel(&mut object_491, item_490);
                object_491.finish();
            }
        }
        array_489.finish();
    }
    if let Some(var_492) = &input.output_data_config {
        let mut object_493 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_493, var_492);
        object_493.finish();
    }
    if let Some(var_494) = &input.resource_config {
        let mut object_495 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_resource_config(&mut object_495, var_494);
        object_495.finish();
    }
    if let Some(var_496) = &input.vpc_config {
        let mut object_497 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_497, var_496);
        object_497.finish();
    }
    if let Some(var_498) = &input.stopping_condition {
        let mut object_499 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_499, var_498);
        object_499.finish();
    }
    if let Some(var_500) = &input.tags {
        let mut array_501 = object.key("Tags").start_array();
        for item_502 in var_500 {
            {
                let mut object_503 = array_501.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_503, item_502);
                object_503.finish();
            }
        }
        array_501.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_504) = &input.checkpoint_config {
        let mut object_505 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_checkpoint_config(&mut object_505, var_504);
        object_505.finish();
    }
    if let Some(var_506) = &input.debug_hook_config {
        let mut object_507 = object.key("DebugHookConfig").start_object();
        crate::json_ser::serialize_structure_debug_hook_config(&mut object_507, var_506);
        object_507.finish();
    }
    if let Some(var_508) = &input.debug_rule_configurations {
        let mut array_509 = object.key("DebugRuleConfigurations").start_array();
        for item_510 in var_508 {
            {
                let mut object_511 = array_509.value().start_object();
                crate::json_ser::serialize_structure_debug_rule_configuration(
                    &mut object_511,
                    item_510,
                );
                object_511.finish();
            }
        }
        array_509.finish();
    }
    if let Some(var_512) = &input.tensor_board_output_config {
        let mut object_513 = object.key("TensorBoardOutputConfig").start_object();
        crate::json_ser::serialize_structure_tensor_board_output_config(&mut object_513, var_512);
        object_513.finish();
    }
    if let Some(var_514) = &input.experiment_config {
        let mut object_515 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_experiment_config(&mut object_515, var_514);
        object_515.finish();
    }
    if let Some(var_516) = &input.profiler_config {
        let mut object_517 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_profiler_config(&mut object_517, var_516);
        object_517.finish();
    }
    if let Some(var_518) = &input.profiler_rule_configurations {
        let mut array_519 = object.key("ProfilerRuleConfigurations").start_array();
        for item_520 in var_518 {
            {
                let mut object_521 = array_519.value().start_object();
                crate::json_ser::serialize_structure_profiler_rule_configuration(
                    &mut object_521,
                    item_520,
                );
                object_521.finish();
            }
        }
        array_519.finish();
    }
    if let Some(var_522) = &input.environment {
        let mut object_523 = object.key("Environment").start_object();
        for (key_524, value_525) in var_522 {
            {
                object_523.key(key_524).string(value_525);
            }
        }
        object_523.finish();
    }
    if let Some(var_526) = &input.retry_strategy {
        let mut object_527 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_retry_strategy(&mut object_527, var_526);
        object_527.finish();
    }
}

pub fn serialize_structure_create_transform_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTransformJobInput,
) {
    if let Some(var_528) = &input.transform_job_name {
        object.key("TransformJobName").string(var_528);
    }
    if let Some(var_529) = &input.model_name {
        object.key("ModelName").string(var_529);
    }
    if let Some(var_530) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_530).into()),
        );
    }
    if let Some(var_531) = &input.model_client_config {
        let mut object_532 = object.key("ModelClientConfig").start_object();
        crate::json_ser::serialize_structure_model_client_config(&mut object_532, var_531);
        object_532.finish();
    }
    if let Some(var_533) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_533).into()),
        );
    }
    if let Some(var_534) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_534.as_str());
    }
    if let Some(var_535) = &input.environment {
        let mut object_536 = object.key("Environment").start_object();
        for (key_537, value_538) in var_535 {
            {
                object_536.key(key_537).string(value_538);
            }
        }
        object_536.finish();
    }
    if let Some(var_539) = &input.transform_input {
        let mut object_540 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_transform_input(&mut object_540, var_539);
        object_540.finish();
    }
    if let Some(var_541) = &input.transform_output {
        let mut object_542 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_transform_output(&mut object_542, var_541);
        object_542.finish();
    }
    if let Some(var_543) = &input.transform_resources {
        let mut object_544 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_transform_resources(&mut object_544, var_543);
        object_544.finish();
    }
    if let Some(var_545) = &input.data_processing {
        let mut object_546 = object.key("DataProcessing").start_object();
        crate::json_ser::serialize_structure_data_processing(&mut object_546, var_545);
        object_546.finish();
    }
    if let Some(var_547) = &input.tags {
        let mut array_548 = object.key("Tags").start_array();
        for item_549 in var_547 {
            {
                let mut object_550 = array_548.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_550, item_549);
                object_550.finish();
            }
        }
        array_548.finish();
    }
    if let Some(var_551) = &input.experiment_config {
        let mut object_552 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_experiment_config(&mut object_552, var_551);
        object_552.finish();
    }
}

pub fn serialize_structure_create_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialInput,
) {
    if let Some(var_553) = &input.trial_name {
        object.key("TrialName").string(var_553);
    }
    if let Some(var_554) = &input.display_name {
        object.key("DisplayName").string(var_554);
    }
    if let Some(var_555) = &input.experiment_name {
        object.key("ExperimentName").string(var_555);
    }
    if let Some(var_556) = &input.metadata_properties {
        let mut object_557 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_557, var_556);
        object_557.finish();
    }
    if let Some(var_558) = &input.tags {
        let mut array_559 = object.key("Tags").start_array();
        for item_560 in var_558 {
            {
                let mut object_561 = array_559.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_561, item_560);
                object_561.finish();
            }
        }
        array_559.finish();
    }
}

pub fn serialize_structure_create_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialComponentInput,
) {
    if let Some(var_562) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_562);
    }
    if let Some(var_563) = &input.display_name {
        object.key("DisplayName").string(var_563);
    }
    if let Some(var_564) = &input.status {
        let mut object_565 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_trial_component_status(&mut object_565, var_564);
        object_565.finish();
    }
    if let Some(var_566) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_566, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_567) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_567, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_568) = &input.parameters {
        let mut object_569 = object.key("Parameters").start_object();
        for (key_570, value_571) in var_568 {
            {
                let mut object_572 = object_569.key(key_570).start_object();
                crate::json_ser::serialize_union_trial_component_parameter_value(
                    &mut object_572,
                    value_571,
                );
                object_572.finish();
            }
        }
        object_569.finish();
    }
    if let Some(var_573) = &input.input_artifacts {
        let mut object_574 = object.key("InputArtifacts").start_object();
        for (key_575, value_576) in var_573 {
            {
                let mut object_577 = object_574.key(key_575).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_577,
                    value_576,
                );
                object_577.finish();
            }
        }
        object_574.finish();
    }
    if let Some(var_578) = &input.output_artifacts {
        let mut object_579 = object.key("OutputArtifacts").start_object();
        for (key_580, value_581) in var_578 {
            {
                let mut object_582 = object_579.key(key_580).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_582,
                    value_581,
                );
                object_582.finish();
            }
        }
        object_579.finish();
    }
    if let Some(var_583) = &input.metadata_properties {
        let mut object_584 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_584, var_583);
        object_584.finish();
    }
    if let Some(var_585) = &input.tags {
        let mut array_586 = object.key("Tags").start_array();
        for item_587 in var_585 {
            {
                let mut object_588 = array_586.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_588, item_587);
                object_588.finish();
            }
        }
        array_586.finish();
    }
}

pub fn serialize_structure_create_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserProfileInput,
) {
    if let Some(var_589) = &input.domain_id {
        object.key("DomainId").string(var_589);
    }
    if let Some(var_590) = &input.user_profile_name {
        object.key("UserProfileName").string(var_590);
    }
    if let Some(var_591) = &input.single_sign_on_user_identifier {
        object.key("SingleSignOnUserIdentifier").string(var_591);
    }
    if let Some(var_592) = &input.single_sign_on_user_value {
        object.key("SingleSignOnUserValue").string(var_592);
    }
    if let Some(var_593) = &input.tags {
        let mut array_594 = object.key("Tags").start_array();
        for item_595 in var_593 {
            {
                let mut object_596 = array_594.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_596, item_595);
                object_596.finish();
            }
        }
        array_594.finish();
    }
    if let Some(var_597) = &input.user_settings {
        let mut object_598 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_598, var_597);
        object_598.finish();
    }
}

pub fn serialize_structure_create_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkforceInput,
) {
    if let Some(var_599) = &input.cognito_config {
        let mut object_600 = object.key("CognitoConfig").start_object();
        crate::json_ser::serialize_structure_cognito_config(&mut object_600, var_599);
        object_600.finish();
    }
    if let Some(var_601) = &input.oidc_config {
        let mut object_602 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_oidc_config(&mut object_602, var_601);
        object_602.finish();
    }
    if let Some(var_603) = &input.source_ip_config {
        let mut object_604 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_source_ip_config(&mut object_604, var_603);
        object_604.finish();
    }
    if let Some(var_605) = &input.workforce_name {
        object.key("WorkforceName").string(var_605);
    }
    if let Some(var_606) = &input.tags {
        let mut array_607 = object.key("Tags").start_array();
        for item_608 in var_606 {
            {
                let mut object_609 = array_607.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_609, item_608);
                object_609.finish();
            }
        }
        array_607.finish();
    }
}

pub fn serialize_structure_create_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkteamInput,
) {
    if let Some(var_610) = &input.workteam_name {
        object.key("WorkteamName").string(var_610);
    }
    if let Some(var_611) = &input.workforce_name {
        object.key("WorkforceName").string(var_611);
    }
    if let Some(var_612) = &input.member_definitions {
        let mut array_613 = object.key("MemberDefinitions").start_array();
        for item_614 in var_612 {
            {
                let mut object_615 = array_613.value().start_object();
                crate::json_ser::serialize_structure_member_definition(&mut object_615, item_614);
                object_615.finish();
            }
        }
        array_613.finish();
    }
    if let Some(var_616) = &input.description {
        object.key("Description").string(var_616);
    }
    if let Some(var_617) = &input.notification_configuration {
        let mut object_618 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_notification_configuration(&mut object_618, var_617);
        object_618.finish();
    }
    if let Some(var_619) = &input.tags {
        let mut array_620 = object.key("Tags").start_array();
        for item_621 in var_619 {
            {
                let mut object_622 = array_620.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_622, item_621);
                object_622.finish();
            }
        }
        array_620.finish();
    }
}

pub fn serialize_structure_delete_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteActionInput,
) {
    if let Some(var_623) = &input.action_name {
        object.key("ActionName").string(var_623);
    }
}

pub fn serialize_structure_delete_algorithm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAlgorithmInput,
) {
    if let Some(var_624) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_624);
    }
}

pub fn serialize_structure_delete_app_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppInput,
) {
    if let Some(var_625) = &input.domain_id {
        object.key("DomainId").string(var_625);
    }
    if let Some(var_626) = &input.user_profile_name {
        object.key("UserProfileName").string(var_626);
    }
    if let Some(var_627) = &input.app_type {
        object.key("AppType").string(var_627.as_str());
    }
    if let Some(var_628) = &input.app_name {
        object.key("AppName").string(var_628);
    }
}

pub fn serialize_structure_delete_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppImageConfigInput,
) {
    if let Some(var_629) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_629);
    }
}

pub fn serialize_structure_delete_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteArtifactInput,
) {
    if let Some(var_630) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_630);
    }
    if let Some(var_631) = &input.source {
        let mut object_632 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_artifact_source(&mut object_632, var_631);
        object_632.finish();
    }
}

pub fn serialize_structure_delete_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAssociationInput,
) {
    if let Some(var_633) = &input.source_arn {
        object.key("SourceArn").string(var_633);
    }
    if let Some(var_634) = &input.destination_arn {
        object.key("DestinationArn").string(var_634);
    }
}

pub fn serialize_structure_delete_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCodeRepositoryInput,
) {
    if let Some(var_635) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_635);
    }
}

pub fn serialize_structure_delete_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContextInput,
) {
    if let Some(var_636) = &input.context_name {
        object.key("ContextName").string(var_636);
    }
}

pub fn serialize_structure_delete_data_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataQualityJobDefinitionInput,
) {
    if let Some(var_637) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_637);
    }
}

pub fn serialize_structure_delete_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDeviceFleetInput,
) {
    if let Some(var_638) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_638);
    }
}

pub fn serialize_structure_delete_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDomainInput,
) {
    if let Some(var_639) = &input.domain_id {
        object.key("DomainId").string(var_639);
    }
    if let Some(var_640) = &input.retention_policy {
        let mut object_641 = object.key("RetentionPolicy").start_object();
        crate::json_ser::serialize_structure_retention_policy(&mut object_641, var_640);
        object_641.finish();
    }
}

pub fn serialize_structure_delete_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointInput,
) {
    if let Some(var_642) = &input.endpoint_name {
        object.key("EndpointName").string(var_642);
    }
}

pub fn serialize_structure_delete_endpoint_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointConfigInput,
) {
    if let Some(var_643) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_643);
    }
}

pub fn serialize_structure_delete_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExperimentInput,
) {
    if let Some(var_644) = &input.experiment_name {
        object.key("ExperimentName").string(var_644);
    }
}

pub fn serialize_structure_delete_feature_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFeatureGroupInput,
) {
    if let Some(var_645) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_645);
    }
}

pub fn serialize_structure_delete_flow_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFlowDefinitionInput,
) {
    if let Some(var_646) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_646);
    }
}

pub fn serialize_structure_delete_human_task_ui_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteHumanTaskUiInput,
) {
    if let Some(var_647) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_647);
    }
}

pub fn serialize_structure_delete_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageInput,
) {
    if let Some(var_648) = &input.image_name {
        object.key("ImageName").string(var_648);
    }
}

pub fn serialize_structure_delete_image_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageVersionInput,
) {
    if let Some(var_649) = &input.image_name {
        object.key("ImageName").string(var_649);
    }
    if let Some(var_650) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_650).into()),
        );
    }
}

pub fn serialize_structure_delete_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelInput,
) {
    if let Some(var_651) = &input.model_name {
        object.key("ModelName").string(var_651);
    }
}

pub fn serialize_structure_delete_model_bias_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelBiasJobDefinitionInput,
) {
    if let Some(var_652) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_652);
    }
}

pub fn serialize_structure_delete_model_explainability_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelExplainabilityJobDefinitionInput,
) {
    if let Some(var_653) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_653);
    }
}

pub fn serialize_structure_delete_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageInput,
) {
    if let Some(var_654) = &input.model_package_name {
        object.key("ModelPackageName").string(var_654);
    }
}

pub fn serialize_structure_delete_model_package_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupInput,
) {
    if let Some(var_655) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_655);
    }
}

pub fn serialize_structure_delete_model_package_group_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupPolicyInput,
) {
    if let Some(var_656) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_656);
    }
}

pub fn serialize_structure_delete_model_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelQualityJobDefinitionInput,
) {
    if let Some(var_657) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_657);
    }
}

pub fn serialize_structure_delete_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMonitoringScheduleInput,
) {
    if let Some(var_658) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_658);
    }
}

pub fn serialize_structure_delete_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceInput,
) {
    if let Some(var_659) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_659);
    }
}

pub fn serialize_structure_delete_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_660) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_660);
    }
}

pub fn serialize_structure_delete_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePipelineInput,
) {
    if let Some(var_661) = &input.pipeline_name {
        object.key("PipelineName").string(var_661);
    }
    if let Some(var_662) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_662);
    }
}

pub fn serialize_structure_delete_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProjectInput,
) {
    if let Some(var_663) = &input.project_name {
        object.key("ProjectName").string(var_663);
    }
}

pub fn serialize_structure_delete_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTagsInput,
) {
    if let Some(var_664) = &input.resource_arn {
        object.key("ResourceArn").string(var_664);
    }
    if let Some(var_665) = &input.tag_keys {
        let mut array_666 = object.key("TagKeys").start_array();
        for item_667 in var_665 {
            {
                array_666.value().string(item_667);
            }
        }
        array_666.finish();
    }
}

pub fn serialize_structure_delete_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialInput,
) {
    if let Some(var_668) = &input.trial_name {
        object.key("TrialName").string(var_668);
    }
}

pub fn serialize_structure_delete_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialComponentInput,
) {
    if let Some(var_669) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_669);
    }
}

pub fn serialize_structure_delete_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserProfileInput,
) {
    if let Some(var_670) = &input.domain_id {
        object.key("DomainId").string(var_670);
    }
    if let Some(var_671) = &input.user_profile_name {
        object.key("UserProfileName").string(var_671);
    }
}

pub fn serialize_structure_delete_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkforceInput,
) {
    if let Some(var_672) = &input.workforce_name {
        object.key("WorkforceName").string(var_672);
    }
}

pub fn serialize_structure_delete_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkteamInput,
) {
    if let Some(var_673) = &input.workteam_name {
        object.key("WorkteamName").string(var_673);
    }
}

pub fn serialize_structure_deregister_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterDevicesInput,
) {
    if let Some(var_674) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_674);
    }
    if let Some(var_675) = &input.device_names {
        let mut array_676 = object.key("DeviceNames").start_array();
        for item_677 in var_675 {
            {
                array_676.value().string(item_677);
            }
        }
        array_676.finish();
    }
}

pub fn serialize_structure_describe_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActionInput,
) {
    if let Some(var_678) = &input.action_name {
        object.key("ActionName").string(var_678);
    }
}

pub fn serialize_structure_describe_algorithm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAlgorithmInput,
) {
    if let Some(var_679) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_679);
    }
}

pub fn serialize_structure_describe_app_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppInput,
) {
    if let Some(var_680) = &input.domain_id {
        object.key("DomainId").string(var_680);
    }
    if let Some(var_681) = &input.user_profile_name {
        object.key("UserProfileName").string(var_681);
    }
    if let Some(var_682) = &input.app_type {
        object.key("AppType").string(var_682.as_str());
    }
    if let Some(var_683) = &input.app_name {
        object.key("AppName").string(var_683);
    }
}

pub fn serialize_structure_describe_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppImageConfigInput,
) {
    if let Some(var_684) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_684);
    }
}

pub fn serialize_structure_describe_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeArtifactInput,
) {
    if let Some(var_685) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_685);
    }
}

pub fn serialize_structure_describe_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutoMlJobInput,
) {
    if let Some(var_686) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_686);
    }
}

pub fn serialize_structure_describe_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCodeRepositoryInput,
) {
    if let Some(var_687) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_687);
    }
}

pub fn serialize_structure_describe_compilation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCompilationJobInput,
) {
    if let Some(var_688) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_688);
    }
}

pub fn serialize_structure_describe_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeContextInput,
) {
    if let Some(var_689) = &input.context_name {
        object.key("ContextName").string(var_689);
    }
}

pub fn serialize_structure_describe_data_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataQualityJobDefinitionInput,
) {
    if let Some(var_690) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_690);
    }
}

pub fn serialize_structure_describe_device_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceInput,
) {
    if let Some(var_691) = &input.next_token {
        object.key("NextToken").string(var_691);
    }
    if let Some(var_692) = &input.device_name {
        object.key("DeviceName").string(var_692);
    }
    if let Some(var_693) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_693);
    }
}

pub fn serialize_structure_describe_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceFleetInput,
) {
    if let Some(var_694) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_694);
    }
}

pub fn serialize_structure_describe_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDomainInput,
) {
    if let Some(var_695) = &input.domain_id {
        object.key("DomainId").string(var_695);
    }
}

pub fn serialize_structure_describe_edge_packaging_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEdgePackagingJobInput,
) {
    if let Some(var_696) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_696);
    }
}

pub fn serialize_structure_describe_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointInput,
) {
    if let Some(var_697) = &input.endpoint_name {
        object.key("EndpointName").string(var_697);
    }
}

pub fn serialize_structure_describe_endpoint_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointConfigInput,
) {
    if let Some(var_698) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_698);
    }
}

pub fn serialize_structure_describe_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExperimentInput,
) {
    if let Some(var_699) = &input.experiment_name {
        object.key("ExperimentName").string(var_699);
    }
}

pub fn serialize_structure_describe_feature_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFeatureGroupInput,
) {
    if let Some(var_700) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_700);
    }
    if let Some(var_701) = &input.next_token {
        object.key("NextToken").string(var_701);
    }
}

pub fn serialize_structure_describe_flow_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFlowDefinitionInput,
) {
    if let Some(var_702) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_702);
    }
}

pub fn serialize_structure_describe_human_task_ui_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHumanTaskUiInput,
) {
    if let Some(var_703) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_703);
    }
}

pub fn serialize_structure_describe_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHyperParameterTuningJobInput,
) {
    if let Some(var_704) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_704);
    }
}

pub fn serialize_structure_describe_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageInput,
) {
    if let Some(var_705) = &input.image_name {
        object.key("ImageName").string(var_705);
    }
}

pub fn serialize_structure_describe_image_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageVersionInput,
) {
    if let Some(var_706) = &input.image_name {
        object.key("ImageName").string(var_706);
    }
    if let Some(var_707) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_707).into()),
        );
    }
}

pub fn serialize_structure_describe_labeling_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLabelingJobInput,
) {
    if let Some(var_708) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_708);
    }
}

pub fn serialize_structure_describe_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelInput,
) {
    if let Some(var_709) = &input.model_name {
        object.key("ModelName").string(var_709);
    }
}

pub fn serialize_structure_describe_model_bias_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelBiasJobDefinitionInput,
) {
    if let Some(var_710) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_710);
    }
}

pub fn serialize_structure_describe_model_explainability_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelExplainabilityJobDefinitionInput,
) {
    if let Some(var_711) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_711);
    }
}

pub fn serialize_structure_describe_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageInput,
) {
    if let Some(var_712) = &input.model_package_name {
        object.key("ModelPackageName").string(var_712);
    }
}

pub fn serialize_structure_describe_model_package_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageGroupInput,
) {
    if let Some(var_713) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_713);
    }
}

pub fn serialize_structure_describe_model_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelQualityJobDefinitionInput,
) {
    if let Some(var_714) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_714);
    }
}

pub fn serialize_structure_describe_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMonitoringScheduleInput,
) {
    if let Some(var_715) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_715);
    }
}

pub fn serialize_structure_describe_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceInput,
) {
    if let Some(var_716) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_716);
    }
}

pub fn serialize_structure_describe_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_717) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_717);
    }
}

pub fn serialize_structure_describe_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineInput,
) {
    if let Some(var_718) = &input.pipeline_name {
        object.key("PipelineName").string(var_718);
    }
}

pub fn serialize_structure_describe_pipeline_definition_for_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineDefinitionForExecutionInput,
) {
    if let Some(var_719) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_719);
    }
}

pub fn serialize_structure_describe_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineExecutionInput,
) {
    if let Some(var_720) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_720);
    }
}

pub fn serialize_structure_describe_processing_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProcessingJobInput,
) {
    if let Some(var_721) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_721);
    }
}

pub fn serialize_structure_describe_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProjectInput,
) {
    if let Some(var_722) = &input.project_name {
        object.key("ProjectName").string(var_722);
    }
}

pub fn serialize_structure_describe_subscribed_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSubscribedWorkteamInput,
) {
    if let Some(var_723) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_723);
    }
}

pub fn serialize_structure_describe_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrainingJobInput,
) {
    if let Some(var_724) = &input.training_job_name {
        object.key("TrainingJobName").string(var_724);
    }
}

pub fn serialize_structure_describe_transform_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTransformJobInput,
) {
    if let Some(var_725) = &input.transform_job_name {
        object.key("TransformJobName").string(var_725);
    }
}

pub fn serialize_structure_describe_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialInput,
) {
    if let Some(var_726) = &input.trial_name {
        object.key("TrialName").string(var_726);
    }
}

pub fn serialize_structure_describe_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialComponentInput,
) {
    if let Some(var_727) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_727);
    }
}

pub fn serialize_structure_describe_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserProfileInput,
) {
    if let Some(var_728) = &input.domain_id {
        object.key("DomainId").string(var_728);
    }
    if let Some(var_729) = &input.user_profile_name {
        object.key("UserProfileName").string(var_729);
    }
}

pub fn serialize_structure_describe_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkforceInput,
) {
    if let Some(var_730) = &input.workforce_name {
        object.key("WorkforceName").string(var_730);
    }
}

pub fn serialize_structure_describe_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkteamInput,
) {
    if let Some(var_731) = &input.workteam_name {
        object.key("WorkteamName").string(var_731);
    }
}

pub fn serialize_structure_disassociate_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateTrialComponentInput,
) {
    if let Some(var_732) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_732);
    }
    if let Some(var_733) = &input.trial_name {
        object.key("TrialName").string(var_733);
    }
}

pub fn serialize_structure_get_device_fleet_report_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDeviceFleetReportInput,
) {
    if let Some(var_734) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_734);
    }
}

pub fn serialize_structure_get_model_package_group_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetModelPackageGroupPolicyInput,
) {
    if let Some(var_735) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_735);
    }
}

pub fn serialize_structure_get_search_suggestions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSearchSuggestionsInput,
) {
    if let Some(var_736) = &input.resource {
        object.key("Resource").string(var_736.as_str());
    }
    if let Some(var_737) = &input.suggestion_query {
        let mut object_738 = object.key("SuggestionQuery").start_object();
        crate::json_ser::serialize_structure_suggestion_query(&mut object_738, var_737);
        object_738.finish();
    }
}

pub fn serialize_structure_list_actions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListActionsInput,
) {
    if let Some(var_739) = &input.source_uri {
        object.key("SourceUri").string(var_739);
    }
    if let Some(var_740) = &input.action_type {
        object.key("ActionType").string(var_740);
    }
    if let Some(var_741) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_741, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_742) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_742, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_743) = &input.sort_by {
        object.key("SortBy").string(var_743.as_str());
    }
    if let Some(var_744) = &input.sort_order {
        object.key("SortOrder").string(var_744.as_str());
    }
    if let Some(var_745) = &input.next_token {
        object.key("NextToken").string(var_745);
    }
    if let Some(var_746) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_746).into()),
        );
    }
}

pub fn serialize_structure_list_algorithms_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAlgorithmsInput,
) {
    if let Some(var_747) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_747, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_748) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_748, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_749) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_749).into()),
        );
    }
    if let Some(var_750) = &input.name_contains {
        object.key("NameContains").string(var_750);
    }
    if let Some(var_751) = &input.next_token {
        object.key("NextToken").string(var_751);
    }
    if let Some(var_752) = &input.sort_by {
        object.key("SortBy").string(var_752.as_str());
    }
    if let Some(var_753) = &input.sort_order {
        object.key("SortOrder").string(var_753.as_str());
    }
}

pub fn serialize_structure_list_app_image_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppImageConfigsInput,
) {
    if let Some(var_754) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_754).into()),
        );
    }
    if let Some(var_755) = &input.next_token {
        object.key("NextToken").string(var_755);
    }
    if let Some(var_756) = &input.name_contains {
        object.key("NameContains").string(var_756);
    }
    if let Some(var_757) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_757, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_758) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_758, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_759) = &input.modified_time_before {
        object
            .key("ModifiedTimeBefore")
            .instant(var_759, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_760) = &input.modified_time_after {
        object
            .key("ModifiedTimeAfter")
            .instant(var_760, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_761) = &input.sort_by {
        object.key("SortBy").string(var_761.as_str());
    }
    if let Some(var_762) = &input.sort_order {
        object.key("SortOrder").string(var_762.as_str());
    }
}

pub fn serialize_structure_list_apps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppsInput,
) {
    if let Some(var_763) = &input.next_token {
        object.key("NextToken").string(var_763);
    }
    if let Some(var_764) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_764).into()),
        );
    }
    if let Some(var_765) = &input.sort_order {
        object.key("SortOrder").string(var_765.as_str());
    }
    if let Some(var_766) = &input.sort_by {
        object.key("SortBy").string(var_766.as_str());
    }
    if let Some(var_767) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_767);
    }
    if let Some(var_768) = &input.user_profile_name_equals {
        object.key("UserProfileNameEquals").string(var_768);
    }
}

pub fn serialize_structure_list_artifacts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListArtifactsInput,
) {
    if let Some(var_769) = &input.source_uri {
        object.key("SourceUri").string(var_769);
    }
    if let Some(var_770) = &input.artifact_type {
        object.key("ArtifactType").string(var_770);
    }
    if let Some(var_771) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_771, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_772) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_772, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_773) = &input.sort_by {
        object.key("SortBy").string(var_773.as_str());
    }
    if let Some(var_774) = &input.sort_order {
        object.key("SortOrder").string(var_774.as_str());
    }
    if let Some(var_775) = &input.next_token {
        object.key("NextToken").string(var_775);
    }
    if let Some(var_776) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_776).into()),
        );
    }
}

pub fn serialize_structure_list_associations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationsInput,
) {
    if let Some(var_777) = &input.source_arn {
        object.key("SourceArn").string(var_777);
    }
    if let Some(var_778) = &input.destination_arn {
        object.key("DestinationArn").string(var_778);
    }
    if let Some(var_779) = &input.source_type {
        object.key("SourceType").string(var_779);
    }
    if let Some(var_780) = &input.destination_type {
        object.key("DestinationType").string(var_780);
    }
    if let Some(var_781) = &input.association_type {
        object.key("AssociationType").string(var_781.as_str());
    }
    if let Some(var_782) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_782, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_783) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_783, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_784) = &input.sort_by {
        object.key("SortBy").string(var_784.as_str());
    }
    if let Some(var_785) = &input.sort_order {
        object.key("SortOrder").string(var_785.as_str());
    }
    if let Some(var_786) = &input.next_token {
        object.key("NextToken").string(var_786);
    }
    if let Some(var_787) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_787).into()),
        );
    }
}

pub fn serialize_structure_list_auto_ml_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAutoMlJobsInput,
) {
    if let Some(var_788) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_788, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_789) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_789, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_790) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_790, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_791) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_791, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_792) = &input.name_contains {
        object.key("NameContains").string(var_792);
    }
    if let Some(var_793) = &input.status_equals {
        object.key("StatusEquals").string(var_793.as_str());
    }
    if let Some(var_794) = &input.sort_order {
        object.key("SortOrder").string(var_794.as_str());
    }
    if let Some(var_795) = &input.sort_by {
        object.key("SortBy").string(var_795.as_str());
    }
    if let Some(var_796) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_796).into()),
        );
    }
    if let Some(var_797) = &input.next_token {
        object.key("NextToken").string(var_797);
    }
}

pub fn serialize_structure_list_candidates_for_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCandidatesForAutoMlJobInput,
) {
    if let Some(var_798) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_798);
    }
    if let Some(var_799) = &input.status_equals {
        object.key("StatusEquals").string(var_799.as_str());
    }
    if let Some(var_800) = &input.candidate_name_equals {
        object.key("CandidateNameEquals").string(var_800);
    }
    if let Some(var_801) = &input.sort_order {
        object.key("SortOrder").string(var_801.as_str());
    }
    if let Some(var_802) = &input.sort_by {
        object.key("SortBy").string(var_802.as_str());
    }
    if let Some(var_803) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_803).into()),
        );
    }
    if let Some(var_804) = &input.next_token {
        object.key("NextToken").string(var_804);
    }
}

pub fn serialize_structure_list_code_repositories_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCodeRepositoriesInput,
) {
    if let Some(var_805) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_805, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_806) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_806, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_807) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_807, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_808) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_808, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_809) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_809).into()),
        );
    }
    if let Some(var_810) = &input.name_contains {
        object.key("NameContains").string(var_810);
    }
    if let Some(var_811) = &input.next_token {
        object.key("NextToken").string(var_811);
    }
    if let Some(var_812) = &input.sort_by {
        object.key("SortBy").string(var_812.as_str());
    }
    if let Some(var_813) = &input.sort_order {
        object.key("SortOrder").string(var_813.as_str());
    }
}

pub fn serialize_structure_list_compilation_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCompilationJobsInput,
) {
    if let Some(var_814) = &input.next_token {
        object.key("NextToken").string(var_814);
    }
    if let Some(var_815) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_815).into()),
        );
    }
    if let Some(var_816) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_816, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_817) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_817, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_818) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_818, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_819) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_819, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_820) = &input.name_contains {
        object.key("NameContains").string(var_820);
    }
    if let Some(var_821) = &input.status_equals {
        object.key("StatusEquals").string(var_821.as_str());
    }
    if let Some(var_822) = &input.sort_by {
        object.key("SortBy").string(var_822.as_str());
    }
    if let Some(var_823) = &input.sort_order {
        object.key("SortOrder").string(var_823.as_str());
    }
}

pub fn serialize_structure_list_contexts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContextsInput,
) {
    if let Some(var_824) = &input.source_uri {
        object.key("SourceUri").string(var_824);
    }
    if let Some(var_825) = &input.context_type {
        object.key("ContextType").string(var_825);
    }
    if let Some(var_826) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_826, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_827) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_827, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_828) = &input.sort_by {
        object.key("SortBy").string(var_828.as_str());
    }
    if let Some(var_829) = &input.sort_order {
        object.key("SortOrder").string(var_829.as_str());
    }
    if let Some(var_830) = &input.next_token {
        object.key("NextToken").string(var_830);
    }
    if let Some(var_831) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_831).into()),
        );
    }
}

pub fn serialize_structure_list_data_quality_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataQualityJobDefinitionsInput,
) {
    if let Some(var_832) = &input.endpoint_name {
        object.key("EndpointName").string(var_832);
    }
    if let Some(var_833) = &input.sort_by {
        object.key("SortBy").string(var_833.as_str());
    }
    if let Some(var_834) = &input.sort_order {
        object.key("SortOrder").string(var_834.as_str());
    }
    if let Some(var_835) = &input.next_token {
        object.key("NextToken").string(var_835);
    }
    if let Some(var_836) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_836).into()),
        );
    }
    if let Some(var_837) = &input.name_contains {
        object.key("NameContains").string(var_837);
    }
    if let Some(var_838) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_838, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_839) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_839, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_device_fleets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDeviceFleetsInput,
) {
    if let Some(var_840) = &input.next_token {
        object.key("NextToken").string(var_840);
    }
    if let Some(var_841) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_841).into()),
        );
    }
    if let Some(var_842) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_842, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_843) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_843, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_844) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_844, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_845) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_845, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_846) = &input.name_contains {
        object.key("NameContains").string(var_846);
    }
    if let Some(var_847) = &input.sort_by {
        object.key("SortBy").string(var_847.as_str());
    }
    if let Some(var_848) = &input.sort_order {
        object.key("SortOrder").string(var_848.as_str());
    }
}

pub fn serialize_structure_list_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevicesInput,
) {
    if let Some(var_849) = &input.next_token {
        object.key("NextToken").string(var_849);
    }
    if let Some(var_850) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_850).into()),
        );
    }
    if let Some(var_851) = &input.latest_heartbeat_after {
        object
            .key("LatestHeartbeatAfter")
            .instant(var_851, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_852) = &input.model_name {
        object.key("ModelName").string(var_852);
    }
    if let Some(var_853) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_853);
    }
}

pub fn serialize_structure_list_domains_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDomainsInput,
) {
    if let Some(var_854) = &input.next_token {
        object.key("NextToken").string(var_854);
    }
    if let Some(var_855) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_855).into()),
        );
    }
}

pub fn serialize_structure_list_edge_packaging_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEdgePackagingJobsInput,
) {
    if let Some(var_856) = &input.next_token {
        object.key("NextToken").string(var_856);
    }
    if let Some(var_857) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_857).into()),
        );
    }
    if let Some(var_858) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_858, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_859) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_859, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_860) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_860, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_861) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_861, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_862) = &input.name_contains {
        object.key("NameContains").string(var_862);
    }
    if let Some(var_863) = &input.model_name_contains {
        object.key("ModelNameContains").string(var_863);
    }
    if let Some(var_864) = &input.status_equals {
        object.key("StatusEquals").string(var_864.as_str());
    }
    if let Some(var_865) = &input.sort_by {
        object.key("SortBy").string(var_865.as_str());
    }
    if let Some(var_866) = &input.sort_order {
        object.key("SortOrder").string(var_866.as_str());
    }
}

pub fn serialize_structure_list_endpoint_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointConfigsInput,
) {
    if let Some(var_867) = &input.sort_by {
        object.key("SortBy").string(var_867.as_str());
    }
    if let Some(var_868) = &input.sort_order {
        object.key("SortOrder").string(var_868.as_str());
    }
    if let Some(var_869) = &input.next_token {
        object.key("NextToken").string(var_869);
    }
    if let Some(var_870) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_870).into()),
        );
    }
    if let Some(var_871) = &input.name_contains {
        object.key("NameContains").string(var_871);
    }
    if let Some(var_872) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_872, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_873) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_873, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_endpoints_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointsInput,
) {
    if let Some(var_874) = &input.sort_by {
        object.key("SortBy").string(var_874.as_str());
    }
    if let Some(var_875) = &input.sort_order {
        object.key("SortOrder").string(var_875.as_str());
    }
    if let Some(var_876) = &input.next_token {
        object.key("NextToken").string(var_876);
    }
    if let Some(var_877) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_877).into()),
        );
    }
    if let Some(var_878) = &input.name_contains {
        object.key("NameContains").string(var_878);
    }
    if let Some(var_879) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_879, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_880) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_880, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_881) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_881, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_882) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_882, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_883) = &input.status_equals {
        object.key("StatusEquals").string(var_883.as_str());
    }
}

pub fn serialize_structure_list_experiments_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperimentsInput,
) {
    if let Some(var_884) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_884, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_885) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_885, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_886) = &input.sort_by {
        object.key("SortBy").string(var_886.as_str());
    }
    if let Some(var_887) = &input.sort_order {
        object.key("SortOrder").string(var_887.as_str());
    }
    if let Some(var_888) = &input.next_token {
        object.key("NextToken").string(var_888);
    }
    if let Some(var_889) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_889).into()),
        );
    }
}

pub fn serialize_structure_list_feature_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFeatureGroupsInput,
) {
    if let Some(var_890) = &input.name_contains {
        object.key("NameContains").string(var_890);
    }
    if let Some(var_891) = &input.feature_group_status_equals {
        object
            .key("FeatureGroupStatusEquals")
            .string(var_891.as_str());
    }
    if let Some(var_892) = &input.offline_store_status_equals {
        object
            .key("OfflineStoreStatusEquals")
            .string(var_892.as_str());
    }
    if let Some(var_893) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_893, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_894) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_894, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_895) = &input.sort_order {
        object.key("SortOrder").string(var_895.as_str());
    }
    if let Some(var_896) = &input.sort_by {
        object.key("SortBy").string(var_896.as_str());
    }
    if let Some(var_897) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_897).into()),
        );
    }
    if let Some(var_898) = &input.next_token {
        object.key("NextToken").string(var_898);
    }
}

pub fn serialize_structure_list_flow_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFlowDefinitionsInput,
) {
    if let Some(var_899) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_899, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_900) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_900, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_901) = &input.sort_order {
        object.key("SortOrder").string(var_901.as_str());
    }
    if let Some(var_902) = &input.next_token {
        object.key("NextToken").string(var_902);
    }
    if let Some(var_903) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_903).into()),
        );
    }
}

pub fn serialize_structure_list_human_task_uis_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHumanTaskUisInput,
) {
    if let Some(var_904) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_904, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_905) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_905, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_906) = &input.sort_order {
        object.key("SortOrder").string(var_906.as_str());
    }
    if let Some(var_907) = &input.next_token {
        object.key("NextToken").string(var_907);
    }
    if let Some(var_908) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_908).into()),
        );
    }
}

pub fn serialize_structure_list_hyper_parameter_tuning_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHyperParameterTuningJobsInput,
) {
    if let Some(var_909) = &input.next_token {
        object.key("NextToken").string(var_909);
    }
    if let Some(var_910) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_910).into()),
        );
    }
    if let Some(var_911) = &input.sort_by {
        object.key("SortBy").string(var_911.as_str());
    }
    if let Some(var_912) = &input.sort_order {
        object.key("SortOrder").string(var_912.as_str());
    }
    if let Some(var_913) = &input.name_contains {
        object.key("NameContains").string(var_913);
    }
    if let Some(var_914) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_914, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_915) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_915, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_916) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_916, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_917) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_917, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_918) = &input.status_equals {
        object.key("StatusEquals").string(var_918.as_str());
    }
}

pub fn serialize_structure_list_images_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagesInput,
) {
    if let Some(var_919) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_919, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_920) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_920, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_921) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_921, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_922) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_922, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_923) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_923).into()),
        );
    }
    if let Some(var_924) = &input.name_contains {
        object.key("NameContains").string(var_924);
    }
    if let Some(var_925) = &input.next_token {
        object.key("NextToken").string(var_925);
    }
    if let Some(var_926) = &input.sort_by {
        object.key("SortBy").string(var_926.as_str());
    }
    if let Some(var_927) = &input.sort_order {
        object.key("SortOrder").string(var_927.as_str());
    }
}

pub fn serialize_structure_list_image_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImageVersionsInput,
) {
    if let Some(var_928) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_928, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_929) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_929, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_930) = &input.image_name {
        object.key("ImageName").string(var_930);
    }
    if let Some(var_931) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_931, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_932) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_932, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_933) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_933).into()),
        );
    }
    if let Some(var_934) = &input.next_token {
        object.key("NextToken").string(var_934);
    }
    if let Some(var_935) = &input.sort_by {
        object.key("SortBy").string(var_935.as_str());
    }
    if let Some(var_936) = &input.sort_order {
        object.key("SortOrder").string(var_936.as_str());
    }
}

pub fn serialize_structure_list_labeling_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsInput,
) {
    if let Some(var_937) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_937, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_938) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_938, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_939) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_939, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_940) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_940, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_941) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_941).into()),
        );
    }
    if let Some(var_942) = &input.next_token {
        object.key("NextToken").string(var_942);
    }
    if let Some(var_943) = &input.name_contains {
        object.key("NameContains").string(var_943);
    }
    if let Some(var_944) = &input.sort_by {
        object.key("SortBy").string(var_944.as_str());
    }
    if let Some(var_945) = &input.sort_order {
        object.key("SortOrder").string(var_945.as_str());
    }
    if let Some(var_946) = &input.status_equals {
        object.key("StatusEquals").string(var_946.as_str());
    }
}

pub fn serialize_structure_list_labeling_jobs_for_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsForWorkteamInput,
) {
    if let Some(var_947) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_947);
    }
    if let Some(var_948) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_948).into()),
        );
    }
    if let Some(var_949) = &input.next_token {
        object.key("NextToken").string(var_949);
    }
    if let Some(var_950) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_950, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_951) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_951, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_952) = &input.job_reference_code_contains {
        object.key("JobReferenceCodeContains").string(var_952);
    }
    if let Some(var_953) = &input.sort_by {
        object.key("SortBy").string(var_953.as_str());
    }
    if let Some(var_954) = &input.sort_order {
        object.key("SortOrder").string(var_954.as_str());
    }
}

pub fn serialize_structure_list_model_bias_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelBiasJobDefinitionsInput,
) {
    if let Some(var_955) = &input.endpoint_name {
        object.key("EndpointName").string(var_955);
    }
    if let Some(var_956) = &input.sort_by {
        object.key("SortBy").string(var_956.as_str());
    }
    if let Some(var_957) = &input.sort_order {
        object.key("SortOrder").string(var_957.as_str());
    }
    if let Some(var_958) = &input.next_token {
        object.key("NextToken").string(var_958);
    }
    if let Some(var_959) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_959).into()),
        );
    }
    if let Some(var_960) = &input.name_contains {
        object.key("NameContains").string(var_960);
    }
    if let Some(var_961) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_961, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_962) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_962, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_model_explainability_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelExplainabilityJobDefinitionsInput,
) {
    if let Some(var_963) = &input.endpoint_name {
        object.key("EndpointName").string(var_963);
    }
    if let Some(var_964) = &input.sort_by {
        object.key("SortBy").string(var_964.as_str());
    }
    if let Some(var_965) = &input.sort_order {
        object.key("SortOrder").string(var_965.as_str());
    }
    if let Some(var_966) = &input.next_token {
        object.key("NextToken").string(var_966);
    }
    if let Some(var_967) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_967).into()),
        );
    }
    if let Some(var_968) = &input.name_contains {
        object.key("NameContains").string(var_968);
    }
    if let Some(var_969) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_969, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_970) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_970, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_model_package_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackageGroupsInput,
) {
    if let Some(var_971) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_971, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_972) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_972, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_973) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_973).into()),
        );
    }
    if let Some(var_974) = &input.name_contains {
        object.key("NameContains").string(var_974);
    }
    if let Some(var_975) = &input.next_token {
        object.key("NextToken").string(var_975);
    }
    if let Some(var_976) = &input.sort_by {
        object.key("SortBy").string(var_976.as_str());
    }
    if let Some(var_977) = &input.sort_order {
        object.key("SortOrder").string(var_977.as_str());
    }
}

pub fn serialize_structure_list_model_packages_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackagesInput,
) {
    if let Some(var_978) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_978, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_979) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_979, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_980) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_980).into()),
        );
    }
    if let Some(var_981) = &input.name_contains {
        object.key("NameContains").string(var_981);
    }
    if let Some(var_982) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_982.as_str());
    }
    if let Some(var_983) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_983);
    }
    if let Some(var_984) = &input.model_package_type {
        object.key("ModelPackageType").string(var_984.as_str());
    }
    if let Some(var_985) = &input.next_token {
        object.key("NextToken").string(var_985);
    }
    if let Some(var_986) = &input.sort_by {
        object.key("SortBy").string(var_986.as_str());
    }
    if let Some(var_987) = &input.sort_order {
        object.key("SortOrder").string(var_987.as_str());
    }
}

pub fn serialize_structure_list_model_quality_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelQualityJobDefinitionsInput,
) {
    if let Some(var_988) = &input.endpoint_name {
        object.key("EndpointName").string(var_988);
    }
    if let Some(var_989) = &input.sort_by {
        object.key("SortBy").string(var_989.as_str());
    }
    if let Some(var_990) = &input.sort_order {
        object.key("SortOrder").string(var_990.as_str());
    }
    if let Some(var_991) = &input.next_token {
        object.key("NextToken").string(var_991);
    }
    if let Some(var_992) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_992).into()),
        );
    }
    if let Some(var_993) = &input.name_contains {
        object.key("NameContains").string(var_993);
    }
    if let Some(var_994) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_994, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_995) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_995, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_models_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelsInput,
) {
    if let Some(var_996) = &input.sort_by {
        object.key("SortBy").string(var_996.as_str());
    }
    if let Some(var_997) = &input.sort_order {
        object.key("SortOrder").string(var_997.as_str());
    }
    if let Some(var_998) = &input.next_token {
        object.key("NextToken").string(var_998);
    }
    if let Some(var_999) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_999).into()),
        );
    }
    if let Some(var_1000) = &input.name_contains {
        object.key("NameContains").string(var_1000);
    }
    if let Some(var_1001) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1001, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1002) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1002, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_monitoring_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringExecutionsInput,
) {
    if let Some(var_1003) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1003);
    }
    if let Some(var_1004) = &input.endpoint_name {
        object.key("EndpointName").string(var_1004);
    }
    if let Some(var_1005) = &input.sort_by {
        object.key("SortBy").string(var_1005.as_str());
    }
    if let Some(var_1006) = &input.sort_order {
        object.key("SortOrder").string(var_1006.as_str());
    }
    if let Some(var_1007) = &input.next_token {
        object.key("NextToken").string(var_1007);
    }
    if let Some(var_1008) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1008).into()),
        );
    }
    if let Some(var_1009) = &input.scheduled_time_before {
        object
            .key("ScheduledTimeBefore")
            .instant(var_1009, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1010) = &input.scheduled_time_after {
        object
            .key("ScheduledTimeAfter")
            .instant(var_1010, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1011) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1011, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1012) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1012, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1013) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1013, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1014) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1014, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1015) = &input.status_equals {
        object.key("StatusEquals").string(var_1015.as_str());
    }
    if let Some(var_1016) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1016);
    }
    if let Some(var_1017) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1017.as_str());
    }
}

pub fn serialize_structure_list_monitoring_schedules_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringSchedulesInput,
) {
    if let Some(var_1018) = &input.endpoint_name {
        object.key("EndpointName").string(var_1018);
    }
    if let Some(var_1019) = &input.sort_by {
        object.key("SortBy").string(var_1019.as_str());
    }
    if let Some(var_1020) = &input.sort_order {
        object.key("SortOrder").string(var_1020.as_str());
    }
    if let Some(var_1021) = &input.next_token {
        object.key("NextToken").string(var_1021);
    }
    if let Some(var_1022) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1022).into()),
        );
    }
    if let Some(var_1023) = &input.name_contains {
        object.key("NameContains").string(var_1023);
    }
    if let Some(var_1024) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1024, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1025) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1025, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1026) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1026, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1027) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1027, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1028) = &input.status_equals {
        object.key("StatusEquals").string(var_1028.as_str());
    }
    if let Some(var_1029) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1029);
    }
    if let Some(var_1030) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1030.as_str());
    }
}

pub fn serialize_structure_list_notebook_instance_lifecycle_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstanceLifecycleConfigsInput,
) {
    if let Some(var_1031) = &input.next_token {
        object.key("NextToken").string(var_1031);
    }
    if let Some(var_1032) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1032).into()),
        );
    }
    if let Some(var_1033) = &input.sort_by {
        object.key("SortBy").string(var_1033.as_str());
    }
    if let Some(var_1034) = &input.sort_order {
        object.key("SortOrder").string(var_1034.as_str());
    }
    if let Some(var_1035) = &input.name_contains {
        object.key("NameContains").string(var_1035);
    }
    if let Some(var_1036) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1036, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1037) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1037, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1038) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1038, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1039) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1039, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_notebook_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstancesInput,
) {
    if let Some(var_1040) = &input.next_token {
        object.key("NextToken").string(var_1040);
    }
    if let Some(var_1041) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1041).into()),
        );
    }
    if let Some(var_1042) = &input.sort_by {
        object.key("SortBy").string(var_1042.as_str());
    }
    if let Some(var_1043) = &input.sort_order {
        object.key("SortOrder").string(var_1043.as_str());
    }
    if let Some(var_1044) = &input.name_contains {
        object.key("NameContains").string(var_1044);
    }
    if let Some(var_1045) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1045, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1046) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1046, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1047) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1047, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1048) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1048, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1049) = &input.status_equals {
        object.key("StatusEquals").string(var_1049.as_str());
    }
    if let Some(var_1050) = &input.notebook_instance_lifecycle_config_name_contains {
        object
            .key("NotebookInstanceLifecycleConfigNameContains")
            .string(var_1050);
    }
    if let Some(var_1051) = &input.default_code_repository_contains {
        object.key("DefaultCodeRepositoryContains").string(var_1051);
    }
    if let Some(var_1052) = &input.additional_code_repository_equals {
        object
            .key("AdditionalCodeRepositoryEquals")
            .string(var_1052);
    }
}

pub fn serialize_structure_list_pipeline_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionsInput,
) {
    if let Some(var_1053) = &input.pipeline_name {
        object.key("PipelineName").string(var_1053);
    }
    if let Some(var_1054) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1054, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1055) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1055, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1056) = &input.sort_by {
        object.key("SortBy").string(var_1056.as_str());
    }
    if let Some(var_1057) = &input.sort_order {
        object.key("SortOrder").string(var_1057.as_str());
    }
    if let Some(var_1058) = &input.next_token {
        object.key("NextToken").string(var_1058);
    }
    if let Some(var_1059) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1059).into()),
        );
    }
}

pub fn serialize_structure_list_pipeline_execution_steps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionStepsInput,
) {
    if let Some(var_1060) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1060);
    }
    if let Some(var_1061) = &input.next_token {
        object.key("NextToken").string(var_1061);
    }
    if let Some(var_1062) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1062).into()),
        );
    }
    if let Some(var_1063) = &input.sort_order {
        object.key("SortOrder").string(var_1063.as_str());
    }
}

pub fn serialize_structure_list_pipeline_parameters_for_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineParametersForExecutionInput,
) {
    if let Some(var_1064) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1064);
    }
    if let Some(var_1065) = &input.next_token {
        object.key("NextToken").string(var_1065);
    }
    if let Some(var_1066) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1066).into()),
        );
    }
}

pub fn serialize_structure_list_pipelines_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelinesInput,
) {
    if let Some(var_1067) = &input.pipeline_name_prefix {
        object.key("PipelineNamePrefix").string(var_1067);
    }
    if let Some(var_1068) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1068, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1069) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1069, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1070) = &input.sort_by {
        object.key("SortBy").string(var_1070.as_str());
    }
    if let Some(var_1071) = &input.sort_order {
        object.key("SortOrder").string(var_1071.as_str());
    }
    if let Some(var_1072) = &input.next_token {
        object.key("NextToken").string(var_1072);
    }
    if let Some(var_1073) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1073).into()),
        );
    }
}

pub fn serialize_structure_list_processing_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProcessingJobsInput,
) {
    if let Some(var_1074) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1074, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1075) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1075, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1076) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1076, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1077) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1077, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1078) = &input.name_contains {
        object.key("NameContains").string(var_1078);
    }
    if let Some(var_1079) = &input.status_equals {
        object.key("StatusEquals").string(var_1079.as_str());
    }
    if let Some(var_1080) = &input.sort_by {
        object.key("SortBy").string(var_1080.as_str());
    }
    if let Some(var_1081) = &input.sort_order {
        object.key("SortOrder").string(var_1081.as_str());
    }
    if let Some(var_1082) = &input.next_token {
        object.key("NextToken").string(var_1082);
    }
    if let Some(var_1083) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1083).into()),
        );
    }
}

pub fn serialize_structure_list_projects_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProjectsInput,
) {
    if let Some(var_1084) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1084, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1085) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1085, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1086) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1086).into()),
        );
    }
    if let Some(var_1087) = &input.name_contains {
        object.key("NameContains").string(var_1087);
    }
    if let Some(var_1088) = &input.next_token {
        object.key("NextToken").string(var_1088);
    }
    if let Some(var_1089) = &input.sort_by {
        object.key("SortBy").string(var_1089.as_str());
    }
    if let Some(var_1090) = &input.sort_order {
        object.key("SortOrder").string(var_1090.as_str());
    }
}

pub fn serialize_structure_list_subscribed_workteams_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSubscribedWorkteamsInput,
) {
    if let Some(var_1091) = &input.name_contains {
        object.key("NameContains").string(var_1091);
    }
    if let Some(var_1092) = &input.next_token {
        object.key("NextToken").string(var_1092);
    }
    if let Some(var_1093) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1093).into()),
        );
    }
}

pub fn serialize_structure_list_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsInput,
) {
    if let Some(var_1094) = &input.resource_arn {
        object.key("ResourceArn").string(var_1094);
    }
    if let Some(var_1095) = &input.next_token {
        object.key("NextToken").string(var_1095);
    }
    if let Some(var_1096) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1096).into()),
        );
    }
}

pub fn serialize_structure_list_training_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsInput,
) {
    if let Some(var_1097) = &input.next_token {
        object.key("NextToken").string(var_1097);
    }
    if let Some(var_1098) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1098).into()),
        );
    }
    if let Some(var_1099) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1099, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1100) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1100, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1101) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1101, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1102) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1102, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1103) = &input.name_contains {
        object.key("NameContains").string(var_1103);
    }
    if let Some(var_1104) = &input.status_equals {
        object.key("StatusEquals").string(var_1104.as_str());
    }
    if let Some(var_1105) = &input.sort_by {
        object.key("SortBy").string(var_1105.as_str());
    }
    if let Some(var_1106) = &input.sort_order {
        object.key("SortOrder").string(var_1106.as_str());
    }
}

pub fn serialize_structure_list_training_jobs_for_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsForHyperParameterTuningJobInput,
) {
    if let Some(var_1107) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_1107);
    }
    if let Some(var_1108) = &input.next_token {
        object.key("NextToken").string(var_1108);
    }
    if let Some(var_1109) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1109).into()),
        );
    }
    if let Some(var_1110) = &input.status_equals {
        object.key("StatusEquals").string(var_1110.as_str());
    }
    if let Some(var_1111) = &input.sort_by {
        object.key("SortBy").string(var_1111.as_str());
    }
    if let Some(var_1112) = &input.sort_order {
        object.key("SortOrder").string(var_1112.as_str());
    }
}

pub fn serialize_structure_list_transform_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTransformJobsInput,
) {
    if let Some(var_1113) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1113, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1114) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1114, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1115) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1115, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1116) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1116, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1117) = &input.name_contains {
        object.key("NameContains").string(var_1117);
    }
    if let Some(var_1118) = &input.status_equals {
        object.key("StatusEquals").string(var_1118.as_str());
    }
    if let Some(var_1119) = &input.sort_by {
        object.key("SortBy").string(var_1119.as_str());
    }
    if let Some(var_1120) = &input.sort_order {
        object.key("SortOrder").string(var_1120.as_str());
    }
    if let Some(var_1121) = &input.next_token {
        object.key("NextToken").string(var_1121);
    }
    if let Some(var_1122) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1122).into()),
        );
    }
}

pub fn serialize_structure_list_trial_components_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialComponentsInput,
) {
    if let Some(var_1123) = &input.experiment_name {
        object.key("ExperimentName").string(var_1123);
    }
    if let Some(var_1124) = &input.trial_name {
        object.key("TrialName").string(var_1124);
    }
    if let Some(var_1125) = &input.source_arn {
        object.key("SourceArn").string(var_1125);
    }
    if let Some(var_1126) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1126, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1127) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1127, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1128) = &input.sort_by {
        object.key("SortBy").string(var_1128.as_str());
    }
    if let Some(var_1129) = &input.sort_order {
        object.key("SortOrder").string(var_1129.as_str());
    }
    if let Some(var_1130) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1130).into()),
        );
    }
    if let Some(var_1131) = &input.next_token {
        object.key("NextToken").string(var_1131);
    }
}

pub fn serialize_structure_list_trials_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialsInput,
) {
    if let Some(var_1132) = &input.experiment_name {
        object.key("ExperimentName").string(var_1132);
    }
    if let Some(var_1133) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1133);
    }
    if let Some(var_1134) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1134, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1135) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1135, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1136) = &input.sort_by {
        object.key("SortBy").string(var_1136.as_str());
    }
    if let Some(var_1137) = &input.sort_order {
        object.key("SortOrder").string(var_1137.as_str());
    }
    if let Some(var_1138) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1138).into()),
        );
    }
    if let Some(var_1139) = &input.next_token {
        object.key("NextToken").string(var_1139);
    }
}

pub fn serialize_structure_list_user_profiles_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUserProfilesInput,
) {
    if let Some(var_1140) = &input.next_token {
        object.key("NextToken").string(var_1140);
    }
    if let Some(var_1141) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1141).into()),
        );
    }
    if let Some(var_1142) = &input.sort_order {
        object.key("SortOrder").string(var_1142.as_str());
    }
    if let Some(var_1143) = &input.sort_by {
        object.key("SortBy").string(var_1143.as_str());
    }
    if let Some(var_1144) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_1144);
    }
    if let Some(var_1145) = &input.user_profile_name_contains {
        object.key("UserProfileNameContains").string(var_1145);
    }
}

pub fn serialize_structure_list_workforces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkforcesInput,
) {
    if let Some(var_1146) = &input.sort_by {
        object.key("SortBy").string(var_1146.as_str());
    }
    if let Some(var_1147) = &input.sort_order {
        object.key("SortOrder").string(var_1147.as_str());
    }
    if let Some(var_1148) = &input.name_contains {
        object.key("NameContains").string(var_1148);
    }
    if let Some(var_1149) = &input.next_token {
        object.key("NextToken").string(var_1149);
    }
    if let Some(var_1150) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1150).into()),
        );
    }
}

pub fn serialize_structure_list_workteams_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkteamsInput,
) {
    if let Some(var_1151) = &input.sort_by {
        object.key("SortBy").string(var_1151.as_str());
    }
    if let Some(var_1152) = &input.sort_order {
        object.key("SortOrder").string(var_1152.as_str());
    }
    if let Some(var_1153) = &input.name_contains {
        object.key("NameContains").string(var_1153);
    }
    if let Some(var_1154) = &input.next_token {
        object.key("NextToken").string(var_1154);
    }
    if let Some(var_1155) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1155).into()),
        );
    }
}

pub fn serialize_structure_put_model_package_group_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutModelPackageGroupPolicyInput,
) {
    if let Some(var_1156) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_1156);
    }
    if let Some(var_1157) = &input.resource_policy {
        object.key("ResourcePolicy").string(var_1157);
    }
}

pub fn serialize_structure_register_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterDevicesInput,
) {
    if let Some(var_1158) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1158);
    }
    if let Some(var_1159) = &input.devices {
        let mut array_1160 = object.key("Devices").start_array();
        for item_1161 in var_1159 {
            {
                let mut object_1162 = array_1160.value().start_object();
                crate::json_ser::serialize_structure_device(&mut object_1162, item_1161);
                object_1162.finish();
            }
        }
        array_1160.finish();
    }
    if let Some(var_1163) = &input.tags {
        let mut array_1164 = object.key("Tags").start_array();
        for item_1165 in var_1163 {
            {
                let mut object_1166 = array_1164.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_1166, item_1165);
                object_1166.finish();
            }
        }
        array_1164.finish();
    }
}

pub fn serialize_structure_render_ui_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RenderUiTemplateInput,
) {
    if let Some(var_1167) = &input.ui_template {
        let mut object_1168 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_ui_template(&mut object_1168, var_1167);
        object_1168.finish();
    }
    if let Some(var_1169) = &input.task {
        let mut object_1170 = object.key("Task").start_object();
        crate::json_ser::serialize_structure_renderable_task(&mut object_1170, var_1169);
        object_1170.finish();
    }
    if let Some(var_1171) = &input.role_arn {
        object.key("RoleArn").string(var_1171);
    }
    if let Some(var_1172) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1172);
    }
}

pub fn serialize_structure_search_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchInput,
) {
    if let Some(var_1173) = &input.resource {
        object.key("Resource").string(var_1173.as_str());
    }
    if let Some(var_1174) = &input.search_expression {
        let mut object_1175 = object.key("SearchExpression").start_object();
        crate::json_ser::serialize_structure_search_expression(&mut object_1175, var_1174);
        object_1175.finish();
    }
    if let Some(var_1176) = &input.sort_by {
        object.key("SortBy").string(var_1176);
    }
    if let Some(var_1177) = &input.sort_order {
        object.key("SortOrder").string(var_1177.as_str());
    }
    if let Some(var_1178) = &input.next_token {
        object.key("NextToken").string(var_1178);
    }
    if let Some(var_1179) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1179).into()),
        );
    }
}

pub fn serialize_structure_send_pipeline_execution_step_failure_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendPipelineExecutionStepFailureInput,
) {
    if let Some(var_1180) = &input.callback_token {
        object.key("CallbackToken").string(var_1180);
    }
    if let Some(var_1181) = &input.failure_reason {
        object.key("FailureReason").string(var_1181);
    }
    if let Some(var_1182) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1182);
    }
}

pub fn serialize_structure_send_pipeline_execution_step_success_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendPipelineExecutionStepSuccessInput,
) {
    if let Some(var_1183) = &input.callback_token {
        object.key("CallbackToken").string(var_1183);
    }
    if let Some(var_1184) = &input.output_parameters {
        let mut array_1185 = object.key("OutputParameters").start_array();
        for item_1186 in var_1184 {
            {
                let mut object_1187 = array_1185.value().start_object();
                crate::json_ser::serialize_structure_output_parameter(&mut object_1187, item_1186);
                object_1187.finish();
            }
        }
        array_1185.finish();
    }
    if let Some(var_1188) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1188);
    }
}

pub fn serialize_structure_start_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMonitoringScheduleInput,
) {
    if let Some(var_1189) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1189);
    }
}

pub fn serialize_structure_start_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartNotebookInstanceInput,
) {
    if let Some(var_1190) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1190);
    }
}

pub fn serialize_structure_start_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartPipelineExecutionInput,
) {
    if let Some(var_1191) = &input.pipeline_name {
        object.key("PipelineName").string(var_1191);
    }
    if let Some(var_1192) = &input.pipeline_execution_display_name {
        object.key("PipelineExecutionDisplayName").string(var_1192);
    }
    if let Some(var_1193) = &input.pipeline_parameters {
        let mut array_1194 = object.key("PipelineParameters").start_array();
        for item_1195 in var_1193 {
            {
                let mut object_1196 = array_1194.value().start_object();
                crate::json_ser::serialize_structure_parameter(&mut object_1196, item_1195);
                object_1196.finish();
            }
        }
        array_1194.finish();
    }
    if let Some(var_1197) = &input.pipeline_execution_description {
        object.key("PipelineExecutionDescription").string(var_1197);
    }
    if let Some(var_1198) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1198);
    }
}

pub fn serialize_structure_stop_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopAutoMlJobInput,
) {
    if let Some(var_1199) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_1199);
    }
}

pub fn serialize_structure_stop_compilation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCompilationJobInput,
) {
    if let Some(var_1200) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_1200);
    }
}

pub fn serialize_structure_stop_edge_packaging_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEdgePackagingJobInput,
) {
    if let Some(var_1201) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_1201);
    }
}

pub fn serialize_structure_stop_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopHyperParameterTuningJobInput,
) {
    if let Some(var_1202) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_1202);
    }
}

pub fn serialize_structure_stop_labeling_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopLabelingJobInput,
) {
    if let Some(var_1203) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_1203);
    }
}

pub fn serialize_structure_stop_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopMonitoringScheduleInput,
) {
    if let Some(var_1204) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1204);
    }
}

pub fn serialize_structure_stop_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopNotebookInstanceInput,
) {
    if let Some(var_1205) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1205);
    }
}

pub fn serialize_structure_stop_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopPipelineExecutionInput,
) {
    if let Some(var_1206) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1206);
    }
    if let Some(var_1207) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1207);
    }
}

pub fn serialize_structure_stop_processing_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopProcessingJobInput,
) {
    if let Some(var_1208) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_1208);
    }
}

pub fn serialize_structure_stop_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTrainingJobInput,
) {
    if let Some(var_1209) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1209);
    }
}

pub fn serialize_structure_stop_transform_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTransformJobInput,
) {
    if let Some(var_1210) = &input.transform_job_name {
        object.key("TransformJobName").string(var_1210);
    }
}

pub fn serialize_structure_update_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateActionInput,
) {
    if let Some(var_1211) = &input.action_name {
        object.key("ActionName").string(var_1211);
    }
    if let Some(var_1212) = &input.description {
        object.key("Description").string(var_1212);
    }
    if let Some(var_1213) = &input.status {
        object.key("Status").string(var_1213.as_str());
    }
    if let Some(var_1214) = &input.properties {
        let mut object_1215 = object.key("Properties").start_object();
        for (key_1216, value_1217) in var_1214 {
            {
                object_1215.key(key_1216).string(value_1217);
            }
        }
        object_1215.finish();
    }
    if let Some(var_1218) = &input.properties_to_remove {
        let mut array_1219 = object.key("PropertiesToRemove").start_array();
        for item_1220 in var_1218 {
            {
                array_1219.value().string(item_1220);
            }
        }
        array_1219.finish();
    }
}

pub fn serialize_structure_update_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAppImageConfigInput,
) {
    if let Some(var_1221) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_1221);
    }
    if let Some(var_1222) = &input.kernel_gateway_image_config {
        let mut object_1223 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_kernel_gateway_image_config(
            &mut object_1223,
            var_1222,
        );
        object_1223.finish();
    }
}

pub fn serialize_structure_update_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateArtifactInput,
) {
    if let Some(var_1224) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_1224);
    }
    if let Some(var_1225) = &input.artifact_name {
        object.key("ArtifactName").string(var_1225);
    }
    if let Some(var_1226) = &input.properties {
        let mut object_1227 = object.key("Properties").start_object();
        for (key_1228, value_1229) in var_1226 {
            {
                object_1227.key(key_1228).string(value_1229);
            }
        }
        object_1227.finish();
    }
    if let Some(var_1230) = &input.properties_to_remove {
        let mut array_1231 = object.key("PropertiesToRemove").start_array();
        for item_1232 in var_1230 {
            {
                array_1231.value().string(item_1232);
            }
        }
        array_1231.finish();
    }
}

pub fn serialize_structure_update_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCodeRepositoryInput,
) {
    if let Some(var_1233) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_1233);
    }
    if let Some(var_1234) = &input.git_config {
        let mut object_1235 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_git_config_for_update(&mut object_1235, var_1234);
        object_1235.finish();
    }
}

pub fn serialize_structure_update_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContextInput,
) {
    if let Some(var_1236) = &input.context_name {
        object.key("ContextName").string(var_1236);
    }
    if let Some(var_1237) = &input.description {
        object.key("Description").string(var_1237);
    }
    if let Some(var_1238) = &input.properties {
        let mut object_1239 = object.key("Properties").start_object();
        for (key_1240, value_1241) in var_1238 {
            {
                object_1239.key(key_1240).string(value_1241);
            }
        }
        object_1239.finish();
    }
    if let Some(var_1242) = &input.properties_to_remove {
        let mut array_1243 = object.key("PropertiesToRemove").start_array();
        for item_1244 in var_1242 {
            {
                array_1243.value().string(item_1244);
            }
        }
        array_1243.finish();
    }
}

pub fn serialize_structure_update_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDeviceFleetInput,
) {
    if let Some(var_1245) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1245);
    }
    if let Some(var_1246) = &input.role_arn {
        object.key("RoleArn").string(var_1246);
    }
    if let Some(var_1247) = &input.description {
        object.key("Description").string(var_1247);
    }
    if let Some(var_1248) = &input.output_config {
        let mut object_1249 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_edge_output_config(&mut object_1249, var_1248);
        object_1249.finish();
    }
    if let Some(var_1250) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_1250);
    }
}

pub fn serialize_structure_update_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevicesInput,
) {
    if let Some(var_1251) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1251);
    }
    if let Some(var_1252) = &input.devices {
        let mut array_1253 = object.key("Devices").start_array();
        for item_1254 in var_1252 {
            {
                let mut object_1255 = array_1253.value().start_object();
                crate::json_ser::serialize_structure_device(&mut object_1255, item_1254);
                object_1255.finish();
            }
        }
        array_1253.finish();
    }
}

pub fn serialize_structure_update_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainInput,
) {
    if let Some(var_1256) = &input.domain_id {
        object.key("DomainId").string(var_1256);
    }
    if let Some(var_1257) = &input.default_user_settings {
        let mut object_1258 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_1258, var_1257);
        object_1258.finish();
    }
}

pub fn serialize_structure_update_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointInput,
) {
    if let Some(var_1259) = &input.endpoint_name {
        object.key("EndpointName").string(var_1259);
    }
    if let Some(var_1260) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_1260);
    }
    if input.retain_all_variant_properties {
        object
            .key("RetainAllVariantProperties")
            .boolean(input.retain_all_variant_properties);
    }
    if let Some(var_1261) = &input.exclude_retained_variant_properties {
        let mut array_1262 = object.key("ExcludeRetainedVariantProperties").start_array();
        for item_1263 in var_1261 {
            {
                let mut object_1264 = array_1262.value().start_object();
                crate::json_ser::serialize_structure_variant_property(&mut object_1264, item_1263);
                object_1264.finish();
            }
        }
        array_1262.finish();
    }
    if let Some(var_1265) = &input.deployment_config {
        let mut object_1266 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_deployment_config(&mut object_1266, var_1265);
        object_1266.finish();
    }
}

pub fn serialize_structure_update_endpoint_weights_and_capacities_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointWeightsAndCapacitiesInput,
) {
    if let Some(var_1267) = &input.endpoint_name {
        object.key("EndpointName").string(var_1267);
    }
    if let Some(var_1268) = &input.desired_weights_and_capacities {
        let mut array_1269 = object.key("DesiredWeightsAndCapacities").start_array();
        for item_1270 in var_1268 {
            {
                let mut object_1271 = array_1269.value().start_object();
                crate::json_ser::serialize_structure_desired_weight_and_capacity(
                    &mut object_1271,
                    item_1270,
                );
                object_1271.finish();
            }
        }
        array_1269.finish();
    }
}

pub fn serialize_structure_update_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExperimentInput,
) {
    if let Some(var_1272) = &input.experiment_name {
        object.key("ExperimentName").string(var_1272);
    }
    if let Some(var_1273) = &input.display_name {
        object.key("DisplayName").string(var_1273);
    }
    if let Some(var_1274) = &input.description {
        object.key("Description").string(var_1274);
    }
}

pub fn serialize_structure_update_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateImageInput,
) {
    if let Some(var_1275) = &input.delete_properties {
        let mut array_1276 = object.key("DeleteProperties").start_array();
        for item_1277 in var_1275 {
            {
                array_1276.value().string(item_1277);
            }
        }
        array_1276.finish();
    }
    if let Some(var_1278) = &input.description {
        object.key("Description").string(var_1278);
    }
    if let Some(var_1279) = &input.display_name {
        object.key("DisplayName").string(var_1279);
    }
    if let Some(var_1280) = &input.image_name {
        object.key("ImageName").string(var_1280);
    }
    if let Some(var_1281) = &input.role_arn {
        object.key("RoleArn").string(var_1281);
    }
}

pub fn serialize_structure_update_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateModelPackageInput,
) {
    if let Some(var_1282) = &input.model_package_arn {
        object.key("ModelPackageArn").string(var_1282);
    }
    if let Some(var_1283) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_1283.as_str());
    }
    if let Some(var_1284) = &input.approval_description {
        object.key("ApprovalDescription").string(var_1284);
    }
}

pub fn serialize_structure_update_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMonitoringScheduleInput,
) {
    if let Some(var_1285) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1285);
    }
    if let Some(var_1286) = &input.monitoring_schedule_config {
        let mut object_1287 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_schedule_config(&mut object_1287, var_1286);
        object_1287.finish();
    }
}

pub fn serialize_structure_update_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceInput,
) {
    if let Some(var_1288) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1288);
    }
    if let Some(var_1289) = &input.instance_type {
        object.key("InstanceType").string(var_1289.as_str());
    }
    if let Some(var_1290) = &input.role_arn {
        object.key("RoleArn").string(var_1290);
    }
    if let Some(var_1291) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_1291);
    }
    if input.disassociate_lifecycle_config {
        object
            .key("DisassociateLifecycleConfig")
            .boolean(input.disassociate_lifecycle_config);
    }
    if let Some(var_1292) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1292).into()),
        );
    }
    if let Some(var_1293) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_1293);
    }
    if let Some(var_1294) = &input.additional_code_repositories {
        let mut array_1295 = object.key("AdditionalCodeRepositories").start_array();
        for item_1296 in var_1294 {
            {
                array_1295.value().string(item_1296);
            }
        }
        array_1295.finish();
    }
    if let Some(var_1297) = &input.accelerator_types {
        let mut array_1298 = object.key("AcceleratorTypes").start_array();
        for item_1299 in var_1297 {
            {
                array_1298.value().string(item_1299.as_str());
            }
        }
        array_1298.finish();
    }
    if input.disassociate_accelerator_types {
        object
            .key("DisassociateAcceleratorTypes")
            .boolean(input.disassociate_accelerator_types);
    }
    if input.disassociate_default_code_repository {
        object
            .key("DisassociateDefaultCodeRepository")
            .boolean(input.disassociate_default_code_repository);
    }
    if input.disassociate_additional_code_repositories {
        object
            .key("DisassociateAdditionalCodeRepositories")
            .boolean(input.disassociate_additional_code_repositories);
    }
    if let Some(var_1300) = &input.root_access {
        object.key("RootAccess").string(var_1300.as_str());
    }
}

pub fn serialize_structure_update_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_1301) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_1301);
    }
    if let Some(var_1302) = &input.on_create {
        let mut array_1303 = object.key("OnCreate").start_array();
        for item_1304 in var_1302 {
            {
                let mut object_1305 = array_1303.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_1305,
                    item_1304,
                );
                object_1305.finish();
            }
        }
        array_1303.finish();
    }
    if let Some(var_1306) = &input.on_start {
        let mut array_1307 = object.key("OnStart").start_array();
        for item_1308 in var_1306 {
            {
                let mut object_1309 = array_1307.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_1309,
                    item_1308,
                );
                object_1309.finish();
            }
        }
        array_1307.finish();
    }
}

pub fn serialize_structure_update_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineInput,
) {
    if let Some(var_1310) = &input.pipeline_name {
        object.key("PipelineName").string(var_1310);
    }
    if let Some(var_1311) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_1311);
    }
    if let Some(var_1312) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_1312);
    }
    if let Some(var_1313) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_1313);
    }
    if let Some(var_1314) = &input.role_arn {
        object.key("RoleArn").string(var_1314);
    }
}

pub fn serialize_structure_update_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineExecutionInput,
) {
    if let Some(var_1315) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1315);
    }
    if let Some(var_1316) = &input.pipeline_execution_description {
        object.key("PipelineExecutionDescription").string(var_1316);
    }
    if let Some(var_1317) = &input.pipeline_execution_display_name {
        object.key("PipelineExecutionDisplayName").string(var_1317);
    }
}

pub fn serialize_structure_update_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrainingJobInput,
) {
    if let Some(var_1318) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1318);
    }
    if let Some(var_1319) = &input.profiler_config {
        let mut object_1320 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_profiler_config_for_update(&mut object_1320, var_1319);
        object_1320.finish();
    }
    if let Some(var_1321) = &input.profiler_rule_configurations {
        let mut array_1322 = object.key("ProfilerRuleConfigurations").start_array();
        for item_1323 in var_1321 {
            {
                let mut object_1324 = array_1322.value().start_object();
                crate::json_ser::serialize_structure_profiler_rule_configuration(
                    &mut object_1324,
                    item_1323,
                );
                object_1324.finish();
            }
        }
        array_1322.finish();
    }
}

pub fn serialize_structure_update_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialInput,
) {
    if let Some(var_1325) = &input.trial_name {
        object.key("TrialName").string(var_1325);
    }
    if let Some(var_1326) = &input.display_name {
        object.key("DisplayName").string(var_1326);
    }
}

pub fn serialize_structure_update_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialComponentInput,
) {
    if let Some(var_1327) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1327);
    }
    if let Some(var_1328) = &input.display_name {
        object.key("DisplayName").string(var_1328);
    }
    if let Some(var_1329) = &input.status {
        let mut object_1330 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_trial_component_status(&mut object_1330, var_1329);
        object_1330.finish();
    }
    if let Some(var_1331) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_1331, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1332) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_1332, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1333) = &input.parameters {
        let mut object_1334 = object.key("Parameters").start_object();
        for (key_1335, value_1336) in var_1333 {
            {
                let mut object_1337 = object_1334.key(key_1335).start_object();
                crate::json_ser::serialize_union_trial_component_parameter_value(
                    &mut object_1337,
                    value_1336,
                );
                object_1337.finish();
            }
        }
        object_1334.finish();
    }
    if let Some(var_1338) = &input.parameters_to_remove {
        let mut array_1339 = object.key("ParametersToRemove").start_array();
        for item_1340 in var_1338 {
            {
                array_1339.value().string(item_1340);
            }
        }
        array_1339.finish();
    }
    if let Some(var_1341) = &input.input_artifacts {
        let mut object_1342 = object.key("InputArtifacts").start_object();
        for (key_1343, value_1344) in var_1341 {
            {
                let mut object_1345 = object_1342.key(key_1343).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_1345,
                    value_1344,
                );
                object_1345.finish();
            }
        }
        object_1342.finish();
    }
    if let Some(var_1346) = &input.input_artifacts_to_remove {
        let mut array_1347 = object.key("InputArtifactsToRemove").start_array();
        for item_1348 in var_1346 {
            {
                array_1347.value().string(item_1348);
            }
        }
        array_1347.finish();
    }
    if let Some(var_1349) = &input.output_artifacts {
        let mut object_1350 = object.key("OutputArtifacts").start_object();
        for (key_1351, value_1352) in var_1349 {
            {
                let mut object_1353 = object_1350.key(key_1351).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_1353,
                    value_1352,
                );
                object_1353.finish();
            }
        }
        object_1350.finish();
    }
    if let Some(var_1354) = &input.output_artifacts_to_remove {
        let mut array_1355 = object.key("OutputArtifactsToRemove").start_array();
        for item_1356 in var_1354 {
            {
                array_1355.value().string(item_1356);
            }
        }
        array_1355.finish();
    }
}

pub fn serialize_structure_update_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserProfileInput,
) {
    if let Some(var_1357) = &input.domain_id {
        object.key("DomainId").string(var_1357);
    }
    if let Some(var_1358) = &input.user_profile_name {
        object.key("UserProfileName").string(var_1358);
    }
    if let Some(var_1359) = &input.user_settings {
        let mut object_1360 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_1360, var_1359);
        object_1360.finish();
    }
}

pub fn serialize_structure_update_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkforceInput,
) {
    if let Some(var_1361) = &input.workforce_name {
        object.key("WorkforceName").string(var_1361);
    }
    if let Some(var_1362) = &input.source_ip_config {
        let mut object_1363 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_source_ip_config(&mut object_1363, var_1362);
        object_1363.finish();
    }
    if let Some(var_1364) = &input.oidc_config {
        let mut object_1365 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_oidc_config(&mut object_1365, var_1364);
        object_1365.finish();
    }
}

pub fn serialize_structure_update_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkteamInput,
) {
    if let Some(var_1366) = &input.workteam_name {
        object.key("WorkteamName").string(var_1366);
    }
    if let Some(var_1367) = &input.member_definitions {
        let mut array_1368 = object.key("MemberDefinitions").start_array();
        for item_1369 in var_1367 {
            {
                let mut object_1370 = array_1368.value().start_object();
                crate::json_ser::serialize_structure_member_definition(&mut object_1370, item_1369);
                object_1370.finish();
            }
        }
        array_1368.finish();
    }
    if let Some(var_1371) = &input.description {
        object.key("Description").string(var_1371);
    }
    if let Some(var_1372) = &input.notification_configuration {
        let mut object_1373 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_notification_configuration(&mut object_1373, var_1372);
        object_1373.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_1374) = &input.key {
        object.key("Key").string(var_1374);
    }
    if let Some(var_1375) = &input.value {
        object.key("Value").string(var_1375);
    }
}

pub fn serialize_structure_action_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionSource,
) {
    if let Some(var_1376) = &input.source_uri {
        object.key("SourceUri").string(var_1376);
    }
    if let Some(var_1377) = &input.source_type {
        object.key("SourceType").string(var_1377);
    }
    if let Some(var_1378) = &input.source_id {
        object.key("SourceId").string(var_1378);
    }
}

pub fn serialize_structure_metadata_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataProperties,
) {
    if let Some(var_1379) = &input.commit_id {
        object.key("CommitId").string(var_1379);
    }
    if let Some(var_1380) = &input.repository {
        object.key("Repository").string(var_1380);
    }
    if let Some(var_1381) = &input.generated_by {
        object.key("GeneratedBy").string(var_1381);
    }
    if let Some(var_1382) = &input.project_id {
        object.key("ProjectId").string(var_1382);
    }
}

pub fn serialize_structure_training_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingSpecification,
) {
    if let Some(var_1383) = &input.training_image {
        object.key("TrainingImage").string(var_1383);
    }
    if let Some(var_1384) = &input.training_image_digest {
        object.key("TrainingImageDigest").string(var_1384);
    }
    if let Some(var_1385) = &input.supported_hyper_parameters {
        let mut array_1386 = object.key("SupportedHyperParameters").start_array();
        for item_1387 in var_1385 {
            {
                let mut object_1388 = array_1386.value().start_object();
                crate::json_ser::serialize_structure_hyper_parameter_specification(
                    &mut object_1388,
                    item_1387,
                );
                object_1388.finish();
            }
        }
        array_1386.finish();
    }
    if let Some(var_1389) = &input.supported_training_instance_types {
        let mut array_1390 = object.key("SupportedTrainingInstanceTypes").start_array();
        for item_1391 in var_1389 {
            {
                array_1390.value().string(item_1391.as_str());
            }
        }
        array_1390.finish();
    }
    if input.supports_distributed_training {
        object
            .key("SupportsDistributedTraining")
            .boolean(input.supports_distributed_training);
    }
    if let Some(var_1392) = &input.metric_definitions {
        let mut array_1393 = object.key("MetricDefinitions").start_array();
        for item_1394 in var_1392 {
            {
                let mut object_1395 = array_1393.value().start_object();
                crate::json_ser::serialize_structure_metric_definition(&mut object_1395, item_1394);
                object_1395.finish();
            }
        }
        array_1393.finish();
    }
    if let Some(var_1396) = &input.training_channels {
        let mut array_1397 = object.key("TrainingChannels").start_array();
        for item_1398 in var_1396 {
            {
                let mut object_1399 = array_1397.value().start_object();
                crate::json_ser::serialize_structure_channel_specification(
                    &mut object_1399,
                    item_1398,
                );
                object_1399.finish();
            }
        }
        array_1397.finish();
    }
    if let Some(var_1400) = &input.supported_tuning_job_objective_metrics {
        let mut array_1401 = object
            .key("SupportedTuningJobObjectiveMetrics")
            .start_array();
        for item_1402 in var_1400 {
            {
                let mut object_1403 = array_1401.value().start_object();
                crate::json_ser::serialize_structure_hyper_parameter_tuning_job_objective(
                    &mut object_1403,
                    item_1402,
                );
                object_1403.finish();
            }
        }
        array_1401.finish();
    }
}

pub fn serialize_structure_inference_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceSpecification,
) {
    if let Some(var_1404) = &input.containers {
        let mut array_1405 = object.key("Containers").start_array();
        for item_1406 in var_1404 {
            {
                let mut object_1407 = array_1405.value().start_object();
                crate::json_ser::serialize_structure_model_package_container_definition(
                    &mut object_1407,
                    item_1406,
                );
                object_1407.finish();
            }
        }
        array_1405.finish();
    }
    if let Some(var_1408) = &input.supported_transform_instance_types {
        let mut array_1409 = object.key("SupportedTransformInstanceTypes").start_array();
        for item_1410 in var_1408 {
            {
                array_1409.value().string(item_1410.as_str());
            }
        }
        array_1409.finish();
    }
    if let Some(var_1411) = &input.supported_realtime_inference_instance_types {
        let mut array_1412 = object
            .key("SupportedRealtimeInferenceInstanceTypes")
            .start_array();
        for item_1413 in var_1411 {
            {
                array_1412.value().string(item_1413.as_str());
            }
        }
        array_1412.finish();
    }
    if let Some(var_1414) = &input.supported_content_types {
        let mut array_1415 = object.key("SupportedContentTypes").start_array();
        for item_1416 in var_1414 {
            {
                array_1415.value().string(item_1416);
            }
        }
        array_1415.finish();
    }
    if let Some(var_1417) = &input.supported_response_mime_types {
        let mut array_1418 = object.key("SupportedResponseMIMETypes").start_array();
        for item_1419 in var_1417 {
            {
                array_1418.value().string(item_1419);
            }
        }
        array_1418.finish();
    }
}

pub fn serialize_structure_algorithm_validation_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationSpecification,
) {
    if let Some(var_1420) = &input.validation_role {
        object.key("ValidationRole").string(var_1420);
    }
    if let Some(var_1421) = &input.validation_profiles {
        let mut array_1422 = object.key("ValidationProfiles").start_array();
        for item_1423 in var_1421 {
            {
                let mut object_1424 = array_1422.value().start_object();
                crate::json_ser::serialize_structure_algorithm_validation_profile(
                    &mut object_1424,
                    item_1423,
                );
                object_1424.finish();
            }
        }
        array_1422.finish();
    }
}

pub fn serialize_structure_resource_spec(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceSpec,
) {
    if let Some(var_1425) = &input.sage_maker_image_arn {
        object.key("SageMakerImageArn").string(var_1425);
    }
    if let Some(var_1426) = &input.sage_maker_image_version_arn {
        object.key("SageMakerImageVersionArn").string(var_1426);
    }
    if let Some(var_1427) = &input.instance_type {
        object.key("InstanceType").string(var_1427.as_str());
    }
}

pub fn serialize_structure_kernel_gateway_image_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayImageConfig,
) {
    if let Some(var_1428) = &input.kernel_specs {
        let mut array_1429 = object.key("KernelSpecs").start_array();
        for item_1430 in var_1428 {
            {
                let mut object_1431 = array_1429.value().start_object();
                crate::json_ser::serialize_structure_kernel_spec(&mut object_1431, item_1430);
                object_1431.finish();
            }
        }
        array_1429.finish();
    }
    if let Some(var_1432) = &input.file_system_config {
        let mut object_1433 = object.key("FileSystemConfig").start_object();
        crate::json_ser::serialize_structure_file_system_config(&mut object_1433, var_1432);
        object_1433.finish();
    }
}

pub fn serialize_structure_artifact_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSource,
) {
    if let Some(var_1434) = &input.source_uri {
        object.key("SourceUri").string(var_1434);
    }
    if let Some(var_1435) = &input.source_types {
        let mut array_1436 = object.key("SourceTypes").start_array();
        for item_1437 in var_1435 {
            {
                let mut object_1438 = array_1436.value().start_object();
                crate::json_ser::serialize_structure_artifact_source_type(
                    &mut object_1438,
                    item_1437,
                );
                object_1438.finish();
            }
        }
        array_1436.finish();
    }
}

pub fn serialize_structure_auto_ml_channel(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlChannel,
) {
    if let Some(var_1439) = &input.data_source {
        let mut object_1440 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_auto_ml_data_source(&mut object_1440, var_1439);
        object_1440.finish();
    }
    if let Some(var_1441) = &input.compression_type {
        object.key("CompressionType").string(var_1441.as_str());
    }
    if let Some(var_1442) = &input.target_attribute_name {
        object.key("TargetAttributeName").string(var_1442);
    }
}

pub fn serialize_structure_auto_ml_output_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlOutputDataConfig,
) {
    if let Some(var_1443) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1443);
    }
    if let Some(var_1444) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1444);
    }
}

pub fn serialize_structure_auto_ml_job_objective(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobObjective,
) {
    if let Some(var_1445) = &input.metric_name {
        object.key("MetricName").string(var_1445.as_str());
    }
}

pub fn serialize_structure_auto_ml_job_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobConfig,
) {
    if let Some(var_1446) = &input.completion_criteria {
        let mut object_1447 = object.key("CompletionCriteria").start_object();
        crate::json_ser::serialize_structure_auto_ml_job_completion_criteria(
            &mut object_1447,
            var_1446,
        );
        object_1447.finish();
    }
    if let Some(var_1448) = &input.security_config {
        let mut object_1449 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_auto_ml_security_config(&mut object_1449, var_1448);
        object_1449.finish();
    }
}

pub fn serialize_structure_model_deploy_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDeployConfig,
) {
    if input.auto_generate_endpoint_name {
        object
            .key("AutoGenerateEndpointName")
            .boolean(input.auto_generate_endpoint_name);
    }
    if let Some(var_1450) = &input.endpoint_name {
        object.key("EndpointName").string(var_1450);
    }
}

pub fn serialize_structure_git_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfig,
) {
    if let Some(var_1451) = &input.repository_url {
        object.key("RepositoryUrl").string(var_1451);
    }
    if let Some(var_1452) = &input.branch {
        object.key("Branch").string(var_1452);
    }
    if let Some(var_1453) = &input.secret_arn {
        object.key("SecretArn").string(var_1453);
    }
}

pub fn serialize_structure_input_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputConfig,
) {
    if let Some(var_1454) = &input.s3_uri {
        object.key("S3Uri").string(var_1454);
    }
    if let Some(var_1455) = &input.data_input_config {
        object.key("DataInputConfig").string(var_1455);
    }
    if let Some(var_1456) = &input.framework {
        object.key("Framework").string(var_1456.as_str());
    }
    if let Some(var_1457) = &input.framework_version {
        object.key("FrameworkVersion").string(var_1457);
    }
}

pub fn serialize_structure_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputConfig,
) {
    if let Some(var_1458) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1458);
    }
    if let Some(var_1459) = &input.target_device {
        object.key("TargetDevice").string(var_1459.as_str());
    }
    if let Some(var_1460) = &input.target_platform {
        let mut object_1461 = object.key("TargetPlatform").start_object();
        crate::json_ser::serialize_structure_target_platform(&mut object_1461, var_1460);
        object_1461.finish();
    }
    if let Some(var_1462) = &input.compiler_options {
        object.key("CompilerOptions").string(var_1462);
    }
    if let Some(var_1463) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1463);
    }
}

pub fn serialize_structure_neo_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NeoVpcConfig,
) {
    if let Some(var_1464) = &input.security_group_ids {
        let mut array_1465 = object.key("SecurityGroupIds").start_array();
        for item_1466 in var_1464 {
            {
                array_1465.value().string(item_1466);
            }
        }
        array_1465.finish();
    }
    if let Some(var_1467) = &input.subnets {
        let mut array_1468 = object.key("Subnets").start_array();
        for item_1469 in var_1467 {
            {
                array_1468.value().string(item_1469);
            }
        }
        array_1468.finish();
    }
}

pub fn serialize_structure_stopping_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StoppingCondition,
) {
    if input.max_runtime_in_seconds != 0 {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
    if let Some(var_1470) = &input.max_wait_time_in_seconds {
        object.key("MaxWaitTimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1470).into()),
        );
    }
}

pub fn serialize_structure_context_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContextSource,
) {
    if let Some(var_1471) = &input.source_uri {
        object.key("SourceUri").string(var_1471);
    }
    if let Some(var_1472) = &input.source_type {
        object.key("SourceType").string(var_1472);
    }
    if let Some(var_1473) = &input.source_id {
        object.key("SourceId").string(var_1473);
    }
}

pub fn serialize_structure_data_quality_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityBaselineConfig,
) {
    if let Some(var_1474) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1474);
    }
    if let Some(var_1475) = &input.constraints_resource {
        let mut object_1476 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1476,
            var_1475,
        );
        object_1476.finish();
    }
    if let Some(var_1477) = &input.statistics_resource {
        let mut object_1478 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_statistics_resource(
            &mut object_1478,
            var_1477,
        );
        object_1478.finish();
    }
}

pub fn serialize_structure_data_quality_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityAppSpecification,
) {
    if let Some(var_1479) = &input.image_uri {
        object.key("ImageUri").string(var_1479);
    }
    if let Some(var_1480) = &input.container_entrypoint {
        let mut array_1481 = object.key("ContainerEntrypoint").start_array();
        for item_1482 in var_1480 {
            {
                array_1481.value().string(item_1482);
            }
        }
        array_1481.finish();
    }
    if let Some(var_1483) = &input.container_arguments {
        let mut array_1484 = object.key("ContainerArguments").start_array();
        for item_1485 in var_1483 {
            {
                array_1484.value().string(item_1485);
            }
        }
        array_1484.finish();
    }
    if let Some(var_1486) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_1486);
    }
    if let Some(var_1487) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1487);
    }
    if let Some(var_1488) = &input.environment {
        let mut object_1489 = object.key("Environment").start_object();
        for (key_1490, value_1491) in var_1488 {
            {
                object_1489.key(key_1490).string(value_1491);
            }
        }
        object_1489.finish();
    }
}

pub fn serialize_structure_data_quality_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityJobInput,
) {
    if let Some(var_1492) = &input.endpoint_input {
        let mut object_1493 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1493, var_1492);
        object_1493.finish();
    }
}

pub fn serialize_structure_monitoring_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutputConfig,
) {
    if let Some(var_1494) = &input.monitoring_outputs {
        let mut array_1495 = object.key("MonitoringOutputs").start_array();
        for item_1496 in var_1494 {
            {
                let mut object_1497 = array_1495.value().start_object();
                crate::json_ser::serialize_structure_monitoring_output(&mut object_1497, item_1496);
                object_1497.finish();
            }
        }
        array_1495.finish();
    }
    if let Some(var_1498) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1498);
    }
}

pub fn serialize_structure_monitoring_resources(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringResources,
) {
    if let Some(var_1499) = &input.cluster_config {
        let mut object_1500 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_cluster_config(&mut object_1500, var_1499);
        object_1500.finish();
    }
}

pub fn serialize_structure_monitoring_network_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringNetworkConfig,
) {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_1501) = &input.vpc_config {
        let mut object_1502 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1502, var_1501);
        object_1502.finish();
    }
}

pub fn serialize_structure_monitoring_stopping_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStoppingCondition,
) {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
}

pub fn serialize_structure_edge_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EdgeOutputConfig,
) {
    if let Some(var_1503) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1503);
    }
    if let Some(var_1504) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1504);
    }
    if let Some(var_1505) = &input.preset_deployment_type {
        object.key("PresetDeploymentType").string(var_1505.as_str());
    }
    if let Some(var_1506) = &input.preset_deployment_config {
        object.key("PresetDeploymentConfig").string(var_1506);
    }
}

pub fn serialize_structure_user_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSettings,
) {
    if let Some(var_1507) = &input.execution_role {
        object.key("ExecutionRole").string(var_1507);
    }
    if let Some(var_1508) = &input.security_groups {
        let mut array_1509 = object.key("SecurityGroups").start_array();
        for item_1510 in var_1508 {
            {
                array_1509.value().string(item_1510);
            }
        }
        array_1509.finish();
    }
    if let Some(var_1511) = &input.sharing_settings {
        let mut object_1512 = object.key("SharingSettings").start_object();
        crate::json_ser::serialize_structure_sharing_settings(&mut object_1512, var_1511);
        object_1512.finish();
    }
    if let Some(var_1513) = &input.jupyter_server_app_settings {
        let mut object_1514 = object.key("JupyterServerAppSettings").start_object();
        crate::json_ser::serialize_structure_jupyter_server_app_settings(
            &mut object_1514,
            var_1513,
        );
        object_1514.finish();
    }
    if let Some(var_1515) = &input.kernel_gateway_app_settings {
        let mut object_1516 = object.key("KernelGatewayAppSettings").start_object();
        crate::json_ser::serialize_structure_kernel_gateway_app_settings(
            &mut object_1516,
            var_1515,
        );
        object_1516.finish();
    }
    if let Some(var_1517) = &input.tensor_board_app_settings {
        let mut object_1518 = object.key("TensorBoardAppSettings").start_object();
        crate::json_ser::serialize_structure_tensor_board_app_settings(&mut object_1518, var_1517);
        object_1518.finish();
    }
}

pub fn serialize_structure_production_variant(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariant,
) {
    if let Some(var_1519) = &input.variant_name {
        object.key("VariantName").string(var_1519);
    }
    if let Some(var_1520) = &input.model_name {
        object.key("ModelName").string(var_1520);
    }
    if let Some(var_1521) = &input.initial_instance_count {
        object.key("InitialInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1521).into()),
        );
    }
    if let Some(var_1522) = &input.instance_type {
        object.key("InstanceType").string(var_1522.as_str());
    }
    if let Some(var_1523) = &input.initial_variant_weight {
        object.key("InitialVariantWeight").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1523).into()),
        );
    }
    if let Some(var_1524) = &input.accelerator_type {
        object.key("AcceleratorType").string(var_1524.as_str());
    }
    if let Some(var_1525) = &input.core_dump_config {
        let mut object_1526 = object.key("CoreDumpConfig").start_object();
        crate::json_ser::serialize_structure_production_variant_core_dump_config(
            &mut object_1526,
            var_1525,
        );
        object_1526.finish();
    }
}

pub fn serialize_structure_data_capture_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCaptureConfig,
) {
    if input.enable_capture {
        object.key("EnableCapture").boolean(input.enable_capture);
    }
    if let Some(var_1527) = &input.initial_sampling_percentage {
        object.key("InitialSamplingPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1527).into()),
        );
    }
    if let Some(var_1528) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_1528);
    }
    if let Some(var_1529) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1529);
    }
    if let Some(var_1530) = &input.capture_options {
        let mut array_1531 = object.key("CaptureOptions").start_array();
        for item_1532 in var_1530 {
            {
                let mut object_1533 = array_1531.value().start_object();
                crate::json_ser::serialize_structure_capture_option(&mut object_1533, item_1532);
                object_1533.finish();
            }
        }
        array_1531.finish();
    }
    if let Some(var_1534) = &input.capture_content_type_header {
        let mut object_1535 = object.key("CaptureContentTypeHeader").start_object();
        crate::json_ser::serialize_structure_capture_content_type_header(
            &mut object_1535,
            var_1534,
        );
        object_1535.finish();
    }
}

pub fn serialize_structure_async_inference_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceConfig,
) {
    if let Some(var_1536) = &input.client_config {
        let mut object_1537 = object.key("ClientConfig").start_object();
        crate::json_ser::serialize_structure_async_inference_client_config(
            &mut object_1537,
            var_1536,
        );
        object_1537.finish();
    }
    if let Some(var_1538) = &input.output_config {
        let mut object_1539 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_async_inference_output_config(
            &mut object_1539,
            var_1538,
        );
        object_1539.finish();
    }
}

pub fn serialize_structure_feature_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FeatureDefinition,
) {
    if let Some(var_1540) = &input.feature_name {
        object.key("FeatureName").string(var_1540);
    }
    if let Some(var_1541) = &input.feature_type {
        object.key("FeatureType").string(var_1541.as_str());
    }
}

pub fn serialize_structure_online_store_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreConfig,
) {
    if let Some(var_1542) = &input.security_config {
        let mut object_1543 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_online_store_security_config(
            &mut object_1543,
            var_1542,
        );
        object_1543.finish();
    }
    if input.enable_online_store {
        object
            .key("EnableOnlineStore")
            .boolean(input.enable_online_store);
    }
}

pub fn serialize_structure_offline_store_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OfflineStoreConfig,
) {
    if let Some(var_1544) = &input.s3_storage_config {
        let mut object_1545 = object.key("S3StorageConfig").start_object();
        crate::json_ser::serialize_structure_s3_storage_config(&mut object_1545, var_1544);
        object_1545.finish();
    }
    if input.disable_glue_table_creation {
        object
            .key("DisableGlueTableCreation")
            .boolean(input.disable_glue_table_creation);
    }
    if let Some(var_1546) = &input.data_catalog_config {
        let mut object_1547 = object.key("DataCatalogConfig").start_object();
        crate::json_ser::serialize_structure_data_catalog_config(&mut object_1547, var_1546);
        object_1547.finish();
    }
}

pub fn serialize_structure_human_loop_request_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopRequestSource,
) {
    if let Some(var_1548) = &input.aws_managed_human_loop_request_source {
        object
            .key("AwsManagedHumanLoopRequestSource")
            .string(var_1548.as_str());
    }
}

pub fn serialize_structure_human_loop_activation_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConfig,
) {
    if let Some(var_1549) = &input.human_loop_activation_conditions_config {
        let mut object_1550 = object
            .key("HumanLoopActivationConditionsConfig")
            .start_object();
        crate::json_ser::serialize_structure_human_loop_activation_conditions_config(
            &mut object_1550,
            var_1549,
        );
        object_1550.finish();
    }
}

pub fn serialize_structure_human_loop_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopConfig,
) {
    if let Some(var_1551) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1551);
    }
    if let Some(var_1552) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1552);
    }
    if let Some(var_1553) = &input.task_title {
        object.key("TaskTitle").string(var_1553);
    }
    if let Some(var_1554) = &input.task_description {
        object.key("TaskDescription").string(var_1554);
    }
    if let Some(var_1555) = &input.task_count {
        object.key("TaskCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1555).into()),
        );
    }
    if let Some(var_1556) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1556).into()),
        );
    }
    if let Some(var_1557) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1557).into()),
        );
    }
    if let Some(var_1558) = &input.task_keywords {
        let mut array_1559 = object.key("TaskKeywords").start_array();
        for item_1560 in var_1558 {
            {
                array_1559.value().string(item_1560);
            }
        }
        array_1559.finish();
    }
    if let Some(var_1561) = &input.public_workforce_task_price {
        let mut object_1562 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_public_workforce_task_price(
            &mut object_1562,
            var_1561,
        );
        object_1562.finish();
    }
}

pub fn serialize_structure_flow_definition_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FlowDefinitionOutputConfig,
) {
    if let Some(var_1563) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1563);
    }
    if let Some(var_1564) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1564);
    }
}

pub fn serialize_structure_ui_template(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiTemplate,
) {
    if let Some(var_1565) = &input.content {
        object.key("Content").string(var_1565);
    }
}

pub fn serialize_structure_hyper_parameter_tuning_job_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobConfig,
) {
    if let Some(var_1566) = &input.strategy {
        object.key("Strategy").string(var_1566.as_str());
    }
    if let Some(var_1567) = &input.hyper_parameter_tuning_job_objective {
        let mut object_1568 = object
            .key("HyperParameterTuningJobObjective")
            .start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_objective(
            &mut object_1568,
            var_1567,
        );
        object_1568.finish();
    }
    if let Some(var_1569) = &input.resource_limits {
        let mut object_1570 = object.key("ResourceLimits").start_object();
        crate::json_ser::serialize_structure_resource_limits(&mut object_1570, var_1569);
        object_1570.finish();
    }
    if let Some(var_1571) = &input.parameter_ranges {
        let mut object_1572 = object.key("ParameterRanges").start_object();
        crate::json_ser::serialize_structure_parameter_ranges(&mut object_1572, var_1571);
        object_1572.finish();
    }
    if let Some(var_1573) = &input.training_job_early_stopping_type {
        object
            .key("TrainingJobEarlyStoppingType")
            .string(var_1573.as_str());
    }
    if let Some(var_1574) = &input.tuning_job_completion_criteria {
        let mut object_1575 = object.key("TuningJobCompletionCriteria").start_object();
        crate::json_ser::serialize_structure_tuning_job_completion_criteria(
            &mut object_1575,
            var_1574,
        );
        object_1575.finish();
    }
}

pub fn serialize_structure_hyper_parameter_training_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTrainingJobDefinition,
) {
    if let Some(var_1576) = &input.definition_name {
        object.key("DefinitionName").string(var_1576);
    }
    if let Some(var_1577) = &input.tuning_objective {
        let mut object_1578 = object.key("TuningObjective").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_objective(
            &mut object_1578,
            var_1577,
        );
        object_1578.finish();
    }
    if let Some(var_1579) = &input.hyper_parameter_ranges {
        let mut object_1580 = object.key("HyperParameterRanges").start_object();
        crate::json_ser::serialize_structure_parameter_ranges(&mut object_1580, var_1579);
        object_1580.finish();
    }
    if let Some(var_1581) = &input.static_hyper_parameters {
        let mut object_1582 = object.key("StaticHyperParameters").start_object();
        for (key_1583, value_1584) in var_1581 {
            {
                object_1582.key(key_1583).string(value_1584);
            }
        }
        object_1582.finish();
    }
    if let Some(var_1585) = &input.algorithm_specification {
        let mut object_1586 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_algorithm_specification(
            &mut object_1586,
            var_1585,
        );
        object_1586.finish();
    }
    if let Some(var_1587) = &input.role_arn {
        object.key("RoleArn").string(var_1587);
    }
    if let Some(var_1588) = &input.input_data_config {
        let mut array_1589 = object.key("InputDataConfig").start_array();
        for item_1590 in var_1588 {
            {
                let mut object_1591 = array_1589.value().start_object();
                crate::json_ser::serialize_structure_channel(&mut object_1591, item_1590);
                object_1591.finish();
            }
        }
        array_1589.finish();
    }
    if let Some(var_1592) = &input.vpc_config {
        let mut object_1593 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1593, var_1592);
        object_1593.finish();
    }
    if let Some(var_1594) = &input.output_data_config {
        let mut object_1595 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_1595, var_1594);
        object_1595.finish();
    }
    if let Some(var_1596) = &input.resource_config {
        let mut object_1597 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_resource_config(&mut object_1597, var_1596);
        object_1597.finish();
    }
    if let Some(var_1598) = &input.stopping_condition {
        let mut object_1599 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_1599, var_1598);
        object_1599.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_1600) = &input.checkpoint_config {
        let mut object_1601 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_checkpoint_config(&mut object_1601, var_1600);
        object_1601.finish();
    }
    if let Some(var_1602) = &input.retry_strategy {
        let mut object_1603 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_retry_strategy(&mut object_1603, var_1602);
        object_1603.finish();
    }
}

pub fn serialize_structure_hyper_parameter_tuning_job_warm_start_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobWarmStartConfig,
) {
    if let Some(var_1604) = &input.parent_hyper_parameter_tuning_jobs {
        let mut array_1605 = object.key("ParentHyperParameterTuningJobs").start_array();
        for item_1606 in var_1604 {
            {
                let mut object_1607 = array_1605.value().start_object();
                crate::json_ser::serialize_structure_parent_hyper_parameter_tuning_job(
                    &mut object_1607,
                    item_1606,
                );
                object_1607.finish();
            }
        }
        array_1605.finish();
    }
    if let Some(var_1608) = &input.warm_start_type {
        object.key("WarmStartType").string(var_1608.as_str());
    }
}

pub fn serialize_structure_labeling_job_input_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobInputConfig,
) {
    if let Some(var_1609) = &input.data_source {
        let mut object_1610 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_labeling_job_data_source(&mut object_1610, var_1609);
        object_1610.finish();
    }
    if let Some(var_1611) = &input.data_attributes {
        let mut object_1612 = object.key("DataAttributes").start_object();
        crate::json_ser::serialize_structure_labeling_job_data_attributes(
            &mut object_1612,
            var_1611,
        );
        object_1612.finish();
    }
}

pub fn serialize_structure_labeling_job_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobOutputConfig,
) {
    if let Some(var_1613) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1613);
    }
    if let Some(var_1614) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1614);
    }
    if let Some(var_1615) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1615);
    }
}

pub fn serialize_structure_labeling_job_stopping_conditions(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobStoppingConditions,
) {
    if let Some(var_1616) = &input.max_human_labeled_object_count {
        object.key("MaxHumanLabeledObjectCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1616).into()),
        );
    }
    if let Some(var_1617) = &input.max_percentage_of_input_dataset_labeled {
        object.key("MaxPercentageOfInputDatasetLabeled").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1617).into()),
        );
    }
}

pub fn serialize_structure_labeling_job_algorithms_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobAlgorithmsConfig,
) {
    if let Some(var_1618) = &input.labeling_job_algorithm_specification_arn {
        object
            .key("LabelingJobAlgorithmSpecificationArn")
            .string(var_1618);
    }
    if let Some(var_1619) = &input.initial_active_learning_model_arn {
        object.key("InitialActiveLearningModelArn").string(var_1619);
    }
    if let Some(var_1620) = &input.labeling_job_resource_config {
        let mut object_1621 = object.key("LabelingJobResourceConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_resource_config(
            &mut object_1621,
            var_1620,
        );
        object_1621.finish();
    }
}

pub fn serialize_structure_human_task_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanTaskConfig,
) {
    if let Some(var_1622) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1622);
    }
    if let Some(var_1623) = &input.ui_config {
        let mut object_1624 = object.key("UiConfig").start_object();
        crate::json_ser::serialize_structure_ui_config(&mut object_1624, var_1623);
        object_1624.finish();
    }
    if let Some(var_1625) = &input.pre_human_task_lambda_arn {
        object.key("PreHumanTaskLambdaArn").string(var_1625);
    }
    if let Some(var_1626) = &input.task_keywords {
        let mut array_1627 = object.key("TaskKeywords").start_array();
        for item_1628 in var_1626 {
            {
                array_1627.value().string(item_1628);
            }
        }
        array_1627.finish();
    }
    if let Some(var_1629) = &input.task_title {
        object.key("TaskTitle").string(var_1629);
    }
    if let Some(var_1630) = &input.task_description {
        object.key("TaskDescription").string(var_1630);
    }
    if let Some(var_1631) = &input.number_of_human_workers_per_data_object {
        object.key("NumberOfHumanWorkersPerDataObject").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1631).into()),
        );
    }
    if let Some(var_1632) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1632).into()),
        );
    }
    if let Some(var_1633) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1633).into()),
        );
    }
    if let Some(var_1634) = &input.max_concurrent_task_count {
        object.key("MaxConcurrentTaskCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1634).into()),
        );
    }
    if let Some(var_1635) = &input.annotation_consolidation_config {
        let mut object_1636 = object.key("AnnotationConsolidationConfig").start_object();
        crate::json_ser::serialize_structure_annotation_consolidation_config(
            &mut object_1636,
            var_1635,
        );
        object_1636.finish();
    }
    if let Some(var_1637) = &input.public_workforce_task_price {
        let mut object_1638 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_public_workforce_task_price(
            &mut object_1638,
            var_1637,
        );
        object_1638.finish();
    }
}

pub fn serialize_structure_container_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDefinition,
) {
    if let Some(var_1639) = &input.container_hostname {
        object.key("ContainerHostname").string(var_1639);
    }
    if let Some(var_1640) = &input.image {
        object.key("Image").string(var_1640);
    }
    if let Some(var_1641) = &input.image_config {
        let mut object_1642 = object.key("ImageConfig").start_object();
        crate::json_ser::serialize_structure_image_config(&mut object_1642, var_1641);
        object_1642.finish();
    }
    if let Some(var_1643) = &input.mode {
        object.key("Mode").string(var_1643.as_str());
    }
    if let Some(var_1644) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_1644);
    }
    if let Some(var_1645) = &input.environment {
        let mut object_1646 = object.key("Environment").start_object();
        for (key_1647, value_1648) in var_1645 {
            {
                object_1646.key(key_1647).string(value_1648);
            }
        }
        object_1646.finish();
    }
    if let Some(var_1649) = &input.model_package_name {
        object.key("ModelPackageName").string(var_1649);
    }
    if let Some(var_1650) = &input.multi_model_config {
        let mut object_1651 = object.key("MultiModelConfig").start_object();
        crate::json_ser::serialize_structure_multi_model_config(&mut object_1651, var_1650);
        object_1651.finish();
    }
}

pub fn serialize_structure_inference_execution_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceExecutionConfig,
) {
    if let Some(var_1652) = &input.mode {
        object.key("Mode").string(var_1652.as_str());
    }
}

pub fn serialize_structure_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) {
    if let Some(var_1653) = &input.security_group_ids {
        let mut array_1654 = object.key("SecurityGroupIds").start_array();
        for item_1655 in var_1653 {
            {
                array_1654.value().string(item_1655);
            }
        }
        array_1654.finish();
    }
    if let Some(var_1656) = &input.subnets {
        let mut array_1657 = object.key("Subnets").start_array();
        for item_1658 in var_1656 {
            {
                array_1657.value().string(item_1658);
            }
        }
        array_1657.finish();
    }
}

pub fn serialize_structure_model_bias_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasBaselineConfig,
) {
    if let Some(var_1659) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1659);
    }
    if let Some(var_1660) = &input.constraints_resource {
        let mut object_1661 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1661,
            var_1660,
        );
        object_1661.finish();
    }
}

pub fn serialize_structure_model_bias_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasAppSpecification,
) {
    if let Some(var_1662) = &input.image_uri {
        object.key("ImageUri").string(var_1662);
    }
    if let Some(var_1663) = &input.config_uri {
        object.key("ConfigUri").string(var_1663);
    }
    if let Some(var_1664) = &input.environment {
        let mut object_1665 = object.key("Environment").start_object();
        for (key_1666, value_1667) in var_1664 {
            {
                object_1665.key(key_1666).string(value_1667);
            }
        }
        object_1665.finish();
    }
}

pub fn serialize_structure_model_bias_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasJobInput,
) {
    if let Some(var_1668) = &input.endpoint_input {
        let mut object_1669 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1669, var_1668);
        object_1669.finish();
    }
    if let Some(var_1670) = &input.ground_truth_s3_input {
        let mut object_1671 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_monitoring_ground_truth_s3_input(
            &mut object_1671,
            var_1670,
        );
        object_1671.finish();
    }
}

pub fn serialize_structure_model_explainability_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityBaselineConfig,
) {
    if let Some(var_1672) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1672);
    }
    if let Some(var_1673) = &input.constraints_resource {
        let mut object_1674 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1674,
            var_1673,
        );
        object_1674.finish();
    }
}

pub fn serialize_structure_model_explainability_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityAppSpecification,
) {
    if let Some(var_1675) = &input.image_uri {
        object.key("ImageUri").string(var_1675);
    }
    if let Some(var_1676) = &input.config_uri {
        object.key("ConfigUri").string(var_1676);
    }
    if let Some(var_1677) = &input.environment {
        let mut object_1678 = object.key("Environment").start_object();
        for (key_1679, value_1680) in var_1677 {
            {
                object_1678.key(key_1679).string(value_1680);
            }
        }
        object_1678.finish();
    }
}

pub fn serialize_structure_model_explainability_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityJobInput,
) {
    if let Some(var_1681) = &input.endpoint_input {
        let mut object_1682 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1682, var_1681);
        object_1682.finish();
    }
}

pub fn serialize_structure_model_package_validation_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationSpecification,
) {
    if let Some(var_1683) = &input.validation_role {
        object.key("ValidationRole").string(var_1683);
    }
    if let Some(var_1684) = &input.validation_profiles {
        let mut array_1685 = object.key("ValidationProfiles").start_array();
        for item_1686 in var_1684 {
            {
                let mut object_1687 = array_1685.value().start_object();
                crate::json_ser::serialize_structure_model_package_validation_profile(
                    &mut object_1687,
                    item_1686,
                );
                object_1687.finish();
            }
        }
        array_1685.finish();
    }
}

pub fn serialize_structure_source_algorithm_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithmSpecification,
) {
    if let Some(var_1688) = &input.source_algorithms {
        let mut array_1689 = object.key("SourceAlgorithms").start_array();
        for item_1690 in var_1688 {
            {
                let mut object_1691 = array_1689.value().start_object();
                crate::json_ser::serialize_structure_source_algorithm(&mut object_1691, item_1690);
                object_1691.finish();
            }
        }
        array_1689.finish();
    }
}

pub fn serialize_structure_model_metrics(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelMetrics,
) {
    if let Some(var_1692) = &input.model_quality {
        let mut object_1693 = object.key("ModelQuality").start_object();
        crate::json_ser::serialize_structure_model_quality(&mut object_1693, var_1692);
        object_1693.finish();
    }
    if let Some(var_1694) = &input.model_data_quality {
        let mut object_1695 = object.key("ModelDataQuality").start_object();
        crate::json_ser::serialize_structure_model_data_quality(&mut object_1695, var_1694);
        object_1695.finish();
    }
    if let Some(var_1696) = &input.bias {
        let mut object_1697 = object.key("Bias").start_object();
        crate::json_ser::serialize_structure_bias(&mut object_1697, var_1696);
        object_1697.finish();
    }
    if let Some(var_1698) = &input.explainability {
        let mut object_1699 = object.key("Explainability").start_object();
        crate::json_ser::serialize_structure_explainability(&mut object_1699, var_1698);
        object_1699.finish();
    }
}

pub fn serialize_structure_model_quality_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityBaselineConfig,
) {
    if let Some(var_1700) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1700);
    }
    if let Some(var_1701) = &input.constraints_resource {
        let mut object_1702 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1702,
            var_1701,
        );
        object_1702.finish();
    }
}

pub fn serialize_structure_model_quality_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityAppSpecification,
) {
    if let Some(var_1703) = &input.image_uri {
        object.key("ImageUri").string(var_1703);
    }
    if let Some(var_1704) = &input.container_entrypoint {
        let mut array_1705 = object.key("ContainerEntrypoint").start_array();
        for item_1706 in var_1704 {
            {
                array_1705.value().string(item_1706);
            }
        }
        array_1705.finish();
    }
    if let Some(var_1707) = &input.container_arguments {
        let mut array_1708 = object.key("ContainerArguments").start_array();
        for item_1709 in var_1707 {
            {
                array_1708.value().string(item_1709);
            }
        }
        array_1708.finish();
    }
    if let Some(var_1710) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_1710);
    }
    if let Some(var_1711) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1711);
    }
    if let Some(var_1712) = &input.problem_type {
        object.key("ProblemType").string(var_1712.as_str());
    }
    if let Some(var_1713) = &input.environment {
        let mut object_1714 = object.key("Environment").start_object();
        for (key_1715, value_1716) in var_1713 {
            {
                object_1714.key(key_1715).string(value_1716);
            }
        }
        object_1714.finish();
    }
}

pub fn serialize_structure_model_quality_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityJobInput,
) {
    if let Some(var_1717) = &input.endpoint_input {
        let mut object_1718 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1718, var_1717);
        object_1718.finish();
    }
    if let Some(var_1719) = &input.ground_truth_s3_input {
        let mut object_1720 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_monitoring_ground_truth_s3_input(
            &mut object_1720,
            var_1719,
        );
        object_1720.finish();
    }
}

pub fn serialize_structure_monitoring_schedule_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringScheduleConfig,
) {
    if let Some(var_1721) = &input.schedule_config {
        let mut object_1722 = object.key("ScheduleConfig").start_object();
        crate::json_ser::serialize_structure_schedule_config(&mut object_1722, var_1721);
        object_1722.finish();
    }
    if let Some(var_1723) = &input.monitoring_job_definition {
        let mut object_1724 = object.key("MonitoringJobDefinition").start_object();
        crate::json_ser::serialize_structure_monitoring_job_definition(&mut object_1724, var_1723);
        object_1724.finish();
    }
    if let Some(var_1725) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1725);
    }
    if let Some(var_1726) = &input.monitoring_type {
        object.key("MonitoringType").string(var_1726.as_str());
    }
}

pub fn serialize_structure_notebook_instance_lifecycle_hook(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotebookInstanceLifecycleHook,
) {
    if let Some(var_1727) = &input.content {
        object.key("Content").string(var_1727);
    }
}

pub fn serialize_structure_processing_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingInput,
) {
    if let Some(var_1728) = &input.input_name {
        object.key("InputName").string(var_1728);
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
    if let Some(var_1729) = &input.s3_input {
        let mut object_1730 = object.key("S3Input").start_object();
        crate::json_ser::serialize_structure_processing_s3_input(&mut object_1730, var_1729);
        object_1730.finish();
    }
    if let Some(var_1731) = &input.dataset_definition {
        let mut object_1732 = object.key("DatasetDefinition").start_object();
        crate::json_ser::serialize_structure_dataset_definition(&mut object_1732, var_1731);
        object_1732.finish();
    }
}

pub fn serialize_structure_processing_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutputConfig,
) {
    if let Some(var_1733) = &input.outputs {
        let mut array_1734 = object.key("Outputs").start_array();
        for item_1735 in var_1733 {
            {
                let mut object_1736 = array_1734.value().start_object();
                crate::json_ser::serialize_structure_processing_output(&mut object_1736, item_1735);
                object_1736.finish();
            }
        }
        array_1734.finish();
    }
    if let Some(var_1737) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1737);
    }
}

pub fn serialize_structure_processing_resources(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingResources,
) {
    if let Some(var_1738) = &input.cluster_config {
        let mut object_1739 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_processing_cluster_config(&mut object_1739, var_1738);
        object_1739.finish();
    }
}

pub fn serialize_structure_processing_stopping_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingStoppingCondition,
) {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
}

pub fn serialize_structure_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppSpecification,
) {
    if let Some(var_1740) = &input.image_uri {
        object.key("ImageUri").string(var_1740);
    }
    if let Some(var_1741) = &input.container_entrypoint {
        let mut array_1742 = object.key("ContainerEntrypoint").start_array();
        for item_1743 in var_1741 {
            {
                array_1742.value().string(item_1743);
            }
        }
        array_1742.finish();
    }
    if let Some(var_1744) = &input.container_arguments {
        let mut array_1745 = object.key("ContainerArguments").start_array();
        for item_1746 in var_1744 {
            {
                array_1745.value().string(item_1746);
            }
        }
        array_1745.finish();
    }
}

pub fn serialize_structure_network_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConfig,
) {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_1747) = &input.vpc_config {
        let mut object_1748 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1748, var_1747);
        object_1748.finish();
    }
}

pub fn serialize_structure_experiment_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExperimentConfig,
) {
    if let Some(var_1749) = &input.experiment_name {
        object.key("ExperimentName").string(var_1749);
    }
    if let Some(var_1750) = &input.trial_name {
        object.key("TrialName").string(var_1750);
    }
    if let Some(var_1751) = &input.trial_component_display_name {
        object.key("TrialComponentDisplayName").string(var_1751);
    }
}

pub fn serialize_structure_service_catalog_provisioning_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceCatalogProvisioningDetails,
) {
    if let Some(var_1752) = &input.product_id {
        object.key("ProductId").string(var_1752);
    }
    if let Some(var_1753) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_1753);
    }
    if let Some(var_1754) = &input.path_id {
        object.key("PathId").string(var_1754);
    }
    if let Some(var_1755) = &input.provisioning_parameters {
        let mut array_1756 = object.key("ProvisioningParameters").start_array();
        for item_1757 in var_1755 {
            {
                let mut object_1758 = array_1756.value().start_object();
                crate::json_ser::serialize_structure_provisioning_parameter(
                    &mut object_1758,
                    item_1757,
                );
                object_1758.finish();
            }
        }
        array_1756.finish();
    }
}

pub fn serialize_structure_algorithm_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmSpecification,
) {
    if let Some(var_1759) = &input.training_image {
        object.key("TrainingImage").string(var_1759);
    }
    if let Some(var_1760) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_1760);
    }
    if let Some(var_1761) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_1761.as_str());
    }
    if let Some(var_1762) = &input.metric_definitions {
        let mut array_1763 = object.key("MetricDefinitions").start_array();
        for item_1764 in var_1762 {
            {
                let mut object_1765 = array_1763.value().start_object();
                crate::json_ser::serialize_structure_metric_definition(&mut object_1765, item_1764);
                object_1765.finish();
            }
        }
        array_1763.finish();
    }
    if input.enable_sage_maker_metrics_time_series {
        object
            .key("EnableSageMakerMetricsTimeSeries")
            .boolean(input.enable_sage_maker_metrics_time_series);
    }
}

pub fn serialize_structure_channel(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Channel,
) {
    if let Some(var_1766) = &input.channel_name {
        object.key("ChannelName").string(var_1766);
    }
    if let Some(var_1767) = &input.data_source {
        let mut object_1768 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_data_source(&mut object_1768, var_1767);
        object_1768.finish();
    }
    if let Some(var_1769) = &input.content_type {
        object.key("ContentType").string(var_1769);
    }
    if let Some(var_1770) = &input.compression_type {
        object.key("CompressionType").string(var_1770.as_str());
    }
    if let Some(var_1771) = &input.record_wrapper_type {
        object.key("RecordWrapperType").string(var_1771.as_str());
    }
    if let Some(var_1772) = &input.input_mode {
        object.key("InputMode").string(var_1772.as_str());
    }
    if let Some(var_1773) = &input.shuffle_config {
        let mut object_1774 = object.key("ShuffleConfig").start_object();
        crate::json_ser::serialize_structure_shuffle_config(&mut object_1774, var_1773);
        object_1774.finish();
    }
}

pub fn serialize_structure_output_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputDataConfig,
) {
    if let Some(var_1775) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1775);
    }
    if let Some(var_1776) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1776);
    }
}

pub fn serialize_structure_resource_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceConfig,
) {
    if let Some(var_1777) = &input.instance_type {
        object.key("InstanceType").string(var_1777.as_str());
    }
    {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1778) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1778);
    }
}

pub fn serialize_structure_checkpoint_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CheckpointConfig,
) {
    if let Some(var_1779) = &input.s3_uri {
        object.key("S3Uri").string(var_1779);
    }
    if let Some(var_1780) = &input.local_path {
        object.key("LocalPath").string(var_1780);
    }
}

pub fn serialize_structure_debug_hook_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugHookConfig,
) {
    if let Some(var_1781) = &input.local_path {
        object.key("LocalPath").string(var_1781);
    }
    if let Some(var_1782) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1782);
    }
    if let Some(var_1783) = &input.hook_parameters {
        let mut object_1784 = object.key("HookParameters").start_object();
        for (key_1785, value_1786) in var_1783 {
            {
                object_1784.key(key_1785).string(value_1786);
            }
        }
        object_1784.finish();
    }
    if let Some(var_1787) = &input.collection_configurations {
        let mut array_1788 = object.key("CollectionConfigurations").start_array();
        for item_1789 in var_1787 {
            {
                let mut object_1790 = array_1788.value().start_object();
                crate::json_ser::serialize_structure_collection_configuration(
                    &mut object_1790,
                    item_1789,
                );
                object_1790.finish();
            }
        }
        array_1788.finish();
    }
}

pub fn serialize_structure_debug_rule_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugRuleConfiguration,
) {
    if let Some(var_1791) = &input.rule_configuration_name {
        object.key("RuleConfigurationName").string(var_1791);
    }
    if let Some(var_1792) = &input.local_path {
        object.key("LocalPath").string(var_1792);
    }
    if let Some(var_1793) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1793);
    }
    if let Some(var_1794) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_1794);
    }
    if let Some(var_1795) = &input.instance_type {
        object.key("InstanceType").string(var_1795.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1796) = &input.rule_parameters {
        let mut object_1797 = object.key("RuleParameters").start_object();
        for (key_1798, value_1799) in var_1796 {
            {
                object_1797.key(key_1798).string(value_1799);
            }
        }
        object_1797.finish();
    }
}

pub fn serialize_structure_tensor_board_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardOutputConfig,
) {
    if let Some(var_1800) = &input.local_path {
        object.key("LocalPath").string(var_1800);
    }
    if let Some(var_1801) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1801);
    }
}

pub fn serialize_structure_profiler_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfig,
) {
    if let Some(var_1802) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1802);
    }
    if let Some(var_1803) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1803).into()),
        );
    }
    if let Some(var_1804) = &input.profiling_parameters {
        let mut object_1805 = object.key("ProfilingParameters").start_object();
        for (key_1806, value_1807) in var_1804 {
            {
                object_1805.key(key_1806).string(value_1807);
            }
        }
        object_1805.finish();
    }
}

pub fn serialize_structure_profiler_rule_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerRuleConfiguration,
) {
    if let Some(var_1808) = &input.rule_configuration_name {
        object.key("RuleConfigurationName").string(var_1808);
    }
    if let Some(var_1809) = &input.local_path {
        object.key("LocalPath").string(var_1809);
    }
    if let Some(var_1810) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1810);
    }
    if let Some(var_1811) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_1811);
    }
    if let Some(var_1812) = &input.instance_type {
        object.key("InstanceType").string(var_1812.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1813) = &input.rule_parameters {
        let mut object_1814 = object.key("RuleParameters").start_object();
        for (key_1815, value_1816) in var_1813 {
            {
                object_1814.key(key_1815).string(value_1816);
            }
        }
        object_1814.finish();
    }
}

pub fn serialize_structure_retry_strategy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetryStrategy,
) {
    {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.maximum_retry_attempts).into()),
        );
    }
}

pub fn serialize_structure_model_client_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelClientConfig,
) {
    if let Some(var_1817) = &input.invocations_timeout_in_seconds {
        object.key("InvocationsTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1817).into()),
        );
    }
    if let Some(var_1818) = &input.invocations_max_retries {
        object.key("InvocationsMaxRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1818).into()),
        );
    }
}

pub fn serialize_structure_transform_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformInput,
) {
    if let Some(var_1819) = &input.data_source {
        let mut object_1820 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_transform_data_source(&mut object_1820, var_1819);
        object_1820.finish();
    }
    if let Some(var_1821) = &input.content_type {
        object.key("ContentType").string(var_1821);
    }
    if let Some(var_1822) = &input.compression_type {
        object.key("CompressionType").string(var_1822.as_str());
    }
    if let Some(var_1823) = &input.split_type {
        object.key("SplitType").string(var_1823.as_str());
    }
}

pub fn serialize_structure_transform_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformOutput,
) {
    if let Some(var_1824) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1824);
    }
    if let Some(var_1825) = &input.accept {
        object.key("Accept").string(var_1825);
    }
    if let Some(var_1826) = &input.assemble_with {
        object.key("AssembleWith").string(var_1826.as_str());
    }
    if let Some(var_1827) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1827);
    }
}

pub fn serialize_structure_transform_resources(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformResources,
) {
    if let Some(var_1828) = &input.instance_type {
        object.key("InstanceType").string(var_1828.as_str());
    }
    if let Some(var_1829) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1829).into()),
        );
    }
    if let Some(var_1830) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1830);
    }
}

pub fn serialize_structure_data_processing(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataProcessing,
) {
    if let Some(var_1831) = &input.input_filter {
        object.key("InputFilter").string(var_1831);
    }
    if let Some(var_1832) = &input.output_filter {
        object.key("OutputFilter").string(var_1832);
    }
    if let Some(var_1833) = &input.join_source {
        object.key("JoinSource").string(var_1833.as_str());
    }
}

pub fn serialize_structure_trial_component_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentStatus,
) {
    if let Some(var_1834) = &input.primary_status {
        object.key("PrimaryStatus").string(var_1834.as_str());
    }
    if let Some(var_1835) = &input.message {
        object.key("Message").string(var_1835);
    }
}

pub fn serialize_union_trial_component_parameter_value(
    object_572: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentParameterValue,
) {
    match input {
        crate::model::TrialComponentParameterValue::StringValue(inner) => {
            object_572.key("StringValue").string(inner);
        }
        crate::model::TrialComponentParameterValue::NumberValue(inner) => {
            object_572.key("NumberValue").number(
                #[allow(clippy::useless_conversion)]
                smithy_types::Number::Float((*inner).into()),
            );
        }
    }
}

pub fn serialize_structure_trial_component_artifact(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentArtifact,
) {
    if let Some(var_1836) = &input.media_type {
        object.key("MediaType").string(var_1836);
    }
    if let Some(var_1837) = &input.value {
        object.key("Value").string(var_1837);
    }
}

pub fn serialize_structure_cognito_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoConfig,
) {
    if let Some(var_1838) = &input.user_pool {
        object.key("UserPool").string(var_1838);
    }
    if let Some(var_1839) = &input.client_id {
        object.key("ClientId").string(var_1839);
    }
}

pub fn serialize_structure_oidc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcConfig,
) {
    if let Some(var_1840) = &input.client_id {
        object.key("ClientId").string(var_1840);
    }
    if let Some(var_1841) = &input.client_secret {
        object.key("ClientSecret").string(var_1841);
    }
    if let Some(var_1842) = &input.issuer {
        object.key("Issuer").string(var_1842);
    }
    if let Some(var_1843) = &input.authorization_endpoint {
        object.key("AuthorizationEndpoint").string(var_1843);
    }
    if let Some(var_1844) = &input.token_endpoint {
        object.key("TokenEndpoint").string(var_1844);
    }
    if let Some(var_1845) = &input.user_info_endpoint {
        object.key("UserInfoEndpoint").string(var_1845);
    }
    if let Some(var_1846) = &input.logout_endpoint {
        object.key("LogoutEndpoint").string(var_1846);
    }
    if let Some(var_1847) = &input.jwks_uri {
        object.key("JwksUri").string(var_1847);
    }
}

pub fn serialize_structure_source_ip_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceIpConfig,
) {
    if let Some(var_1848) = &input.cidrs {
        let mut array_1849 = object.key("Cidrs").start_array();
        for item_1850 in var_1848 {
            {
                array_1849.value().string(item_1850);
            }
        }
        array_1849.finish();
    }
}

pub fn serialize_structure_member_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberDefinition,
) {
    if let Some(var_1851) = &input.cognito_member_definition {
        let mut object_1852 = object.key("CognitoMemberDefinition").start_object();
        crate::json_ser::serialize_structure_cognito_member_definition(&mut object_1852, var_1851);
        object_1852.finish();
    }
    if let Some(var_1853) = &input.oidc_member_definition {
        let mut object_1854 = object.key("OidcMemberDefinition").start_object();
        crate::json_ser::serialize_structure_oidc_member_definition(&mut object_1854, var_1853);
        object_1854.finish();
    }
}

pub fn serialize_structure_notification_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationConfiguration,
) {
    if let Some(var_1855) = &input.notification_topic_arn {
        object.key("NotificationTopicArn").string(var_1855);
    }
}

pub fn serialize_structure_retention_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetentionPolicy,
) {
    if let Some(var_1856) = &input.home_efs_file_system {
        object.key("HomeEfsFileSystem").string(var_1856.as_str());
    }
}

pub fn serialize_structure_suggestion_query(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SuggestionQuery,
) {
    if let Some(var_1857) = &input.property_name_query {
        let mut object_1858 = object.key("PropertyNameQuery").start_object();
        crate::json_ser::serialize_structure_property_name_query(&mut object_1858, var_1857);
        object_1858.finish();
    }
}

pub fn serialize_structure_device(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Device,
) {
    if let Some(var_1859) = &input.device_name {
        object.key("DeviceName").string(var_1859);
    }
    if let Some(var_1860) = &input.description {
        object.key("Description").string(var_1860);
    }
    if let Some(var_1861) = &input.iot_thing_name {
        object.key("IotThingName").string(var_1861);
    }
}

pub fn serialize_structure_renderable_task(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenderableTask,
) {
    if let Some(var_1862) = &input.input {
        object.key("Input").string(var_1862);
    }
}

pub fn serialize_structure_search_expression(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SearchExpression,
) {
    if let Some(var_1863) = &input.filters {
        let mut array_1864 = object.key("Filters").start_array();
        for item_1865 in var_1863 {
            {
                let mut object_1866 = array_1864.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_1866, item_1865);
                object_1866.finish();
            }
        }
        array_1864.finish();
    }
    if let Some(var_1867) = &input.nested_filters {
        let mut array_1868 = object.key("NestedFilters").start_array();
        for item_1869 in var_1867 {
            {
                let mut object_1870 = array_1868.value().start_object();
                crate::json_ser::serialize_structure_nested_filters(&mut object_1870, item_1869);
                object_1870.finish();
            }
        }
        array_1868.finish();
    }
    if let Some(var_1871) = &input.sub_expressions {
        let mut array_1872 = object.key("SubExpressions").start_array();
        for item_1873 in var_1871 {
            {
                let mut object_1874 = array_1872.value().start_object();
                crate::json_ser::serialize_structure_search_expression(&mut object_1874, item_1873);
                object_1874.finish();
            }
        }
        array_1872.finish();
    }
    if let Some(var_1875) = &input.operator {
        object.key("Operator").string(var_1875.as_str());
    }
}

pub fn serialize_structure_output_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputParameter,
) {
    if let Some(var_1876) = &input.name {
        object.key("Name").string(var_1876);
    }
    if let Some(var_1877) = &input.value {
        object.key("Value").string(var_1877);
    }
}

pub fn serialize_structure_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Parameter,
) {
    if let Some(var_1878) = &input.name {
        object.key("Name").string(var_1878);
    }
    if let Some(var_1879) = &input.value {
        object.key("Value").string(var_1879);
    }
}

pub fn serialize_structure_git_config_for_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfigForUpdate,
) {
    if let Some(var_1880) = &input.secret_arn {
        object.key("SecretArn").string(var_1880);
    }
}

pub fn serialize_structure_variant_property(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VariantProperty,
) {
    if let Some(var_1881) = &input.variant_property_type {
        object.key("VariantPropertyType").string(var_1881.as_str());
    }
}

pub fn serialize_structure_deployment_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentConfig,
) {
    if let Some(var_1882) = &input.blue_green_update_policy {
        let mut object_1883 = object.key("BlueGreenUpdatePolicy").start_object();
        crate::json_ser::serialize_structure_blue_green_update_policy(&mut object_1883, var_1882);
        object_1883.finish();
    }
    if let Some(var_1884) = &input.auto_rollback_configuration {
        let mut object_1885 = object.key("AutoRollbackConfiguration").start_object();
        crate::json_ser::serialize_structure_auto_rollback_config(&mut object_1885, var_1884);
        object_1885.finish();
    }
}

pub fn serialize_structure_desired_weight_and_capacity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DesiredWeightAndCapacity,
) {
    if let Some(var_1886) = &input.variant_name {
        object.key("VariantName").string(var_1886);
    }
    if let Some(var_1887) = &input.desired_weight {
        object.key("DesiredWeight").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1887).into()),
        );
    }
    if let Some(var_1888) = &input.desired_instance_count {
        object.key("DesiredInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1888).into()),
        );
    }
}

pub fn serialize_structure_profiler_config_for_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfigForUpdate,
) {
    if let Some(var_1889) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1889);
    }
    if let Some(var_1890) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1890).into()),
        );
    }
    if let Some(var_1891) = &input.profiling_parameters {
        let mut object_1892 = object.key("ProfilingParameters").start_object();
        for (key_1893, value_1894) in var_1891 {
            {
                object_1892.key(key_1893).string(value_1894);
            }
        }
        object_1892.finish();
    }
    if input.disable_profiler {
        object
            .key("DisableProfiler")
            .boolean(input.disable_profiler);
    }
}

pub fn serialize_structure_hyper_parameter_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterSpecification,
) {
    if let Some(var_1895) = &input.name {
        object.key("Name").string(var_1895);
    }
    if let Some(var_1896) = &input.description {
        object.key("Description").string(var_1896);
    }
    if let Some(var_1897) = &input.r#type {
        object.key("Type").string(var_1897.as_str());
    }
    if let Some(var_1898) = &input.range {
        let mut object_1899 = object.key("Range").start_object();
        crate::json_ser::serialize_structure_parameter_range(&mut object_1899, var_1898);
        object_1899.finish();
    }
    if input.is_tunable {
        object.key("IsTunable").boolean(input.is_tunable);
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_1900) = &input.default_value {
        object.key("DefaultValue").string(var_1900);
    }
}

pub fn serialize_structure_metric_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDefinition,
) {
    if let Some(var_1901) = &input.name {
        object.key("Name").string(var_1901);
    }
    if let Some(var_1902) = &input.regex {
        object.key("Regex").string(var_1902);
    }
}

pub fn serialize_structure_channel_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChannelSpecification,
) {
    if let Some(var_1903) = &input.name {
        object.key("Name").string(var_1903);
    }
    if let Some(var_1904) = &input.description {
        object.key("Description").string(var_1904);
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_1905) = &input.supported_content_types {
        let mut array_1906 = object.key("SupportedContentTypes").start_array();
        for item_1907 in var_1905 {
            {
                array_1906.value().string(item_1907);
            }
        }
        array_1906.finish();
    }
    if let Some(var_1908) = &input.supported_compression_types {
        let mut array_1909 = object.key("SupportedCompressionTypes").start_array();
        for item_1910 in var_1908 {
            {
                array_1909.value().string(item_1910.as_str());
            }
        }
        array_1909.finish();
    }
    if let Some(var_1911) = &input.supported_input_modes {
        let mut array_1912 = object.key("SupportedInputModes").start_array();
        for item_1913 in var_1911 {
            {
                array_1912.value().string(item_1913.as_str());
            }
        }
        array_1912.finish();
    }
}

pub fn serialize_structure_hyper_parameter_tuning_job_objective(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobObjective,
) {
    if let Some(var_1914) = &input.r#type {
        object.key("Type").string(var_1914.as_str());
    }
    if let Some(var_1915) = &input.metric_name {
        object.key("MetricName").string(var_1915);
    }
}

pub fn serialize_structure_model_package_container_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageContainerDefinition,
) {
    if let Some(var_1916) = &input.container_hostname {
        object.key("ContainerHostname").string(var_1916);
    }
    if let Some(var_1917) = &input.image {
        object.key("Image").string(var_1917);
    }
    if let Some(var_1918) = &input.image_digest {
        object.key("ImageDigest").string(var_1918);
    }
    if let Some(var_1919) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_1919);
    }
    if let Some(var_1920) = &input.product_id {
        object.key("ProductId").string(var_1920);
    }
    if let Some(var_1921) = &input.environment {
        let mut object_1922 = object.key("Environment").start_object();
        for (key_1923, value_1924) in var_1921 {
            {
                object_1922.key(key_1923).string(value_1924);
            }
        }
        object_1922.finish();
    }
}

pub fn serialize_structure_algorithm_validation_profile(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationProfile,
) {
    if let Some(var_1925) = &input.profile_name {
        object.key("ProfileName").string(var_1925);
    }
    if let Some(var_1926) = &input.training_job_definition {
        let mut object_1927 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_training_job_definition(&mut object_1927, var_1926);
        object_1927.finish();
    }
    if let Some(var_1928) = &input.transform_job_definition {
        let mut object_1929 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_transform_job_definition(&mut object_1929, var_1928);
        object_1929.finish();
    }
}

pub fn serialize_structure_kernel_spec(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelSpec,
) {
    if let Some(var_1930) = &input.name {
        object.key("Name").string(var_1930);
    }
    if let Some(var_1931) = &input.display_name {
        object.key("DisplayName").string(var_1931);
    }
}

pub fn serialize_structure_file_system_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemConfig,
) {
    if let Some(var_1932) = &input.mount_path {
        object.key("MountPath").string(var_1932);
    }
    if let Some(var_1933) = &input.default_uid {
        object.key("DefaultUid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1933).into()),
        );
    }
    if let Some(var_1934) = &input.default_gid {
        object.key("DefaultGid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1934).into()),
        );
    }
}

pub fn serialize_structure_artifact_source_type(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSourceType,
) {
    if let Some(var_1935) = &input.source_id_type {
        object.key("SourceIdType").string(var_1935.as_str());
    }
    if let Some(var_1936) = &input.value {
        object.key("Value").string(var_1936);
    }
}

pub fn serialize_structure_auto_ml_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlDataSource,
) {
    if let Some(var_1937) = &input.s3_data_source {
        let mut object_1938 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_auto_mls3_data_source(&mut object_1938, var_1937);
        object_1938.finish();
    }
}

pub fn serialize_structure_auto_ml_job_completion_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobCompletionCriteria,
) {
    if let Some(var_1939) = &input.max_candidates {
        object.key("MaxCandidates").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1939).into()),
        );
    }
    if let Some(var_1940) = &input.max_runtime_per_training_job_in_seconds {
        object.key("MaxRuntimePerTrainingJobInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1940).into()),
        );
    }
    if let Some(var_1941) = &input.max_auto_ml_job_runtime_in_seconds {
        object.key("MaxAutoMLJobRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1941).into()),
        );
    }
}

pub fn serialize_structure_auto_ml_security_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlSecurityConfig,
) {
    if let Some(var_1942) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1942);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if let Some(var_1943) = &input.vpc_config {
        let mut object_1944 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1944, var_1943);
        object_1944.finish();
    }
}

pub fn serialize_structure_target_platform(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetPlatform,
) {
    if let Some(var_1945) = &input.os {
        object.key("Os").string(var_1945.as_str());
    }
    if let Some(var_1946) = &input.arch {
        object.key("Arch").string(var_1946.as_str());
    }
    if let Some(var_1947) = &input.accelerator {
        object.key("Accelerator").string(var_1947.as_str());
    }
}

pub fn serialize_structure_monitoring_constraints_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringConstraintsResource,
) {
    if let Some(var_1948) = &input.s3_uri {
        object.key("S3Uri").string(var_1948);
    }
}

pub fn serialize_structure_monitoring_statistics_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStatisticsResource,
) {
    if let Some(var_1949) = &input.s3_uri {
        object.key("S3Uri").string(var_1949);
    }
}

pub fn serialize_structure_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointInput,
) {
    if let Some(var_1950) = &input.endpoint_name {
        object.key("EndpointName").string(var_1950);
    }
    if let Some(var_1951) = &input.local_path {
        object.key("LocalPath").string(var_1951);
    }
    if let Some(var_1952) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_1952.as_str());
    }
    if let Some(var_1953) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_1953.as_str());
    }
    if let Some(var_1954) = &input.features_attribute {
        object.key("FeaturesAttribute").string(var_1954);
    }
    if let Some(var_1955) = &input.inference_attribute {
        object.key("InferenceAttribute").string(var_1955);
    }
    if let Some(var_1956) = &input.probability_attribute {
        object.key("ProbabilityAttribute").string(var_1956);
    }
    if let Some(var_1957) = &input.probability_threshold_attribute {
        object.key("ProbabilityThresholdAttribute").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1957).into()),
        );
    }
    if let Some(var_1958) = &input.start_time_offset {
        object.key("StartTimeOffset").string(var_1958);
    }
    if let Some(var_1959) = &input.end_time_offset {
        object.key("EndTimeOffset").string(var_1959);
    }
}

pub fn serialize_structure_monitoring_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutput,
) {
    if let Some(var_1960) = &input.s3_output {
        let mut object_1961 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_monitoring_s3_output(&mut object_1961, var_1960);
        object_1961.finish();
    }
}

pub fn serialize_structure_monitoring_cluster_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringClusterConfig,
) {
    if let Some(var_1962) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1962).into()),
        );
    }
    if let Some(var_1963) = &input.instance_type {
        object.key("InstanceType").string(var_1963.as_str());
    }
    if let Some(var_1964) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1964).into()),
        );
    }
    if let Some(var_1965) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1965);
    }
}

pub fn serialize_structure_sharing_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharingSettings,
) {
    if let Some(var_1966) = &input.notebook_output_option {
        object.key("NotebookOutputOption").string(var_1966.as_str());
    }
    if let Some(var_1967) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1967);
    }
    if let Some(var_1968) = &input.s3_kms_key_id {
        object.key("S3KmsKeyId").string(var_1968);
    }
}

pub fn serialize_structure_jupyter_server_app_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JupyterServerAppSettings,
) {
    if let Some(var_1969) = &input.default_resource_spec {
        let mut object_1970 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_1970, var_1969);
        object_1970.finish();
    }
}

pub fn serialize_structure_kernel_gateway_app_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayAppSettings,
) {
    if let Some(var_1971) = &input.default_resource_spec {
        let mut object_1972 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_1972, var_1971);
        object_1972.finish();
    }
    if let Some(var_1973) = &input.custom_images {
        let mut array_1974 = object.key("CustomImages").start_array();
        for item_1975 in var_1973 {
            {
                let mut object_1976 = array_1974.value().start_object();
                crate::json_ser::serialize_structure_custom_image(&mut object_1976, item_1975);
                object_1976.finish();
            }
        }
        array_1974.finish();
    }
}

pub fn serialize_structure_tensor_board_app_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardAppSettings,
) {
    if let Some(var_1977) = &input.default_resource_spec {
        let mut object_1978 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_1978, var_1977);
        object_1978.finish();
    }
}

pub fn serialize_structure_production_variant_core_dump_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariantCoreDumpConfig,
) {
    if let Some(var_1979) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_1979);
    }
    if let Some(var_1980) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1980);
    }
}

pub fn serialize_structure_capture_option(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureOption,
) {
    if let Some(var_1981) = &input.capture_mode {
        object.key("CaptureMode").string(var_1981.as_str());
    }
}

pub fn serialize_structure_capture_content_type_header(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureContentTypeHeader,
) {
    if let Some(var_1982) = &input.csv_content_types {
        let mut array_1983 = object.key("CsvContentTypes").start_array();
        for item_1984 in var_1982 {
            {
                array_1983.value().string(item_1984);
            }
        }
        array_1983.finish();
    }
    if let Some(var_1985) = &input.json_content_types {
        let mut array_1986 = object.key("JsonContentTypes").start_array();
        for item_1987 in var_1985 {
            {
                array_1986.value().string(item_1987);
            }
        }
        array_1986.finish();
    }
}

pub fn serialize_structure_async_inference_client_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceClientConfig,
) {
    if let Some(var_1988) = &input.max_concurrent_invocations_per_instance {
        object.key("MaxConcurrentInvocationsPerInstance").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1988).into()),
        );
    }
}

pub fn serialize_structure_async_inference_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceOutputConfig,
) {
    if let Some(var_1989) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1989);
    }
    if let Some(var_1990) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1990);
    }
    if let Some(var_1991) = &input.notification_config {
        let mut object_1992 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_async_inference_notification_config(
            &mut object_1992,
            var_1991,
        );
        object_1992.finish();
    }
}

pub fn serialize_structure_online_store_security_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreSecurityConfig,
) {
    if let Some(var_1993) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1993);
    }
}

pub fn serialize_structure_s3_storage_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3StorageConfig,
) {
    if let Some(var_1994) = &input.s3_uri {
        object.key("S3Uri").string(var_1994);
    }
    if let Some(var_1995) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1995);
    }
    if let Some(var_1996) = &input.resolved_output_s3_uri {
        object.key("ResolvedOutputS3Uri").string(var_1996);
    }
}

pub fn serialize_structure_data_catalog_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogConfig,
) {
    if let Some(var_1997) = &input.table_name {
        object.key("TableName").string(var_1997);
    }
    if let Some(var_1998) = &input.catalog {
        object.key("Catalog").string(var_1998);
    }
    if let Some(var_1999) = &input.database {
        object.key("Database").string(var_1999);
    }
}

pub fn serialize_structure_human_loop_activation_conditions_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConditionsConfig,
) {
    if let Some(var_2000) = &input.human_loop_activation_conditions {
        object.key("HumanLoopActivationConditions").string(var_2000);
    }
}

pub fn serialize_structure_public_workforce_task_price(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PublicWorkforceTaskPrice,
) {
    if let Some(var_2001) = &input.amount_in_usd {
        let mut object_2002 = object.key("AmountInUsd").start_object();
        crate::json_ser::serialize_structure_usd(&mut object_2002, var_2001);
        object_2002.finish();
    }
}

pub fn serialize_structure_resource_limits(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceLimits,
) {
    {
        object.key("MaxNumberOfTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_number_of_training_jobs).into()),
        );
    }
    {
        object.key("MaxParallelTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_parallel_training_jobs).into()),
        );
    }
}

pub fn serialize_structure_parameter_ranges(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRanges,
) {
    if let Some(var_2003) = &input.integer_parameter_ranges {
        let mut array_2004 = object.key("IntegerParameterRanges").start_array();
        for item_2005 in var_2003 {
            {
                let mut object_2006 = array_2004.value().start_object();
                crate::json_ser::serialize_structure_integer_parameter_range(
                    &mut object_2006,
                    item_2005,
                );
                object_2006.finish();
            }
        }
        array_2004.finish();
    }
    if let Some(var_2007) = &input.continuous_parameter_ranges {
        let mut array_2008 = object.key("ContinuousParameterRanges").start_array();
        for item_2009 in var_2007 {
            {
                let mut object_2010 = array_2008.value().start_object();
                crate::json_ser::serialize_structure_continuous_parameter_range(
                    &mut object_2010,
                    item_2009,
                );
                object_2010.finish();
            }
        }
        array_2008.finish();
    }
    if let Some(var_2011) = &input.categorical_parameter_ranges {
        let mut array_2012 = object.key("CategoricalParameterRanges").start_array();
        for item_2013 in var_2011 {
            {
                let mut object_2014 = array_2012.value().start_object();
                crate::json_ser::serialize_structure_categorical_parameter_range(
                    &mut object_2014,
                    item_2013,
                );
                object_2014.finish();
            }
        }
        array_2012.finish();
    }
}

pub fn serialize_structure_tuning_job_completion_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TuningJobCompletionCriteria,
) {
    if let Some(var_2015) = &input.target_objective_metric_value {
        object.key("TargetObjectiveMetricValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_2015).into()),
        );
    }
}

pub fn serialize_structure_hyper_parameter_algorithm_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterAlgorithmSpecification,
) {
    if let Some(var_2016) = &input.training_image {
        object.key("TrainingImage").string(var_2016);
    }
    if let Some(var_2017) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2017.as_str());
    }
    if let Some(var_2018) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2018);
    }
    if let Some(var_2019) = &input.metric_definitions {
        let mut array_2020 = object.key("MetricDefinitions").start_array();
        for item_2021 in var_2019 {
            {
                let mut object_2022 = array_2020.value().start_object();
                crate::json_ser::serialize_structure_metric_definition(&mut object_2022, item_2021);
                object_2022.finish();
            }
        }
        array_2020.finish();
    }
}

pub fn serialize_structure_parent_hyper_parameter_tuning_job(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParentHyperParameterTuningJob,
) {
    if let Some(var_2023) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_2023);
    }
}

pub fn serialize_structure_labeling_job_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataSource,
) {
    if let Some(var_2024) = &input.s3_data_source {
        let mut object_2025 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_labeling_job_s3_data_source(
            &mut object_2025,
            var_2024,
        );
        object_2025.finish();
    }
    if let Some(var_2026) = &input.sns_data_source {
        let mut object_2027 = object.key("SnsDataSource").start_object();
        crate::json_ser::serialize_structure_labeling_job_sns_data_source(
            &mut object_2027,
            var_2026,
        );
        object_2027.finish();
    }
}

pub fn serialize_structure_labeling_job_data_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataAttributes,
) {
    if let Some(var_2028) = &input.content_classifiers {
        let mut array_2029 = object.key("ContentClassifiers").start_array();
        for item_2030 in var_2028 {
            {
                array_2029.value().string(item_2030.as_str());
            }
        }
        array_2029.finish();
    }
}

pub fn serialize_structure_labeling_job_resource_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobResourceConfig,
) {
    if let Some(var_2031) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2031);
    }
}

pub fn serialize_structure_ui_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiConfig,
) {
    if let Some(var_2032) = &input.ui_template_s3_uri {
        object.key("UiTemplateS3Uri").string(var_2032);
    }
    if let Some(var_2033) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_2033);
    }
}

pub fn serialize_structure_annotation_consolidation_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnnotationConsolidationConfig,
) {
    if let Some(var_2034) = &input.annotation_consolidation_lambda_arn {
        object
            .key("AnnotationConsolidationLambdaArn")
            .string(var_2034);
    }
}

pub fn serialize_structure_image_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageConfig,
) {
    if let Some(var_2035) = &input.repository_access_mode {
        object.key("RepositoryAccessMode").string(var_2035.as_str());
    }
    if let Some(var_2036) = &input.repository_auth_config {
        let mut object_2037 = object.key("RepositoryAuthConfig").start_object();
        crate::json_ser::serialize_structure_repository_auth_config(&mut object_2037, var_2036);
        object_2037.finish();
    }
}

pub fn serialize_structure_multi_model_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiModelConfig,
) {
    if let Some(var_2038) = &input.model_cache_setting {
        object.key("ModelCacheSetting").string(var_2038.as_str());
    }
}

pub fn serialize_structure_monitoring_ground_truth_s3_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringGroundTruthS3Input,
) {
    if let Some(var_2039) = &input.s3_uri {
        object.key("S3Uri").string(var_2039);
    }
}

pub fn serialize_structure_model_package_validation_profile(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationProfile,
) {
    if let Some(var_2040) = &input.profile_name {
        object.key("ProfileName").string(var_2040);
    }
    if let Some(var_2041) = &input.transform_job_definition {
        let mut object_2042 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_transform_job_definition(&mut object_2042, var_2041);
        object_2042.finish();
    }
}

pub fn serialize_structure_source_algorithm(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithm,
) {
    if let Some(var_2043) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_2043);
    }
    if let Some(var_2044) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2044);
    }
}

pub fn serialize_structure_model_quality(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQuality,
) {
    if let Some(var_2045) = &input.statistics {
        let mut object_2046 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2046, var_2045);
        object_2046.finish();
    }
    if let Some(var_2047) = &input.constraints {
        let mut object_2048 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2048, var_2047);
        object_2048.finish();
    }
}

pub fn serialize_structure_model_data_quality(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDataQuality,
) {
    if let Some(var_2049) = &input.statistics {
        let mut object_2050 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2050, var_2049);
        object_2050.finish();
    }
    if let Some(var_2051) = &input.constraints {
        let mut object_2052 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2052, var_2051);
        object_2052.finish();
    }
}

pub fn serialize_structure_bias(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Bias,
) {
    if let Some(var_2053) = &input.report {
        let mut object_2054 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2054, var_2053);
        object_2054.finish();
    }
}

pub fn serialize_structure_explainability(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Explainability,
) {
    if let Some(var_2055) = &input.report {
        let mut object_2056 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2056, var_2055);
        object_2056.finish();
    }
}

pub fn serialize_structure_schedule_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduleConfig,
) {
    if let Some(var_2057) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_2057);
    }
}

pub fn serialize_structure_monitoring_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringJobDefinition,
) {
    if let Some(var_2058) = &input.baseline_config {
        let mut object_2059 = object.key("BaselineConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_baseline_config(&mut object_2059, var_2058);
        object_2059.finish();
    }
    if let Some(var_2060) = &input.monitoring_inputs {
        let mut array_2061 = object.key("MonitoringInputs").start_array();
        for item_2062 in var_2060 {
            {
                let mut object_2063 = array_2061.value().start_object();
                crate::json_ser::serialize_structure_monitoring_input(&mut object_2063, item_2062);
                object_2063.finish();
            }
        }
        array_2061.finish();
    }
    if let Some(var_2064) = &input.monitoring_output_config {
        let mut object_2065 = object.key("MonitoringOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_2065, var_2064);
        object_2065.finish();
    }
    if let Some(var_2066) = &input.monitoring_resources {
        let mut object_2067 = object.key("MonitoringResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_2067, var_2066);
        object_2067.finish();
    }
    if let Some(var_2068) = &input.monitoring_app_specification {
        let mut object_2069 = object.key("MonitoringAppSpecification").start_object();
        crate::json_ser::serialize_structure_monitoring_app_specification(
            &mut object_2069,
            var_2068,
        );
        object_2069.finish();
    }
    if let Some(var_2070) = &input.stopping_condition {
        let mut object_2071 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_2071,
            var_2070,
        );
        object_2071.finish();
    }
    if let Some(var_2072) = &input.environment {
        let mut object_2073 = object.key("Environment").start_object();
        for (key_2074, value_2075) in var_2072 {
            {
                object_2073.key(key_2074).string(value_2075);
            }
        }
        object_2073.finish();
    }
    if let Some(var_2076) = &input.network_config {
        let mut object_2077 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_network_config(&mut object_2077, var_2076);
        object_2077.finish();
    }
    if let Some(var_2078) = &input.role_arn {
        object.key("RoleArn").string(var_2078);
    }
}

pub fn serialize_structure_processing_s3_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Input,
) {
    if let Some(var_2079) = &input.s3_uri {
        object.key("S3Uri").string(var_2079);
    }
    if let Some(var_2080) = &input.local_path {
        object.key("LocalPath").string(var_2080);
    }
    if let Some(var_2081) = &input.s3_data_type {
        object.key("S3DataType").string(var_2081.as_str());
    }
    if let Some(var_2082) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_2082.as_str());
    }
    if let Some(var_2083) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2083.as_str());
    }
    if let Some(var_2084) = &input.s3_compression_type {
        object.key("S3CompressionType").string(var_2084.as_str());
    }
}

pub fn serialize_structure_dataset_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatasetDefinition,
) {
    if let Some(var_2085) = &input.athena_dataset_definition {
        let mut object_2086 = object.key("AthenaDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_athena_dataset_definition(&mut object_2086, var_2085);
        object_2086.finish();
    }
    if let Some(var_2087) = &input.redshift_dataset_definition {
        let mut object_2088 = object.key("RedshiftDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_redshift_dataset_definition(
            &mut object_2088,
            var_2087,
        );
        object_2088.finish();
    }
    if let Some(var_2089) = &input.local_path {
        object.key("LocalPath").string(var_2089);
    }
    if let Some(var_2090) = &input.data_distribution_type {
        object.key("DataDistributionType").string(var_2090.as_str());
    }
    if let Some(var_2091) = &input.input_mode {
        object.key("InputMode").string(var_2091.as_str());
    }
}

pub fn serialize_structure_processing_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutput,
) {
    if let Some(var_2092) = &input.output_name {
        object.key("OutputName").string(var_2092);
    }
    if let Some(var_2093) = &input.s3_output {
        let mut object_2094 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_processing_s3_output(&mut object_2094, var_2093);
        object_2094.finish();
    }
    if let Some(var_2095) = &input.feature_store_output {
        let mut object_2096 = object.key("FeatureStoreOutput").start_object();
        crate::json_ser::serialize_structure_processing_feature_store_output(
            &mut object_2096,
            var_2095,
        );
        object_2096.finish();
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
}

pub fn serialize_structure_processing_cluster_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingClusterConfig,
) {
    if let Some(var_2097) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2097).into()),
        );
    }
    if let Some(var_2098) = &input.instance_type {
        object.key("InstanceType").string(var_2098.as_str());
    }
    if let Some(var_2099) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2099).into()),
        );
    }
    if let Some(var_2100) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2100);
    }
}

pub fn serialize_structure_provisioning_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisioningParameter,
) {
    if let Some(var_2101) = &input.key {
        object.key("Key").string(var_2101);
    }
    if let Some(var_2102) = &input.value {
        object.key("Value").string(var_2102);
    }
}

pub fn serialize_structure_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSource,
) {
    if let Some(var_2103) = &input.s3_data_source {
        let mut object_2104 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_s3_data_source(&mut object_2104, var_2103);
        object_2104.finish();
    }
    if let Some(var_2105) = &input.file_system_data_source {
        let mut object_2106 = object.key("FileSystemDataSource").start_object();
        crate::json_ser::serialize_structure_file_system_data_source(&mut object_2106, var_2105);
        object_2106.finish();
    }
}

pub fn serialize_structure_shuffle_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ShuffleConfig,
) {
    {
        object.key("Seed").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.seed).into()),
        );
    }
}

pub fn serialize_structure_collection_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CollectionConfiguration,
) {
    if let Some(var_2107) = &input.collection_name {
        object.key("CollectionName").string(var_2107);
    }
    if let Some(var_2108) = &input.collection_parameters {
        let mut object_2109 = object.key("CollectionParameters").start_object();
        for (key_2110, value_2111) in var_2108 {
            {
                object_2109.key(key_2110).string(value_2111);
            }
        }
        object_2109.finish();
    }
}

pub fn serialize_structure_transform_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformDataSource,
) {
    if let Some(var_2112) = &input.s3_data_source {
        let mut object_2113 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_transform_s3_data_source(&mut object_2113, var_2112);
        object_2113.finish();
    }
}

pub fn serialize_structure_cognito_member_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoMemberDefinition,
) {
    if let Some(var_2114) = &input.user_pool {
        object.key("UserPool").string(var_2114);
    }
    if let Some(var_2115) = &input.user_group {
        object.key("UserGroup").string(var_2115);
    }
    if let Some(var_2116) = &input.client_id {
        object.key("ClientId").string(var_2116);
    }
}

pub fn serialize_structure_oidc_member_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcMemberDefinition,
) {
    if let Some(var_2117) = &input.groups {
        let mut array_2118 = object.key("Groups").start_array();
        for item_2119 in var_2117 {
            {
                array_2118.value().string(item_2119);
            }
        }
        array_2118.finish();
    }
}

pub fn serialize_structure_property_name_query(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyNameQuery,
) {
    if let Some(var_2120) = &input.property_name_hint {
        object.key("PropertyNameHint").string(var_2120);
    }
}

pub fn serialize_structure_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_2121) = &input.name {
        object.key("Name").string(var_2121);
    }
    if let Some(var_2122) = &input.operator {
        object.key("Operator").string(var_2122.as_str());
    }
    if let Some(var_2123) = &input.value {
        object.key("Value").string(var_2123);
    }
}

pub fn serialize_structure_nested_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NestedFilters,
) {
    if let Some(var_2124) = &input.nested_property_name {
        object.key("NestedPropertyName").string(var_2124);
    }
    if let Some(var_2125) = &input.filters {
        let mut array_2126 = object.key("Filters").start_array();
        for item_2127 in var_2125 {
            {
                let mut object_2128 = array_2126.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_2128, item_2127);
                object_2128.finish();
            }
        }
        array_2126.finish();
    }
}

pub fn serialize_structure_blue_green_update_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlueGreenUpdatePolicy,
) {
    if let Some(var_2129) = &input.traffic_routing_configuration {
        let mut object_2130 = object.key("TrafficRoutingConfiguration").start_object();
        crate::json_ser::serialize_structure_traffic_routing_config(&mut object_2130, var_2129);
        object_2130.finish();
    }
    if let Some(var_2131) = &input.termination_wait_in_seconds {
        object.key("TerminationWaitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2131).into()),
        );
    }
    if let Some(var_2132) = &input.maximum_execution_timeout_in_seconds {
        object.key("MaximumExecutionTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2132).into()),
        );
    }
}

pub fn serialize_structure_auto_rollback_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoRollbackConfig,
) {
    if let Some(var_2133) = &input.alarms {
        let mut array_2134 = object.key("Alarms").start_array();
        for item_2135 in var_2133 {
            {
                let mut object_2136 = array_2134.value().start_object();
                crate::json_ser::serialize_structure_alarm(&mut object_2136, item_2135);
                object_2136.finish();
            }
        }
        array_2134.finish();
    }
}

pub fn serialize_structure_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRange,
) {
    if let Some(var_2137) = &input.integer_parameter_range_specification {
        let mut object_2138 = object
            .key("IntegerParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_integer_parameter_range_specification(
            &mut object_2138,
            var_2137,
        );
        object_2138.finish();
    }
    if let Some(var_2139) = &input.continuous_parameter_range_specification {
        let mut object_2140 = object
            .key("ContinuousParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_continuous_parameter_range_specification(
            &mut object_2140,
            var_2139,
        );
        object_2140.finish();
    }
    if let Some(var_2141) = &input.categorical_parameter_range_specification {
        let mut object_2142 = object
            .key("CategoricalParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_categorical_parameter_range_specification(
            &mut object_2142,
            var_2141,
        );
        object_2142.finish();
    }
}

pub fn serialize_structure_training_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingJobDefinition,
) {
    if let Some(var_2143) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2143.as_str());
    }
    if let Some(var_2144) = &input.hyper_parameters {
        let mut object_2145 = object.key("HyperParameters").start_object();
        for (key_2146, value_2147) in var_2144 {
            {
                object_2145.key(key_2146).string(value_2147);
            }
        }
        object_2145.finish();
    }
    if let Some(var_2148) = &input.input_data_config {
        let mut array_2149 = object.key("InputDataConfig").start_array();
        for item_2150 in var_2148 {
            {
                let mut object_2151 = array_2149.value().start_object();
                crate::json_ser::serialize_structure_channel(&mut object_2151, item_2150);
                object_2151.finish();
            }
        }
        array_2149.finish();
    }
    if let Some(var_2152) = &input.output_data_config {
        let mut object_2153 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_2153, var_2152);
        object_2153.finish();
    }
    if let Some(var_2154) = &input.resource_config {
        let mut object_2155 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_resource_config(&mut object_2155, var_2154);
        object_2155.finish();
    }
    if let Some(var_2156) = &input.stopping_condition {
        let mut object_2157 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_2157, var_2156);
        object_2157.finish();
    }
}

pub fn serialize_structure_transform_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformJobDefinition,
) {
    if let Some(var_2158) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2158).into()),
        );
    }
    if let Some(var_2159) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2159).into()),
        );
    }
    if let Some(var_2160) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_2160.as_str());
    }
    if let Some(var_2161) = &input.environment {
        let mut object_2162 = object.key("Environment").start_object();
        for (key_2163, value_2164) in var_2161 {
            {
                object_2162.key(key_2163).string(value_2164);
            }
        }
        object_2162.finish();
    }
    if let Some(var_2165) = &input.transform_input {
        let mut object_2166 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_transform_input(&mut object_2166, var_2165);
        object_2166.finish();
    }
    if let Some(var_2167) = &input.transform_output {
        let mut object_2168 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_transform_output(&mut object_2168, var_2167);
        object_2168.finish();
    }
    if let Some(var_2169) = &input.transform_resources {
        let mut object_2170 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_transform_resources(&mut object_2170, var_2169);
        object_2170.finish();
    }
}

pub fn serialize_structure_auto_mls3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMls3DataSource,
) {
    if let Some(var_2171) = &input.s3_data_type {
        object.key("S3DataType").string(var_2171.as_str());
    }
    if let Some(var_2172) = &input.s3_uri {
        object.key("S3Uri").string(var_2172);
    }
}

pub fn serialize_structure_monitoring_s3_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringS3Output,
) {
    if let Some(var_2173) = &input.s3_uri {
        object.key("S3Uri").string(var_2173);
    }
    if let Some(var_2174) = &input.local_path {
        object.key("LocalPath").string(var_2174);
    }
    if let Some(var_2175) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2175.as_str());
    }
}

pub fn serialize_structure_custom_image(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomImage,
) {
    if let Some(var_2176) = &input.image_name {
        object.key("ImageName").string(var_2176);
    }
    if let Some(var_2177) = &input.image_version_number {
        object.key("ImageVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2177).into()),
        );
    }
    if let Some(var_2178) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_2178);
    }
}

pub fn serialize_structure_async_inference_notification_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceNotificationConfig,
) {
    if let Some(var_2179) = &input.success_topic {
        object.key("SuccessTopic").string(var_2179);
    }
    if let Some(var_2180) = &input.error_topic {
        object.key("ErrorTopic").string(var_2180);
    }
}

pub fn serialize_structure_usd(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Usd,
) {
    if input.dollars != 0 {
        object.key("Dollars").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.dollars).into()),
        );
    }
    if input.cents != 0 {
        object.key("Cents").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.cents).into()),
        );
    }
    if input.tenth_fractions_of_a_cent != 0 {
        object.key("TenthFractionsOfACent").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.tenth_fractions_of_a_cent).into()),
        );
    }
}

pub fn serialize_structure_integer_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRange,
) {
    if let Some(var_2181) = &input.name {
        object.key("Name").string(var_2181);
    }
    if let Some(var_2182) = &input.min_value {
        object.key("MinValue").string(var_2182);
    }
    if let Some(var_2183) = &input.max_value {
        object.key("MaxValue").string(var_2183);
    }
    if let Some(var_2184) = &input.scaling_type {
        object.key("ScalingType").string(var_2184.as_str());
    }
}

pub fn serialize_structure_continuous_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRange,
) {
    if let Some(var_2185) = &input.name {
        object.key("Name").string(var_2185);
    }
    if let Some(var_2186) = &input.min_value {
        object.key("MinValue").string(var_2186);
    }
    if let Some(var_2187) = &input.max_value {
        object.key("MaxValue").string(var_2187);
    }
    if let Some(var_2188) = &input.scaling_type {
        object.key("ScalingType").string(var_2188.as_str());
    }
}

pub fn serialize_structure_categorical_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRange,
) {
    if let Some(var_2189) = &input.name {
        object.key("Name").string(var_2189);
    }
    if let Some(var_2190) = &input.values {
        let mut array_2191 = object.key("Values").start_array();
        for item_2192 in var_2190 {
            {
                array_2191.value().string(item_2192);
            }
        }
        array_2191.finish();
    }
}

pub fn serialize_structure_labeling_job_s3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobS3DataSource,
) {
    if let Some(var_2193) = &input.manifest_s3_uri {
        object.key("ManifestS3Uri").string(var_2193);
    }
}

pub fn serialize_structure_labeling_job_sns_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobSnsDataSource,
) {
    if let Some(var_2194) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_2194);
    }
}

pub fn serialize_structure_repository_auth_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepositoryAuthConfig,
) {
    if let Some(var_2195) = &input.repository_credentials_provider_arn {
        object
            .key("RepositoryCredentialsProviderArn")
            .string(var_2195);
    }
}

pub fn serialize_structure_metrics_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricsSource,
) {
    if let Some(var_2196) = &input.content_type {
        object.key("ContentType").string(var_2196);
    }
    if let Some(var_2197) = &input.content_digest {
        object.key("ContentDigest").string(var_2197);
    }
    if let Some(var_2198) = &input.s3_uri {
        object.key("S3Uri").string(var_2198);
    }
}

pub fn serialize_structure_monitoring_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringBaselineConfig,
) {
    if let Some(var_2199) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_2199);
    }
    if let Some(var_2200) = &input.constraints_resource {
        let mut object_2201 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_2201,
            var_2200,
        );
        object_2201.finish();
    }
    if let Some(var_2202) = &input.statistics_resource {
        let mut object_2203 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_statistics_resource(
            &mut object_2203,
            var_2202,
        );
        object_2203.finish();
    }
}

pub fn serialize_structure_monitoring_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringInput,
) {
    if let Some(var_2204) = &input.endpoint_input {
        let mut object_2205 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_2205, var_2204);
        object_2205.finish();
    }
}

pub fn serialize_structure_monitoring_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringAppSpecification,
) {
    if let Some(var_2206) = &input.image_uri {
        object.key("ImageUri").string(var_2206);
    }
    if let Some(var_2207) = &input.container_entrypoint {
        let mut array_2208 = object.key("ContainerEntrypoint").start_array();
        for item_2209 in var_2207 {
            {
                array_2208.value().string(item_2209);
            }
        }
        array_2208.finish();
    }
    if let Some(var_2210) = &input.container_arguments {
        let mut array_2211 = object.key("ContainerArguments").start_array();
        for item_2212 in var_2210 {
            {
                array_2211.value().string(item_2212);
            }
        }
        array_2211.finish();
    }
    if let Some(var_2213) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_2213);
    }
    if let Some(var_2214) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_2214);
    }
}

pub fn serialize_structure_athena_dataset_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaDatasetDefinition,
) {
    if let Some(var_2215) = &input.catalog {
        object.key("Catalog").string(var_2215);
    }
    if let Some(var_2216) = &input.database {
        object.key("Database").string(var_2216);
    }
    if let Some(var_2217) = &input.query_string {
        object.key("QueryString").string(var_2217);
    }
    if let Some(var_2218) = &input.work_group {
        object.key("WorkGroup").string(var_2218);
    }
    if let Some(var_2219) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2219);
    }
    if let Some(var_2220) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2220);
    }
    if let Some(var_2221) = &input.output_format {
        object.key("OutputFormat").string(var_2221.as_str());
    }
    if let Some(var_2222) = &input.output_compression {
        object.key("OutputCompression").string(var_2222.as_str());
    }
}

pub fn serialize_structure_redshift_dataset_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftDatasetDefinition,
) {
    if let Some(var_2223) = &input.cluster_id {
        object.key("ClusterId").string(var_2223);
    }
    if let Some(var_2224) = &input.database {
        object.key("Database").string(var_2224);
    }
    if let Some(var_2225) = &input.db_user {
        object.key("DbUser").string(var_2225);
    }
    if let Some(var_2226) = &input.query_string {
        object.key("QueryString").string(var_2226);
    }
    if let Some(var_2227) = &input.cluster_role_arn {
        object.key("ClusterRoleArn").string(var_2227);
    }
    if let Some(var_2228) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2228);
    }
    if let Some(var_2229) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2229);
    }
    if let Some(var_2230) = &input.output_format {
        object.key("OutputFormat").string(var_2230.as_str());
    }
    if let Some(var_2231) = &input.output_compression {
        object.key("OutputCompression").string(var_2231.as_str());
    }
}

pub fn serialize_structure_processing_s3_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Output,
) {
    if let Some(var_2232) = &input.s3_uri {
        object.key("S3Uri").string(var_2232);
    }
    if let Some(var_2233) = &input.local_path {
        object.key("LocalPath").string(var_2233);
    }
    if let Some(var_2234) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2234.as_str());
    }
}

pub fn serialize_structure_processing_feature_store_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingFeatureStoreOutput,
) {
    if let Some(var_2235) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_2235);
    }
}

pub fn serialize_structure_s3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSource,
) {
    if let Some(var_2236) = &input.s3_data_type {
        object.key("S3DataType").string(var_2236.as_str());
    }
    if let Some(var_2237) = &input.s3_uri {
        object.key("S3Uri").string(var_2237);
    }
    if let Some(var_2238) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2238.as_str());
    }
    if let Some(var_2239) = &input.attribute_names {
        let mut array_2240 = object.key("AttributeNames").start_array();
        for item_2241 in var_2239 {
            {
                array_2240.value().string(item_2241);
            }
        }
        array_2240.finish();
    }
}

pub fn serialize_structure_file_system_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemDataSource,
) {
    if let Some(var_2242) = &input.file_system_id {
        object.key("FileSystemId").string(var_2242);
    }
    if let Some(var_2243) = &input.file_system_access_mode {
        object.key("FileSystemAccessMode").string(var_2243.as_str());
    }
    if let Some(var_2244) = &input.file_system_type {
        object.key("FileSystemType").string(var_2244.as_str());
    }
    if let Some(var_2245) = &input.directory_path {
        object.key("DirectoryPath").string(var_2245);
    }
}

pub fn serialize_structure_transform_s3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformS3DataSource,
) {
    if let Some(var_2246) = &input.s3_data_type {
        object.key("S3DataType").string(var_2246.as_str());
    }
    if let Some(var_2247) = &input.s3_uri {
        object.key("S3Uri").string(var_2247);
    }
}

pub fn serialize_structure_traffic_routing_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrafficRoutingConfig,
) {
    if let Some(var_2248) = &input.r#type {
        object.key("Type").string(var_2248.as_str());
    }
    if let Some(var_2249) = &input.wait_interval_in_seconds {
        object.key("WaitIntervalInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2249).into()),
        );
    }
    if let Some(var_2250) = &input.canary_size {
        let mut object_2251 = object.key("CanarySize").start_object();
        crate::json_ser::serialize_structure_capacity_size(&mut object_2251, var_2250);
        object_2251.finish();
    }
}

pub fn serialize_structure_alarm(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Alarm,
) {
    if let Some(var_2252) = &input.alarm_name {
        object.key("AlarmName").string(var_2252);
    }
}

pub fn serialize_structure_integer_parameter_range_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRangeSpecification,
) {
    if let Some(var_2253) = &input.min_value {
        object.key("MinValue").string(var_2253);
    }
    if let Some(var_2254) = &input.max_value {
        object.key("MaxValue").string(var_2254);
    }
}

pub fn serialize_structure_continuous_parameter_range_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRangeSpecification,
) {
    if let Some(var_2255) = &input.min_value {
        object.key("MinValue").string(var_2255);
    }
    if let Some(var_2256) = &input.max_value {
        object.key("MaxValue").string(var_2256);
    }
}

pub fn serialize_structure_categorical_parameter_range_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRangeSpecification,
) {
    if let Some(var_2257) = &input.values {
        let mut array_2258 = object.key("Values").start_array();
        for item_2259 in var_2257 {
            {
                array_2258.value().string(item_2259);
            }
        }
        array_2258.finish();
    }
}

pub fn serialize_structure_capacity_size(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacitySize,
) {
    if let Some(var_2260) = &input.r#type {
        object.key("Type").string(var_2260.as_str());
    }
    if let Some(var_2261) = &input.value {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2261).into()),
        );
    }
}
