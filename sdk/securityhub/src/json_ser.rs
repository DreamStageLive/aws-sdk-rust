// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_accept_administrator_invitation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptAdministratorInvitationInput,
) {
    if let Some(var_1) = &input.administrator_id {
        object.key("AdministratorId").string(var_1);
    }
    if let Some(var_2) = &input.invitation_id {
        object.key("InvitationId").string(var_2);
    }
}

pub fn serialize_structure_accept_invitation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptInvitationInput,
) {
    if let Some(var_3) = &input.invitation_id {
        object.key("InvitationId").string(var_3);
    }
    if let Some(var_4) = &input.master_id {
        object.key("MasterId").string(var_4);
    }
}

pub fn serialize_structure_batch_disable_standards_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDisableStandardsInput,
) {
    if let Some(var_5) = &input.standards_subscription_arns {
        let mut array_6 = object.key("StandardsSubscriptionArns").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7);
            }
        }
        array_6.finish();
    }
}

pub fn serialize_structure_batch_enable_standards_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchEnableStandardsInput,
) {
    if let Some(var_8) = &input.standards_subscription_requests {
        let mut array_9 = object.key("StandardsSubscriptionRequests").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_standards_subscription_request(
                    &mut object_11,
                    item_10,
                );
                object_11.finish();
            }
        }
        array_9.finish();
    }
}

pub fn serialize_structure_batch_import_findings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchImportFindingsInput,
) {
    if let Some(var_12) = &input.findings {
        let mut array_13 = object.key("Findings").start_array();
        for item_14 in var_12 {
            {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_aws_security_finding(&mut object_15, item_14);
                object_15.finish();
            }
        }
        array_13.finish();
    }
}

pub fn serialize_structure_batch_update_findings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdateFindingsInput,
) {
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_16) = &input.finding_identifiers {
        let mut array_17 = object.key("FindingIdentifiers").start_array();
        for item_18 in var_16 {
            {
                let mut object_19 = array_17.value().start_object();
                crate::json_ser::serialize_structure_aws_security_finding_identifier(
                    &mut object_19,
                    item_18,
                );
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.note {
        let mut object_21 = object.key("Note").start_object();
        crate::json_ser::serialize_structure_note_update(&mut object_21, var_20);
        object_21.finish();
    }
    if let Some(var_22) = &input.related_findings {
        let mut array_23 = object.key("RelatedFindings").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_related_finding(&mut object_25, item_24);
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.severity {
        let mut object_27 = object.key("Severity").start_object();
        crate::json_ser::serialize_structure_severity_update(&mut object_27, var_26);
        object_27.finish();
    }
    if let Some(var_28) = &input.types {
        let mut array_29 = object.key("Types").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30);
            }
        }
        array_29.finish();
    }
    if let Some(var_31) = &input.user_defined_fields {
        let mut object_32 = object.key("UserDefinedFields").start_object();
        for (key_33, value_34) in var_31 {
            {
                object_32.key(key_33).string(value_34);
            }
        }
        object_32.finish();
    }
    if let Some(var_35) = &input.verification_state {
        object.key("VerificationState").string(var_35.as_str());
    }
    if let Some(var_36) = &input.workflow {
        let mut object_37 = object.key("Workflow").start_object();
        crate::json_ser::serialize_structure_workflow_update(&mut object_37, var_36);
        object_37.finish();
    }
}

pub fn serialize_structure_create_action_target_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActionTargetInput,
) {
    if let Some(var_38) = &input.description {
        object.key("Description").string(var_38);
    }
    if let Some(var_39) = &input.id {
        object.key("Id").string(var_39);
    }
    if let Some(var_40) = &input.name {
        object.key("Name").string(var_40);
    }
}

pub fn serialize_structure_create_insight_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInsightInput,
) {
    if let Some(var_41) = &input.filters {
        let mut object_42 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_aws_security_finding_filters(&mut object_42, var_41);
        object_42.finish();
    }
    if let Some(var_43) = &input.group_by_attribute {
        object.key("GroupByAttribute").string(var_43);
    }
    if let Some(var_44) = &input.name {
        object.key("Name").string(var_44);
    }
}

pub fn serialize_structure_create_members_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMembersInput,
) {
    if let Some(var_45) = &input.account_details {
        let mut array_46 = object.key("AccountDetails").start_array();
        for item_47 in var_45 {
            {
                let mut object_48 = array_46.value().start_object();
                crate::json_ser::serialize_structure_account_details(&mut object_48, item_47);
                object_48.finish();
            }
        }
        array_46.finish();
    }
}

pub fn serialize_structure_decline_invitations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeclineInvitationsInput,
) {
    if let Some(var_49) = &input.account_ids {
        let mut array_50 = object.key("AccountIds").start_array();
        for item_51 in var_49 {
            {
                array_50.value().string(item_51);
            }
        }
        array_50.finish();
    }
}

pub fn serialize_structure_delete_invitations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteInvitationsInput,
) {
    if let Some(var_52) = &input.account_ids {
        let mut array_53 = object.key("AccountIds").start_array();
        for item_54 in var_52 {
            {
                array_53.value().string(item_54);
            }
        }
        array_53.finish();
    }
}

pub fn serialize_structure_delete_members_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMembersInput,
) {
    if let Some(var_55) = &input.account_ids {
        let mut array_56 = object.key("AccountIds").start_array();
        for item_57 in var_55 {
            {
                array_56.value().string(item_57);
            }
        }
        array_56.finish();
    }
}

pub fn serialize_structure_describe_action_targets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActionTargetsInput,
) {
    if let Some(var_58) = &input.action_target_arns {
        let mut array_59 = object.key("ActionTargetArns").start_array();
        for item_60 in var_58 {
            {
                array_59.value().string(item_60);
            }
        }
        array_59.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_61) = &input.next_token {
        object.key("NextToken").string(var_61);
    }
}

pub fn serialize_structure_disable_organization_admin_account_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableOrganizationAdminAccountInput,
) {
    if let Some(var_62) = &input.admin_account_id {
        object.key("AdminAccountId").string(var_62);
    }
}

pub fn serialize_structure_disassociate_members_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateMembersInput,
) {
    if let Some(var_63) = &input.account_ids {
        let mut array_64 = object.key("AccountIds").start_array();
        for item_65 in var_63 {
            {
                array_64.value().string(item_65);
            }
        }
        array_64.finish();
    }
}

pub fn serialize_structure_enable_import_findings_for_product_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableImportFindingsForProductInput,
) {
    if let Some(var_66) = &input.product_arn {
        object.key("ProductArn").string(var_66);
    }
}

pub fn serialize_structure_enable_organization_admin_account_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableOrganizationAdminAccountInput,
) {
    if let Some(var_67) = &input.admin_account_id {
        object.key("AdminAccountId").string(var_67);
    }
}

pub fn serialize_structure_enable_security_hub_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableSecurityHubInput,
) {
    if input.enable_default_standards {
        object
            .key("EnableDefaultStandards")
            .boolean(input.enable_default_standards);
    }
    if let Some(var_68) = &input.tags {
        let mut object_69 = object.key("Tags").start_object();
        for (key_70, value_71) in var_68 {
            {
                object_69.key(key_70).string(value_71);
            }
        }
        object_69.finish();
    }
}

pub fn serialize_structure_get_enabled_standards_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEnabledStandardsInput,
) {
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_72) = &input.next_token {
        object.key("NextToken").string(var_72);
    }
    if let Some(var_73) = &input.standards_subscription_arns {
        let mut array_74 = object.key("StandardsSubscriptionArns").start_array();
        for item_75 in var_73 {
            {
                array_74.value().string(item_75);
            }
        }
        array_74.finish();
    }
}

pub fn serialize_structure_get_findings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFindingsInput,
) {
    if let Some(var_76) = &input.filters {
        let mut object_77 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_aws_security_finding_filters(&mut object_77, var_76);
        object_77.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_78) = &input.next_token {
        object.key("NextToken").string(var_78);
    }
    if let Some(var_79) = &input.sort_criteria {
        let mut array_80 = object.key("SortCriteria").start_array();
        for item_81 in var_79 {
            {
                let mut object_82 = array_80.value().start_object();
                crate::json_ser::serialize_structure_sort_criterion(&mut object_82, item_81);
                object_82.finish();
            }
        }
        array_80.finish();
    }
}

pub fn serialize_structure_get_insights_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInsightsInput,
) {
    if let Some(var_83) = &input.insight_arns {
        let mut array_84 = object.key("InsightArns").start_array();
        for item_85 in var_83 {
            {
                array_84.value().string(item_85);
            }
        }
        array_84.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_86) = &input.next_token {
        object.key("NextToken").string(var_86);
    }
}

pub fn serialize_structure_get_members_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMembersInput,
) {
    if let Some(var_87) = &input.account_ids {
        let mut array_88 = object.key("AccountIds").start_array();
        for item_89 in var_87 {
            {
                array_88.value().string(item_89);
            }
        }
        array_88.finish();
    }
}

pub fn serialize_structure_invite_members_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::InviteMembersInput,
) {
    if let Some(var_90) = &input.account_ids {
        let mut array_91 = object.key("AccountIds").start_array();
        for item_92 in var_90 {
            {
                array_91.value().string(item_92);
            }
        }
        array_91.finish();
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_93) = &input.tags {
        let mut object_94 = object.key("Tags").start_object();
        for (key_95, value_96) in var_93 {
            {
                object_94.key(key_95).string(value_96);
            }
        }
        object_94.finish();
    }
}

pub fn serialize_structure_update_action_target_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateActionTargetInput,
) {
    if let Some(var_97) = &input.description {
        object.key("Description").string(var_97);
    }
    if let Some(var_98) = &input.name {
        object.key("Name").string(var_98);
    }
}

pub fn serialize_structure_update_findings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFindingsInput,
) {
    if let Some(var_99) = &input.filters {
        let mut object_100 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_aws_security_finding_filters(&mut object_100, var_99);
        object_100.finish();
    }
    if let Some(var_101) = &input.note {
        let mut object_102 = object.key("Note").start_object();
        crate::json_ser::serialize_structure_note_update(&mut object_102, var_101);
        object_102.finish();
    }
    if let Some(var_103) = &input.record_state {
        object.key("RecordState").string(var_103.as_str());
    }
}

pub fn serialize_structure_update_insight_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInsightInput,
) {
    if let Some(var_104) = &input.filters {
        let mut object_105 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_aws_security_finding_filters(&mut object_105, var_104);
        object_105.finish();
    }
    if let Some(var_106) = &input.group_by_attribute {
        object.key("GroupByAttribute").string(var_106);
    }
    if let Some(var_107) = &input.name {
        object.key("Name").string(var_107);
    }
}

pub fn serialize_structure_update_organization_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOrganizationConfigurationInput,
) {
    {
        object.key("AutoEnable").boolean(input.auto_enable);
    }
}

pub fn serialize_structure_update_security_hub_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSecurityHubConfigurationInput,
) {
    if input.auto_enable_controls {
        object
            .key("AutoEnableControls")
            .boolean(input.auto_enable_controls);
    }
}

pub fn serialize_structure_update_standards_control_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStandardsControlInput,
) {
    if let Some(var_108) = &input.control_status {
        object.key("ControlStatus").string(var_108.as_str());
    }
    if let Some(var_109) = &input.disabled_reason {
        object.key("DisabledReason").string(var_109);
    }
}

pub fn serialize_structure_standards_subscription_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StandardsSubscriptionRequest,
) {
    if let Some(var_110) = &input.standards_arn {
        object.key("StandardsArn").string(var_110);
    }
    if let Some(var_111) = &input.standards_input {
        let mut object_112 = object.key("StandardsInput").start_object();
        for (key_113, value_114) in var_111 {
            {
                object_112.key(key_113).string(value_114);
            }
        }
        object_112.finish();
    }
}

pub fn serialize_structure_aws_security_finding(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecurityFinding,
) {
    if let Some(var_115) = &input.schema_version {
        object.key("SchemaVersion").string(var_115);
    }
    if let Some(var_116) = &input.id {
        object.key("Id").string(var_116);
    }
    if let Some(var_117) = &input.product_arn {
        object.key("ProductArn").string(var_117);
    }
    if let Some(var_118) = &input.product_name {
        object.key("ProductName").string(var_118);
    }
    if let Some(var_119) = &input.company_name {
        object.key("CompanyName").string(var_119);
    }
    if let Some(var_120) = &input.region {
        object.key("Region").string(var_120);
    }
    if let Some(var_121) = &input.generator_id {
        object.key("GeneratorId").string(var_121);
    }
    if let Some(var_122) = &input.aws_account_id {
        object.key("AwsAccountId").string(var_122);
    }
    if let Some(var_123) = &input.types {
        let mut array_124 = object.key("Types").start_array();
        for item_125 in var_123 {
            {
                array_124.value().string(item_125);
            }
        }
        array_124.finish();
    }
    if let Some(var_126) = &input.first_observed_at {
        object.key("FirstObservedAt").string(var_126);
    }
    if let Some(var_127) = &input.last_observed_at {
        object.key("LastObservedAt").string(var_127);
    }
    if let Some(var_128) = &input.created_at {
        object.key("CreatedAt").string(var_128);
    }
    if let Some(var_129) = &input.updated_at {
        object.key("UpdatedAt").string(var_129);
    }
    if let Some(var_130) = &input.severity {
        let mut object_131 = object.key("Severity").start_object();
        crate::json_ser::serialize_structure_severity(&mut object_131, var_130);
        object_131.finish();
    }
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_132) = &input.title {
        object.key("Title").string(var_132);
    }
    if let Some(var_133) = &input.description {
        object.key("Description").string(var_133);
    }
    if let Some(var_134) = &input.remediation {
        let mut object_135 = object.key("Remediation").start_object();
        crate::json_ser::serialize_structure_remediation(&mut object_135, var_134);
        object_135.finish();
    }
    if let Some(var_136) = &input.source_url {
        object.key("SourceUrl").string(var_136);
    }
    if let Some(var_137) = &input.product_fields {
        let mut object_138 = object.key("ProductFields").start_object();
        for (key_139, value_140) in var_137 {
            {
                object_138.key(key_139).string(value_140);
            }
        }
        object_138.finish();
    }
    if let Some(var_141) = &input.user_defined_fields {
        let mut object_142 = object.key("UserDefinedFields").start_object();
        for (key_143, value_144) in var_141 {
            {
                object_142.key(key_143).string(value_144);
            }
        }
        object_142.finish();
    }
    if let Some(var_145) = &input.malware {
        let mut array_146 = object.key("Malware").start_array();
        for item_147 in var_145 {
            {
                let mut object_148 = array_146.value().start_object();
                crate::json_ser::serialize_structure_malware(&mut object_148, item_147);
                object_148.finish();
            }
        }
        array_146.finish();
    }
    if let Some(var_149) = &input.network {
        let mut object_150 = object.key("Network").start_object();
        crate::json_ser::serialize_structure_network(&mut object_150, var_149);
        object_150.finish();
    }
    if let Some(var_151) = &input.network_path {
        let mut array_152 = object.key("NetworkPath").start_array();
        for item_153 in var_151 {
            {
                let mut object_154 = array_152.value().start_object();
                crate::json_ser::serialize_structure_network_path_component(
                    &mut object_154,
                    item_153,
                );
                object_154.finish();
            }
        }
        array_152.finish();
    }
    if let Some(var_155) = &input.process {
        let mut object_156 = object.key("Process").start_object();
        crate::json_ser::serialize_structure_process_details(&mut object_156, var_155);
        object_156.finish();
    }
    if let Some(var_157) = &input.threat_intel_indicators {
        let mut array_158 = object.key("ThreatIntelIndicators").start_array();
        for item_159 in var_157 {
            {
                let mut object_160 = array_158.value().start_object();
                crate::json_ser::serialize_structure_threat_intel_indicator(
                    &mut object_160,
                    item_159,
                );
                object_160.finish();
            }
        }
        array_158.finish();
    }
    if let Some(var_161) = &input.resources {
        let mut array_162 = object.key("Resources").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_resource(&mut object_164, item_163);
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.compliance {
        let mut object_166 = object.key("Compliance").start_object();
        crate::json_ser::serialize_structure_compliance(&mut object_166, var_165);
        object_166.finish();
    }
    if let Some(var_167) = &input.verification_state {
        object.key("VerificationState").string(var_167.as_str());
    }
    if let Some(var_168) = &input.workflow_state {
        object.key("WorkflowState").string(var_168.as_str());
    }
    if let Some(var_169) = &input.workflow {
        let mut object_170 = object.key("Workflow").start_object();
        crate::json_ser::serialize_structure_workflow(&mut object_170, var_169);
        object_170.finish();
    }
    if let Some(var_171) = &input.record_state {
        object.key("RecordState").string(var_171.as_str());
    }
    if let Some(var_172) = &input.related_findings {
        let mut array_173 = object.key("RelatedFindings").start_array();
        for item_174 in var_172 {
            {
                let mut object_175 = array_173.value().start_object();
                crate::json_ser::serialize_structure_related_finding(&mut object_175, item_174);
                object_175.finish();
            }
        }
        array_173.finish();
    }
    if let Some(var_176) = &input.note {
        let mut object_177 = object.key("Note").start_object();
        crate::json_ser::serialize_structure_note(&mut object_177, var_176);
        object_177.finish();
    }
    if let Some(var_178) = &input.vulnerabilities {
        let mut array_179 = object.key("Vulnerabilities").start_array();
        for item_180 in var_178 {
            {
                let mut object_181 = array_179.value().start_object();
                crate::json_ser::serialize_structure_vulnerability(&mut object_181, item_180);
                object_181.finish();
            }
        }
        array_179.finish();
    }
    if let Some(var_182) = &input.patch_summary {
        let mut object_183 = object.key("PatchSummary").start_object();
        crate::json_ser::serialize_structure_patch_summary(&mut object_183, var_182);
        object_183.finish();
    }
    if let Some(var_184) = &input.action {
        let mut object_185 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_action(&mut object_185, var_184);
        object_185.finish();
    }
    if let Some(var_186) = &input.finding_provider_fields {
        let mut object_187 = object.key("FindingProviderFields").start_object();
        crate::json_ser::serialize_structure_finding_provider_fields(&mut object_187, var_186);
        object_187.finish();
    }
}

pub fn serialize_structure_aws_security_finding_identifier(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecurityFindingIdentifier,
) {
    if let Some(var_188) = &input.id {
        object.key("Id").string(var_188);
    }
    if let Some(var_189) = &input.product_arn {
        object.key("ProductArn").string(var_189);
    }
}

pub fn serialize_structure_note_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NoteUpdate,
) {
    if let Some(var_190) = &input.text {
        object.key("Text").string(var_190);
    }
    if let Some(var_191) = &input.updated_by {
        object.key("UpdatedBy").string(var_191);
    }
}

pub fn serialize_structure_related_finding(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelatedFinding,
) {
    if let Some(var_192) = &input.product_arn {
        object.key("ProductArn").string(var_192);
    }
    if let Some(var_193) = &input.id {
        object.key("Id").string(var_193);
    }
}

pub fn serialize_structure_severity_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SeverityUpdate,
) {
    if input.normalized != 0 {
        object.key("Normalized").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.normalized).into()),
        );
    }
    if input.product != 0.0 {
        object.key("Product").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.product).into()),
        );
    }
    if let Some(var_194) = &input.label {
        object.key("Label").string(var_194.as_str());
    }
}

pub fn serialize_structure_workflow_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkflowUpdate,
) {
    if let Some(var_195) = &input.status {
        object.key("Status").string(var_195.as_str());
    }
}

pub fn serialize_structure_aws_security_finding_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecurityFindingFilters,
) {
    if let Some(var_196) = &input.product_arn {
        let mut array_197 = object.key("ProductArn").start_array();
        for item_198 in var_196 {
            {
                let mut object_199 = array_197.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_199, item_198);
                object_199.finish();
            }
        }
        array_197.finish();
    }
    if let Some(var_200) = &input.aws_account_id {
        let mut array_201 = object.key("AwsAccountId").start_array();
        for item_202 in var_200 {
            {
                let mut object_203 = array_201.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_203, item_202);
                object_203.finish();
            }
        }
        array_201.finish();
    }
    if let Some(var_204) = &input.id {
        let mut array_205 = object.key("Id").start_array();
        for item_206 in var_204 {
            {
                let mut object_207 = array_205.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_207, item_206);
                object_207.finish();
            }
        }
        array_205.finish();
    }
    if let Some(var_208) = &input.generator_id {
        let mut array_209 = object.key("GeneratorId").start_array();
        for item_210 in var_208 {
            {
                let mut object_211 = array_209.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_211, item_210);
                object_211.finish();
            }
        }
        array_209.finish();
    }
    if let Some(var_212) = &input.region {
        let mut array_213 = object.key("Region").start_array();
        for item_214 in var_212 {
            {
                let mut object_215 = array_213.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_215, item_214);
                object_215.finish();
            }
        }
        array_213.finish();
    }
    if let Some(var_216) = &input.r#type {
        let mut array_217 = object.key("Type").start_array();
        for item_218 in var_216 {
            {
                let mut object_219 = array_217.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_219, item_218);
                object_219.finish();
            }
        }
        array_217.finish();
    }
    if let Some(var_220) = &input.first_observed_at {
        let mut array_221 = object.key("FirstObservedAt").start_array();
        for item_222 in var_220 {
            {
                let mut object_223 = array_221.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_223, item_222);
                object_223.finish();
            }
        }
        array_221.finish();
    }
    if let Some(var_224) = &input.last_observed_at {
        let mut array_225 = object.key("LastObservedAt").start_array();
        for item_226 in var_224 {
            {
                let mut object_227 = array_225.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_227, item_226);
                object_227.finish();
            }
        }
        array_225.finish();
    }
    if let Some(var_228) = &input.created_at {
        let mut array_229 = object.key("CreatedAt").start_array();
        for item_230 in var_228 {
            {
                let mut object_231 = array_229.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_231, item_230);
                object_231.finish();
            }
        }
        array_229.finish();
    }
    if let Some(var_232) = &input.updated_at {
        let mut array_233 = object.key("UpdatedAt").start_array();
        for item_234 in var_232 {
            {
                let mut object_235 = array_233.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_235, item_234);
                object_235.finish();
            }
        }
        array_233.finish();
    }
    if let Some(var_236) = &input.severity_product {
        let mut array_237 = object.key("SeverityProduct").start_array();
        for item_238 in var_236 {
            {
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_239, item_238);
                object_239.finish();
            }
        }
        array_237.finish();
    }
    if let Some(var_240) = &input.severity_normalized {
        let mut array_241 = object.key("SeverityNormalized").start_array();
        for item_242 in var_240 {
            {
                let mut object_243 = array_241.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_243, item_242);
                object_243.finish();
            }
        }
        array_241.finish();
    }
    if let Some(var_244) = &input.severity_label {
        let mut array_245 = object.key("SeverityLabel").start_array();
        for item_246 in var_244 {
            {
                let mut object_247 = array_245.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_247, item_246);
                object_247.finish();
            }
        }
        array_245.finish();
    }
    if let Some(var_248) = &input.confidence {
        let mut array_249 = object.key("Confidence").start_array();
        for item_250 in var_248 {
            {
                let mut object_251 = array_249.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_251, item_250);
                object_251.finish();
            }
        }
        array_249.finish();
    }
    if let Some(var_252) = &input.criticality {
        let mut array_253 = object.key("Criticality").start_array();
        for item_254 in var_252 {
            {
                let mut object_255 = array_253.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_255, item_254);
                object_255.finish();
            }
        }
        array_253.finish();
    }
    if let Some(var_256) = &input.title {
        let mut array_257 = object.key("Title").start_array();
        for item_258 in var_256 {
            {
                let mut object_259 = array_257.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_259, item_258);
                object_259.finish();
            }
        }
        array_257.finish();
    }
    if let Some(var_260) = &input.description {
        let mut array_261 = object.key("Description").start_array();
        for item_262 in var_260 {
            {
                let mut object_263 = array_261.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_263, item_262);
                object_263.finish();
            }
        }
        array_261.finish();
    }
    if let Some(var_264) = &input.recommendation_text {
        let mut array_265 = object.key("RecommendationText").start_array();
        for item_266 in var_264 {
            {
                let mut object_267 = array_265.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_267, item_266);
                object_267.finish();
            }
        }
        array_265.finish();
    }
    if let Some(var_268) = &input.source_url {
        let mut array_269 = object.key("SourceUrl").start_array();
        for item_270 in var_268 {
            {
                let mut object_271 = array_269.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_271, item_270);
                object_271.finish();
            }
        }
        array_269.finish();
    }
    if let Some(var_272) = &input.product_fields {
        let mut array_273 = object.key("ProductFields").start_array();
        for item_274 in var_272 {
            {
                let mut object_275 = array_273.value().start_object();
                crate::json_ser::serialize_structure_map_filter(&mut object_275, item_274);
                object_275.finish();
            }
        }
        array_273.finish();
    }
    if let Some(var_276) = &input.product_name {
        let mut array_277 = object.key("ProductName").start_array();
        for item_278 in var_276 {
            {
                let mut object_279 = array_277.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_279, item_278);
                object_279.finish();
            }
        }
        array_277.finish();
    }
    if let Some(var_280) = &input.company_name {
        let mut array_281 = object.key("CompanyName").start_array();
        for item_282 in var_280 {
            {
                let mut object_283 = array_281.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_283, item_282);
                object_283.finish();
            }
        }
        array_281.finish();
    }
    if let Some(var_284) = &input.user_defined_fields {
        let mut array_285 = object.key("UserDefinedFields").start_array();
        for item_286 in var_284 {
            {
                let mut object_287 = array_285.value().start_object();
                crate::json_ser::serialize_structure_map_filter(&mut object_287, item_286);
                object_287.finish();
            }
        }
        array_285.finish();
    }
    if let Some(var_288) = &input.malware_name {
        let mut array_289 = object.key("MalwareName").start_array();
        for item_290 in var_288 {
            {
                let mut object_291 = array_289.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_291, item_290);
                object_291.finish();
            }
        }
        array_289.finish();
    }
    if let Some(var_292) = &input.malware_type {
        let mut array_293 = object.key("MalwareType").start_array();
        for item_294 in var_292 {
            {
                let mut object_295 = array_293.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_295, item_294);
                object_295.finish();
            }
        }
        array_293.finish();
    }
    if let Some(var_296) = &input.malware_path {
        let mut array_297 = object.key("MalwarePath").start_array();
        for item_298 in var_296 {
            {
                let mut object_299 = array_297.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_299, item_298);
                object_299.finish();
            }
        }
        array_297.finish();
    }
    if let Some(var_300) = &input.malware_state {
        let mut array_301 = object.key("MalwareState").start_array();
        for item_302 in var_300 {
            {
                let mut object_303 = array_301.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_303, item_302);
                object_303.finish();
            }
        }
        array_301.finish();
    }
    if let Some(var_304) = &input.network_direction {
        let mut array_305 = object.key("NetworkDirection").start_array();
        for item_306 in var_304 {
            {
                let mut object_307 = array_305.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_307, item_306);
                object_307.finish();
            }
        }
        array_305.finish();
    }
    if let Some(var_308) = &input.network_protocol {
        let mut array_309 = object.key("NetworkProtocol").start_array();
        for item_310 in var_308 {
            {
                let mut object_311 = array_309.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_311, item_310);
                object_311.finish();
            }
        }
        array_309.finish();
    }
    if let Some(var_312) = &input.network_source_ip_v4 {
        let mut array_313 = object.key("NetworkSourceIpV4").start_array();
        for item_314 in var_312 {
            {
                let mut object_315 = array_313.value().start_object();
                crate::json_ser::serialize_structure_ip_filter(&mut object_315, item_314);
                object_315.finish();
            }
        }
        array_313.finish();
    }
    if let Some(var_316) = &input.network_source_ip_v6 {
        let mut array_317 = object.key("NetworkSourceIpV6").start_array();
        for item_318 in var_316 {
            {
                let mut object_319 = array_317.value().start_object();
                crate::json_ser::serialize_structure_ip_filter(&mut object_319, item_318);
                object_319.finish();
            }
        }
        array_317.finish();
    }
    if let Some(var_320) = &input.network_source_port {
        let mut array_321 = object.key("NetworkSourcePort").start_array();
        for item_322 in var_320 {
            {
                let mut object_323 = array_321.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_323, item_322);
                object_323.finish();
            }
        }
        array_321.finish();
    }
    if let Some(var_324) = &input.network_source_domain {
        let mut array_325 = object.key("NetworkSourceDomain").start_array();
        for item_326 in var_324 {
            {
                let mut object_327 = array_325.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_327, item_326);
                object_327.finish();
            }
        }
        array_325.finish();
    }
    if let Some(var_328) = &input.network_source_mac {
        let mut array_329 = object.key("NetworkSourceMac").start_array();
        for item_330 in var_328 {
            {
                let mut object_331 = array_329.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_331, item_330);
                object_331.finish();
            }
        }
        array_329.finish();
    }
    if let Some(var_332) = &input.network_destination_ip_v4 {
        let mut array_333 = object.key("NetworkDestinationIpV4").start_array();
        for item_334 in var_332 {
            {
                let mut object_335 = array_333.value().start_object();
                crate::json_ser::serialize_structure_ip_filter(&mut object_335, item_334);
                object_335.finish();
            }
        }
        array_333.finish();
    }
    if let Some(var_336) = &input.network_destination_ip_v6 {
        let mut array_337 = object.key("NetworkDestinationIpV6").start_array();
        for item_338 in var_336 {
            {
                let mut object_339 = array_337.value().start_object();
                crate::json_ser::serialize_structure_ip_filter(&mut object_339, item_338);
                object_339.finish();
            }
        }
        array_337.finish();
    }
    if let Some(var_340) = &input.network_destination_port {
        let mut array_341 = object.key("NetworkDestinationPort").start_array();
        for item_342 in var_340 {
            {
                let mut object_343 = array_341.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_343, item_342);
                object_343.finish();
            }
        }
        array_341.finish();
    }
    if let Some(var_344) = &input.network_destination_domain {
        let mut array_345 = object.key("NetworkDestinationDomain").start_array();
        for item_346 in var_344 {
            {
                let mut object_347 = array_345.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_347, item_346);
                object_347.finish();
            }
        }
        array_345.finish();
    }
    if let Some(var_348) = &input.process_name {
        let mut array_349 = object.key("ProcessName").start_array();
        for item_350 in var_348 {
            {
                let mut object_351 = array_349.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_351, item_350);
                object_351.finish();
            }
        }
        array_349.finish();
    }
    if let Some(var_352) = &input.process_path {
        let mut array_353 = object.key("ProcessPath").start_array();
        for item_354 in var_352 {
            {
                let mut object_355 = array_353.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_355, item_354);
                object_355.finish();
            }
        }
        array_353.finish();
    }
    if let Some(var_356) = &input.process_pid {
        let mut array_357 = object.key("ProcessPid").start_array();
        for item_358 in var_356 {
            {
                let mut object_359 = array_357.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_359, item_358);
                object_359.finish();
            }
        }
        array_357.finish();
    }
    if let Some(var_360) = &input.process_parent_pid {
        let mut array_361 = object.key("ProcessParentPid").start_array();
        for item_362 in var_360 {
            {
                let mut object_363 = array_361.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_363, item_362);
                object_363.finish();
            }
        }
        array_361.finish();
    }
    if let Some(var_364) = &input.process_launched_at {
        let mut array_365 = object.key("ProcessLaunchedAt").start_array();
        for item_366 in var_364 {
            {
                let mut object_367 = array_365.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_367, item_366);
                object_367.finish();
            }
        }
        array_365.finish();
    }
    if let Some(var_368) = &input.process_terminated_at {
        let mut array_369 = object.key("ProcessTerminatedAt").start_array();
        for item_370 in var_368 {
            {
                let mut object_371 = array_369.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_371, item_370);
                object_371.finish();
            }
        }
        array_369.finish();
    }
    if let Some(var_372) = &input.threat_intel_indicator_type {
        let mut array_373 = object.key("ThreatIntelIndicatorType").start_array();
        for item_374 in var_372 {
            {
                let mut object_375 = array_373.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_375, item_374);
                object_375.finish();
            }
        }
        array_373.finish();
    }
    if let Some(var_376) = &input.threat_intel_indicator_value {
        let mut array_377 = object.key("ThreatIntelIndicatorValue").start_array();
        for item_378 in var_376 {
            {
                let mut object_379 = array_377.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_379, item_378);
                object_379.finish();
            }
        }
        array_377.finish();
    }
    if let Some(var_380) = &input.threat_intel_indicator_category {
        let mut array_381 = object.key("ThreatIntelIndicatorCategory").start_array();
        for item_382 in var_380 {
            {
                let mut object_383 = array_381.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_383, item_382);
                object_383.finish();
            }
        }
        array_381.finish();
    }
    if let Some(var_384) = &input.threat_intel_indicator_last_observed_at {
        let mut array_385 = object
            .key("ThreatIntelIndicatorLastObservedAt")
            .start_array();
        for item_386 in var_384 {
            {
                let mut object_387 = array_385.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_387, item_386);
                object_387.finish();
            }
        }
        array_385.finish();
    }
    if let Some(var_388) = &input.threat_intel_indicator_source {
        let mut array_389 = object.key("ThreatIntelIndicatorSource").start_array();
        for item_390 in var_388 {
            {
                let mut object_391 = array_389.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_391, item_390);
                object_391.finish();
            }
        }
        array_389.finish();
    }
    if let Some(var_392) = &input.threat_intel_indicator_source_url {
        let mut array_393 = object.key("ThreatIntelIndicatorSourceUrl").start_array();
        for item_394 in var_392 {
            {
                let mut object_395 = array_393.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_395, item_394);
                object_395.finish();
            }
        }
        array_393.finish();
    }
    if let Some(var_396) = &input.resource_type {
        let mut array_397 = object.key("ResourceType").start_array();
        for item_398 in var_396 {
            {
                let mut object_399 = array_397.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_399, item_398);
                object_399.finish();
            }
        }
        array_397.finish();
    }
    if let Some(var_400) = &input.resource_id {
        let mut array_401 = object.key("ResourceId").start_array();
        for item_402 in var_400 {
            {
                let mut object_403 = array_401.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_403, item_402);
                object_403.finish();
            }
        }
        array_401.finish();
    }
    if let Some(var_404) = &input.resource_partition {
        let mut array_405 = object.key("ResourcePartition").start_array();
        for item_406 in var_404 {
            {
                let mut object_407 = array_405.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_407, item_406);
                object_407.finish();
            }
        }
        array_405.finish();
    }
    if let Some(var_408) = &input.resource_region {
        let mut array_409 = object.key("ResourceRegion").start_array();
        for item_410 in var_408 {
            {
                let mut object_411 = array_409.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_411, item_410);
                object_411.finish();
            }
        }
        array_409.finish();
    }
    if let Some(var_412) = &input.resource_tags {
        let mut array_413 = object.key("ResourceTags").start_array();
        for item_414 in var_412 {
            {
                let mut object_415 = array_413.value().start_object();
                crate::json_ser::serialize_structure_map_filter(&mut object_415, item_414);
                object_415.finish();
            }
        }
        array_413.finish();
    }
    if let Some(var_416) = &input.resource_aws_ec2_instance_type {
        let mut array_417 = object.key("ResourceAwsEc2InstanceType").start_array();
        for item_418 in var_416 {
            {
                let mut object_419 = array_417.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_419, item_418);
                object_419.finish();
            }
        }
        array_417.finish();
    }
    if let Some(var_420) = &input.resource_aws_ec2_instance_image_id {
        let mut array_421 = object.key("ResourceAwsEc2InstanceImageId").start_array();
        for item_422 in var_420 {
            {
                let mut object_423 = array_421.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_423, item_422);
                object_423.finish();
            }
        }
        array_421.finish();
    }
    if let Some(var_424) = &input.resource_aws_ec2_instance_ip_v4_addresses {
        let mut array_425 = object
            .key("ResourceAwsEc2InstanceIpV4Addresses")
            .start_array();
        for item_426 in var_424 {
            {
                let mut object_427 = array_425.value().start_object();
                crate::json_ser::serialize_structure_ip_filter(&mut object_427, item_426);
                object_427.finish();
            }
        }
        array_425.finish();
    }
    if let Some(var_428) = &input.resource_aws_ec2_instance_ip_v6_addresses {
        let mut array_429 = object
            .key("ResourceAwsEc2InstanceIpV6Addresses")
            .start_array();
        for item_430 in var_428 {
            {
                let mut object_431 = array_429.value().start_object();
                crate::json_ser::serialize_structure_ip_filter(&mut object_431, item_430);
                object_431.finish();
            }
        }
        array_429.finish();
    }
    if let Some(var_432) = &input.resource_aws_ec2_instance_key_name {
        let mut array_433 = object.key("ResourceAwsEc2InstanceKeyName").start_array();
        for item_434 in var_432 {
            {
                let mut object_435 = array_433.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_435, item_434);
                object_435.finish();
            }
        }
        array_433.finish();
    }
    if let Some(var_436) = &input.resource_aws_ec2_instance_iam_instance_profile_arn {
        let mut array_437 = object
            .key("ResourceAwsEc2InstanceIamInstanceProfileArn")
            .start_array();
        for item_438 in var_436 {
            {
                let mut object_439 = array_437.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_439, item_438);
                object_439.finish();
            }
        }
        array_437.finish();
    }
    if let Some(var_440) = &input.resource_aws_ec2_instance_vpc_id {
        let mut array_441 = object.key("ResourceAwsEc2InstanceVpcId").start_array();
        for item_442 in var_440 {
            {
                let mut object_443 = array_441.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_443, item_442);
                object_443.finish();
            }
        }
        array_441.finish();
    }
    if let Some(var_444) = &input.resource_aws_ec2_instance_subnet_id {
        let mut array_445 = object.key("ResourceAwsEc2InstanceSubnetId").start_array();
        for item_446 in var_444 {
            {
                let mut object_447 = array_445.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_447, item_446);
                object_447.finish();
            }
        }
        array_445.finish();
    }
    if let Some(var_448) = &input.resource_aws_ec2_instance_launched_at {
        let mut array_449 = object.key("ResourceAwsEc2InstanceLaunchedAt").start_array();
        for item_450 in var_448 {
            {
                let mut object_451 = array_449.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_451, item_450);
                object_451.finish();
            }
        }
        array_449.finish();
    }
    if let Some(var_452) = &input.resource_aws_s3_bucket_owner_id {
        let mut array_453 = object.key("ResourceAwsS3BucketOwnerId").start_array();
        for item_454 in var_452 {
            {
                let mut object_455 = array_453.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_455, item_454);
                object_455.finish();
            }
        }
        array_453.finish();
    }
    if let Some(var_456) = &input.resource_aws_s3_bucket_owner_name {
        let mut array_457 = object.key("ResourceAwsS3BucketOwnerName").start_array();
        for item_458 in var_456 {
            {
                let mut object_459 = array_457.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_459, item_458);
                object_459.finish();
            }
        }
        array_457.finish();
    }
    if let Some(var_460) = &input.resource_aws_iam_access_key_user_name {
        let mut array_461 = object.key("ResourceAwsIamAccessKeyUserName").start_array();
        for item_462 in var_460 {
            {
                let mut object_463 = array_461.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_463, item_462);
                object_463.finish();
            }
        }
        array_461.finish();
    }
    if let Some(var_464) = &input.resource_aws_iam_access_key_principal_name {
        let mut array_465 = object
            .key("ResourceAwsIamAccessKeyPrincipalName")
            .start_array();
        for item_466 in var_464 {
            {
                let mut object_467 = array_465.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_467, item_466);
                object_467.finish();
            }
        }
        array_465.finish();
    }
    if let Some(var_468) = &input.resource_aws_iam_access_key_status {
        let mut array_469 = object.key("ResourceAwsIamAccessKeyStatus").start_array();
        for item_470 in var_468 {
            {
                let mut object_471 = array_469.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_471, item_470);
                object_471.finish();
            }
        }
        array_469.finish();
    }
    if let Some(var_472) = &input.resource_aws_iam_access_key_created_at {
        let mut array_473 = object.key("ResourceAwsIamAccessKeyCreatedAt").start_array();
        for item_474 in var_472 {
            {
                let mut object_475 = array_473.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_475, item_474);
                object_475.finish();
            }
        }
        array_473.finish();
    }
    if let Some(var_476) = &input.resource_aws_iam_user_user_name {
        let mut array_477 = object.key("ResourceAwsIamUserUserName").start_array();
        for item_478 in var_476 {
            {
                let mut object_479 = array_477.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_479, item_478);
                object_479.finish();
            }
        }
        array_477.finish();
    }
    if let Some(var_480) = &input.resource_container_name {
        let mut array_481 = object.key("ResourceContainerName").start_array();
        for item_482 in var_480 {
            {
                let mut object_483 = array_481.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_483, item_482);
                object_483.finish();
            }
        }
        array_481.finish();
    }
    if let Some(var_484) = &input.resource_container_image_id {
        let mut array_485 = object.key("ResourceContainerImageId").start_array();
        for item_486 in var_484 {
            {
                let mut object_487 = array_485.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_487, item_486);
                object_487.finish();
            }
        }
        array_485.finish();
    }
    if let Some(var_488) = &input.resource_container_image_name {
        let mut array_489 = object.key("ResourceContainerImageName").start_array();
        for item_490 in var_488 {
            {
                let mut object_491 = array_489.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_491, item_490);
                object_491.finish();
            }
        }
        array_489.finish();
    }
    if let Some(var_492) = &input.resource_container_launched_at {
        let mut array_493 = object.key("ResourceContainerLaunchedAt").start_array();
        for item_494 in var_492 {
            {
                let mut object_495 = array_493.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_495, item_494);
                object_495.finish();
            }
        }
        array_493.finish();
    }
    if let Some(var_496) = &input.resource_details_other {
        let mut array_497 = object.key("ResourceDetailsOther").start_array();
        for item_498 in var_496 {
            {
                let mut object_499 = array_497.value().start_object();
                crate::json_ser::serialize_structure_map_filter(&mut object_499, item_498);
                object_499.finish();
            }
        }
        array_497.finish();
    }
    if let Some(var_500) = &input.compliance_status {
        let mut array_501 = object.key("ComplianceStatus").start_array();
        for item_502 in var_500 {
            {
                let mut object_503 = array_501.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_503, item_502);
                object_503.finish();
            }
        }
        array_501.finish();
    }
    if let Some(var_504) = &input.verification_state {
        let mut array_505 = object.key("VerificationState").start_array();
        for item_506 in var_504 {
            {
                let mut object_507 = array_505.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_507, item_506);
                object_507.finish();
            }
        }
        array_505.finish();
    }
    if let Some(var_508) = &input.workflow_state {
        let mut array_509 = object.key("WorkflowState").start_array();
        for item_510 in var_508 {
            {
                let mut object_511 = array_509.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_511, item_510);
                object_511.finish();
            }
        }
        array_509.finish();
    }
    if let Some(var_512) = &input.workflow_status {
        let mut array_513 = object.key("WorkflowStatus").start_array();
        for item_514 in var_512 {
            {
                let mut object_515 = array_513.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_515, item_514);
                object_515.finish();
            }
        }
        array_513.finish();
    }
    if let Some(var_516) = &input.record_state {
        let mut array_517 = object.key("RecordState").start_array();
        for item_518 in var_516 {
            {
                let mut object_519 = array_517.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_519, item_518);
                object_519.finish();
            }
        }
        array_517.finish();
    }
    if let Some(var_520) = &input.related_findings_product_arn {
        let mut array_521 = object.key("RelatedFindingsProductArn").start_array();
        for item_522 in var_520 {
            {
                let mut object_523 = array_521.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_523, item_522);
                object_523.finish();
            }
        }
        array_521.finish();
    }
    if let Some(var_524) = &input.related_findings_id {
        let mut array_525 = object.key("RelatedFindingsId").start_array();
        for item_526 in var_524 {
            {
                let mut object_527 = array_525.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_527, item_526);
                object_527.finish();
            }
        }
        array_525.finish();
    }
    if let Some(var_528) = &input.note_text {
        let mut array_529 = object.key("NoteText").start_array();
        for item_530 in var_528 {
            {
                let mut object_531 = array_529.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_531, item_530);
                object_531.finish();
            }
        }
        array_529.finish();
    }
    if let Some(var_532) = &input.note_updated_at {
        let mut array_533 = object.key("NoteUpdatedAt").start_array();
        for item_534 in var_532 {
            {
                let mut object_535 = array_533.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_535, item_534);
                object_535.finish();
            }
        }
        array_533.finish();
    }
    if let Some(var_536) = &input.note_updated_by {
        let mut array_537 = object.key("NoteUpdatedBy").start_array();
        for item_538 in var_536 {
            {
                let mut object_539 = array_537.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_539, item_538);
                object_539.finish();
            }
        }
        array_537.finish();
    }
    if let Some(var_540) = &input.keyword {
        let mut array_541 = object.key("Keyword").start_array();
        for item_542 in var_540 {
            {
                let mut object_543 = array_541.value().start_object();
                crate::json_ser::serialize_structure_keyword_filter(&mut object_543, item_542);
                object_543.finish();
            }
        }
        array_541.finish();
    }
    if let Some(var_544) = &input.finding_provider_fields_confidence {
        let mut array_545 = object.key("FindingProviderFieldsConfidence").start_array();
        for item_546 in var_544 {
            {
                let mut object_547 = array_545.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_547, item_546);
                object_547.finish();
            }
        }
        array_545.finish();
    }
    if let Some(var_548) = &input.finding_provider_fields_criticality {
        let mut array_549 = object.key("FindingProviderFieldsCriticality").start_array();
        for item_550 in var_548 {
            {
                let mut object_551 = array_549.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_551, item_550);
                object_551.finish();
            }
        }
        array_549.finish();
    }
    if let Some(var_552) = &input.finding_provider_fields_related_findings_id {
        let mut array_553 = object
            .key("FindingProviderFieldsRelatedFindingsId")
            .start_array();
        for item_554 in var_552 {
            {
                let mut object_555 = array_553.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_555, item_554);
                object_555.finish();
            }
        }
        array_553.finish();
    }
    if let Some(var_556) = &input.finding_provider_fields_related_findings_product_arn {
        let mut array_557 = object
            .key("FindingProviderFieldsRelatedFindingsProductArn")
            .start_array();
        for item_558 in var_556 {
            {
                let mut object_559 = array_557.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_559, item_558);
                object_559.finish();
            }
        }
        array_557.finish();
    }
    if let Some(var_560) = &input.finding_provider_fields_severity_label {
        let mut array_561 = object
            .key("FindingProviderFieldsSeverityLabel")
            .start_array();
        for item_562 in var_560 {
            {
                let mut object_563 = array_561.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_563, item_562);
                object_563.finish();
            }
        }
        array_561.finish();
    }
    if let Some(var_564) = &input.finding_provider_fields_severity_original {
        let mut array_565 = object
            .key("FindingProviderFieldsSeverityOriginal")
            .start_array();
        for item_566 in var_564 {
            {
                let mut object_567 = array_565.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_567, item_566);
                object_567.finish();
            }
        }
        array_565.finish();
    }
    if let Some(var_568) = &input.finding_provider_fields_types {
        let mut array_569 = object.key("FindingProviderFieldsTypes").start_array();
        for item_570 in var_568 {
            {
                let mut object_571 = array_569.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_571, item_570);
                object_571.finish();
            }
        }
        array_569.finish();
    }
}

pub fn serialize_structure_account_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountDetails,
) {
    if let Some(var_572) = &input.account_id {
        object.key("AccountId").string(var_572);
    }
    if let Some(var_573) = &input.email {
        object.key("Email").string(var_573);
    }
}

pub fn serialize_structure_sort_criterion(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriterion,
) {
    if let Some(var_574) = &input.field {
        object.key("Field").string(var_574);
    }
    if let Some(var_575) = &input.sort_order {
        object.key("SortOrder").string(var_575.as_str());
    }
}

pub fn serialize_structure_severity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Severity,
) {
    if input.product != 0.0 {
        object.key("Product").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.product).into()),
        );
    }
    if let Some(var_576) = &input.label {
        object.key("Label").string(var_576.as_str());
    }
    if input.normalized != 0 {
        object.key("Normalized").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.normalized).into()),
        );
    }
    if let Some(var_577) = &input.original {
        object.key("Original").string(var_577);
    }
}

pub fn serialize_structure_remediation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Remediation,
) {
    if let Some(var_578) = &input.recommendation {
        let mut object_579 = object.key("Recommendation").start_object();
        crate::json_ser::serialize_structure_recommendation(&mut object_579, var_578);
        object_579.finish();
    }
}

pub fn serialize_structure_malware(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Malware,
) {
    if let Some(var_580) = &input.name {
        object.key("Name").string(var_580);
    }
    if let Some(var_581) = &input.r#type {
        object.key("Type").string(var_581.as_str());
    }
    if let Some(var_582) = &input.path {
        object.key("Path").string(var_582);
    }
    if let Some(var_583) = &input.state {
        object.key("State").string(var_583.as_str());
    }
}

pub fn serialize_structure_network(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Network,
) {
    if let Some(var_584) = &input.direction {
        object.key("Direction").string(var_584.as_str());
    }
    if let Some(var_585) = &input.protocol {
        object.key("Protocol").string(var_585);
    }
    if let Some(var_586) = &input.open_port_range {
        let mut object_587 = object.key("OpenPortRange").start_object();
        crate::json_ser::serialize_structure_port_range(&mut object_587, var_586);
        object_587.finish();
    }
    if let Some(var_588) = &input.source_ip_v4 {
        object.key("SourceIpV4").string(var_588);
    }
    if let Some(var_589) = &input.source_ip_v6 {
        object.key("SourceIpV6").string(var_589);
    }
    if input.source_port != 0 {
        object.key("SourcePort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.source_port).into()),
        );
    }
    if let Some(var_590) = &input.source_domain {
        object.key("SourceDomain").string(var_590);
    }
    if let Some(var_591) = &input.source_mac {
        object.key("SourceMac").string(var_591);
    }
    if let Some(var_592) = &input.destination_ip_v4 {
        object.key("DestinationIpV4").string(var_592);
    }
    if let Some(var_593) = &input.destination_ip_v6 {
        object.key("DestinationIpV6").string(var_593);
    }
    if input.destination_port != 0 {
        object.key("DestinationPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.destination_port).into()),
        );
    }
    if let Some(var_594) = &input.destination_domain {
        object.key("DestinationDomain").string(var_594);
    }
}

pub fn serialize_structure_network_path_component(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkPathComponent,
) {
    if let Some(var_595) = &input.component_id {
        object.key("ComponentId").string(var_595);
    }
    if let Some(var_596) = &input.component_type {
        object.key("ComponentType").string(var_596);
    }
    if let Some(var_597) = &input.egress {
        let mut object_598 = object.key("Egress").start_object();
        crate::json_ser::serialize_structure_network_header(&mut object_598, var_597);
        object_598.finish();
    }
    if let Some(var_599) = &input.ingress {
        let mut object_600 = object.key("Ingress").start_object();
        crate::json_ser::serialize_structure_network_header(&mut object_600, var_599);
        object_600.finish();
    }
}

pub fn serialize_structure_process_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessDetails,
) {
    if let Some(var_601) = &input.name {
        object.key("Name").string(var_601);
    }
    if let Some(var_602) = &input.path {
        object.key("Path").string(var_602);
    }
    if input.pid != 0 {
        object.key("Pid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.pid).into()),
        );
    }
    if input.parent_pid != 0 {
        object.key("ParentPid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.parent_pid).into()),
        );
    }
    if let Some(var_603) = &input.launched_at {
        object.key("LaunchedAt").string(var_603);
    }
    if let Some(var_604) = &input.terminated_at {
        object.key("TerminatedAt").string(var_604);
    }
}

pub fn serialize_structure_threat_intel_indicator(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThreatIntelIndicator,
) {
    if let Some(var_605) = &input.r#type {
        object.key("Type").string(var_605.as_str());
    }
    if let Some(var_606) = &input.value {
        object.key("Value").string(var_606);
    }
    if let Some(var_607) = &input.category {
        object.key("Category").string(var_607.as_str());
    }
    if let Some(var_608) = &input.last_observed_at {
        object.key("LastObservedAt").string(var_608);
    }
    if let Some(var_609) = &input.source {
        object.key("Source").string(var_609);
    }
    if let Some(var_610) = &input.source_url {
        object.key("SourceUrl").string(var_610);
    }
}

pub fn serialize_structure_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Resource,
) {
    if let Some(var_611) = &input.r#type {
        object.key("Type").string(var_611);
    }
    if let Some(var_612) = &input.id {
        object.key("Id").string(var_612);
    }
    if let Some(var_613) = &input.partition {
        object.key("Partition").string(var_613.as_str());
    }
    if let Some(var_614) = &input.region {
        object.key("Region").string(var_614);
    }
    if let Some(var_615) = &input.resource_role {
        object.key("ResourceRole").string(var_615);
    }
    if let Some(var_616) = &input.tags {
        let mut object_617 = object.key("Tags").start_object();
        for (key_618, value_619) in var_616 {
            {
                object_617.key(key_618).string(value_619);
            }
        }
        object_617.finish();
    }
    if let Some(var_620) = &input.data_classification {
        let mut object_621 = object.key("DataClassification").start_object();
        crate::json_ser::serialize_structure_data_classification_details(&mut object_621, var_620);
        object_621.finish();
    }
    if let Some(var_622) = &input.details {
        let mut object_623 = object.key("Details").start_object();
        crate::json_ser::serialize_structure_resource_details(&mut object_623, var_622);
        object_623.finish();
    }
}

pub fn serialize_structure_compliance(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Compliance,
) {
    if let Some(var_624) = &input.status {
        object.key("Status").string(var_624.as_str());
    }
    if let Some(var_625) = &input.related_requirements {
        let mut array_626 = object.key("RelatedRequirements").start_array();
        for item_627 in var_625 {
            {
                array_626.value().string(item_627);
            }
        }
        array_626.finish();
    }
    if let Some(var_628) = &input.status_reasons {
        let mut array_629 = object.key("StatusReasons").start_array();
        for item_630 in var_628 {
            {
                let mut object_631 = array_629.value().start_object();
                crate::json_ser::serialize_structure_status_reason(&mut object_631, item_630);
                object_631.finish();
            }
        }
        array_629.finish();
    }
}

pub fn serialize_structure_workflow(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Workflow,
) {
    if let Some(var_632) = &input.status {
        object.key("Status").string(var_632.as_str());
    }
}

pub fn serialize_structure_note(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Note,
) {
    if let Some(var_633) = &input.text {
        object.key("Text").string(var_633);
    }
    if let Some(var_634) = &input.updated_by {
        object.key("UpdatedBy").string(var_634);
    }
    if let Some(var_635) = &input.updated_at {
        object.key("UpdatedAt").string(var_635);
    }
}

pub fn serialize_structure_vulnerability(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Vulnerability,
) {
    if let Some(var_636) = &input.id {
        object.key("Id").string(var_636);
    }
    if let Some(var_637) = &input.vulnerable_packages {
        let mut array_638 = object.key("VulnerablePackages").start_array();
        for item_639 in var_637 {
            {
                let mut object_640 = array_638.value().start_object();
                crate::json_ser::serialize_structure_software_package(&mut object_640, item_639);
                object_640.finish();
            }
        }
        array_638.finish();
    }
    if let Some(var_641) = &input.cvss {
        let mut array_642 = object.key("Cvss").start_array();
        for item_643 in var_641 {
            {
                let mut object_644 = array_642.value().start_object();
                crate::json_ser::serialize_structure_cvss(&mut object_644, item_643);
                object_644.finish();
            }
        }
        array_642.finish();
    }
    if let Some(var_645) = &input.related_vulnerabilities {
        let mut array_646 = object.key("RelatedVulnerabilities").start_array();
        for item_647 in var_645 {
            {
                array_646.value().string(item_647);
            }
        }
        array_646.finish();
    }
    if let Some(var_648) = &input.vendor {
        let mut object_649 = object.key("Vendor").start_object();
        crate::json_ser::serialize_structure_vulnerability_vendor(&mut object_649, var_648);
        object_649.finish();
    }
    if let Some(var_650) = &input.reference_urls {
        let mut array_651 = object.key("ReferenceUrls").start_array();
        for item_652 in var_650 {
            {
                array_651.value().string(item_652);
            }
        }
        array_651.finish();
    }
}

pub fn serialize_structure_patch_summary(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchSummary,
) {
    if let Some(var_653) = &input.id {
        object.key("Id").string(var_653);
    }
    if input.installed_count != 0 {
        object.key("InstalledCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.installed_count).into()),
        );
    }
    if input.missing_count != 0 {
        object.key("MissingCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.missing_count).into()),
        );
    }
    if input.failed_count != 0 {
        object.key("FailedCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.failed_count).into()),
        );
    }
    if input.installed_other_count != 0 {
        object.key("InstalledOtherCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.installed_other_count).into()),
        );
    }
    if input.installed_rejected_count != 0 {
        object.key("InstalledRejectedCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.installed_rejected_count).into()),
        );
    }
    if input.installed_pending_reboot != 0 {
        object.key("InstalledPendingReboot").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.installed_pending_reboot).into()),
        );
    }
    if let Some(var_654) = &input.operation_start_time {
        object.key("OperationStartTime").string(var_654);
    }
    if let Some(var_655) = &input.operation_end_time {
        object.key("OperationEndTime").string(var_655);
    }
    if let Some(var_656) = &input.reboot_option {
        object.key("RebootOption").string(var_656);
    }
    if let Some(var_657) = &input.operation {
        object.key("Operation").string(var_657);
    }
}

pub fn serialize_structure_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) {
    if let Some(var_658) = &input.action_type {
        object.key("ActionType").string(var_658);
    }
    if let Some(var_659) = &input.network_connection_action {
        let mut object_660 = object.key("NetworkConnectionAction").start_object();
        crate::json_ser::serialize_structure_network_connection_action(&mut object_660, var_659);
        object_660.finish();
    }
    if let Some(var_661) = &input.aws_api_call_action {
        let mut object_662 = object.key("AwsApiCallAction").start_object();
        crate::json_ser::serialize_structure_aws_api_call_action(&mut object_662, var_661);
        object_662.finish();
    }
    if let Some(var_663) = &input.dns_request_action {
        let mut object_664 = object.key("DnsRequestAction").start_object();
        crate::json_ser::serialize_structure_dns_request_action(&mut object_664, var_663);
        object_664.finish();
    }
    if let Some(var_665) = &input.port_probe_action {
        let mut object_666 = object.key("PortProbeAction").start_object();
        crate::json_ser::serialize_structure_port_probe_action(&mut object_666, var_665);
        object_666.finish();
    }
}

pub fn serialize_structure_finding_provider_fields(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindingProviderFields,
) {
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_667) = &input.related_findings {
        let mut array_668 = object.key("RelatedFindings").start_array();
        for item_669 in var_667 {
            {
                let mut object_670 = array_668.value().start_object();
                crate::json_ser::serialize_structure_related_finding(&mut object_670, item_669);
                object_670.finish();
            }
        }
        array_668.finish();
    }
    if let Some(var_671) = &input.severity {
        let mut object_672 = object.key("Severity").start_object();
        crate::json_ser::serialize_structure_finding_provider_severity(&mut object_672, var_671);
        object_672.finish();
    }
    if let Some(var_673) = &input.types {
        let mut array_674 = object.key("Types").start_array();
        for item_675 in var_673 {
            {
                array_674.value().string(item_675);
            }
        }
        array_674.finish();
    }
}

pub fn serialize_structure_string_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringFilter,
) {
    if let Some(var_676) = &input.value {
        object.key("Value").string(var_676);
    }
    if let Some(var_677) = &input.comparison {
        object.key("Comparison").string(var_677.as_str());
    }
}

pub fn serialize_structure_date_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateFilter,
) {
    if let Some(var_678) = &input.start {
        object.key("Start").string(var_678);
    }
    if let Some(var_679) = &input.end {
        object.key("End").string(var_679);
    }
    if let Some(var_680) = &input.date_range {
        let mut object_681 = object.key("DateRange").start_object();
        crate::json_ser::serialize_structure_date_range(&mut object_681, var_680);
        object_681.finish();
    }
}

pub fn serialize_structure_number_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NumberFilter,
) {
    if input.gte != 0.0 {
        object.key("Gte").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.gte).into()),
        );
    }
    if input.lte != 0.0 {
        object.key("Lte").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.lte).into()),
        );
    }
    if input.eq != 0.0 {
        object.key("Eq").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.eq).into()),
        );
    }
}

pub fn serialize_structure_map_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MapFilter,
) {
    if let Some(var_682) = &input.key {
        object.key("Key").string(var_682);
    }
    if let Some(var_683) = &input.value {
        object.key("Value").string(var_683);
    }
    if let Some(var_684) = &input.comparison {
        object.key("Comparison").string(var_684.as_str());
    }
}

pub fn serialize_structure_ip_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpFilter,
) {
    if let Some(var_685) = &input.cidr {
        object.key("Cidr").string(var_685);
    }
}

pub fn serialize_structure_keyword_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeywordFilter,
) {
    if let Some(var_686) = &input.value {
        object.key("Value").string(var_686);
    }
}

pub fn serialize_structure_recommendation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Recommendation,
) {
    if let Some(var_687) = &input.text {
        object.key("Text").string(var_687);
    }
    if let Some(var_688) = &input.url {
        object.key("Url").string(var_688);
    }
}

pub fn serialize_structure_port_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRange,
) {
    if input.begin != 0 {
        object.key("Begin").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.begin).into()),
        );
    }
    if input.end != 0 {
        object.key("End").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.end).into()),
        );
    }
}

pub fn serialize_structure_network_header(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkHeader,
) {
    if let Some(var_689) = &input.protocol {
        object.key("Protocol").string(var_689);
    }
    if let Some(var_690) = &input.destination {
        let mut object_691 = object.key("Destination").start_object();
        crate::json_ser::serialize_structure_network_path_component_details(
            &mut object_691,
            var_690,
        );
        object_691.finish();
    }
    if let Some(var_692) = &input.source {
        let mut object_693 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_network_path_component_details(
            &mut object_693,
            var_692,
        );
        object_693.finish();
    }
}

pub fn serialize_structure_data_classification_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataClassificationDetails,
) {
    if let Some(var_694) = &input.detailed_results_location {
        object.key("DetailedResultsLocation").string(var_694);
    }
    if let Some(var_695) = &input.result {
        let mut object_696 = object.key("Result").start_object();
        crate::json_ser::serialize_structure_classification_result(&mut object_696, var_695);
        object_696.finish();
    }
}

pub fn serialize_structure_resource_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDetails,
) {
    if let Some(var_697) = &input.aws_auto_scaling_auto_scaling_group {
        let mut object_698 = object.key("AwsAutoScalingAutoScalingGroup").start_object();
        crate::json_ser::serialize_structure_aws_auto_scaling_auto_scaling_group_details(
            &mut object_698,
            var_697,
        );
        object_698.finish();
    }
    if let Some(var_699) = &input.aws_code_build_project {
        let mut object_700 = object.key("AwsCodeBuildProject").start_object();
        crate::json_ser::serialize_structure_aws_code_build_project_details(
            &mut object_700,
            var_699,
        );
        object_700.finish();
    }
    if let Some(var_701) = &input.aws_cloud_front_distribution {
        let mut object_702 = object.key("AwsCloudFrontDistribution").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_details(
            &mut object_702,
            var_701,
        );
        object_702.finish();
    }
    if let Some(var_703) = &input.aws_ec2_instance {
        let mut object_704 = object.key("AwsEc2Instance").start_object();
        crate::json_ser::serialize_structure_aws_ec2_instance_details(&mut object_704, var_703);
        object_704.finish();
    }
    if let Some(var_705) = &input.aws_ec2_network_interface {
        let mut object_706 = object.key("AwsEc2NetworkInterface").start_object();
        crate::json_ser::serialize_structure_aws_ec2_network_interface_details(
            &mut object_706,
            var_705,
        );
        object_706.finish();
    }
    if let Some(var_707) = &input.aws_ec2_security_group {
        let mut object_708 = object.key("AwsEc2SecurityGroup").start_object();
        crate::json_ser::serialize_structure_aws_ec2_security_group_details(
            &mut object_708,
            var_707,
        );
        object_708.finish();
    }
    if let Some(var_709) = &input.aws_ec2_volume {
        let mut object_710 = object.key("AwsEc2Volume").start_object();
        crate::json_ser::serialize_structure_aws_ec2_volume_details(&mut object_710, var_709);
        object_710.finish();
    }
    if let Some(var_711) = &input.aws_ec2_vpc {
        let mut object_712 = object.key("AwsEc2Vpc").start_object();
        crate::json_ser::serialize_structure_aws_ec2_vpc_details(&mut object_712, var_711);
        object_712.finish();
    }
    if let Some(var_713) = &input.aws_ec2_eip {
        let mut object_714 = object.key("AwsEc2Eip").start_object();
        crate::json_ser::serialize_structure_aws_ec2_eip_details(&mut object_714, var_713);
        object_714.finish();
    }
    if let Some(var_715) = &input.aws_ec2_subnet {
        let mut object_716 = object.key("AwsEc2Subnet").start_object();
        crate::json_ser::serialize_structure_aws_ec2_subnet_details(&mut object_716, var_715);
        object_716.finish();
    }
    if let Some(var_717) = &input.aws_ec2_network_acl {
        let mut object_718 = object.key("AwsEc2NetworkAcl").start_object();
        crate::json_ser::serialize_structure_aws_ec2_network_acl_details(&mut object_718, var_717);
        object_718.finish();
    }
    if let Some(var_719) = &input.aws_elbv2_load_balancer {
        let mut object_720 = object.key("AwsElbv2LoadBalancer").start_object();
        crate::json_ser::serialize_structure_aws_elbv2_load_balancer_details(
            &mut object_720,
            var_719,
        );
        object_720.finish();
    }
    if let Some(var_721) = &input.aws_elastic_beanstalk_environment {
        let mut object_722 = object.key("AwsElasticBeanstalkEnvironment").start_object();
        crate::json_ser::serialize_structure_aws_elastic_beanstalk_environment_details(
            &mut object_722,
            var_721,
        );
        object_722.finish();
    }
    if let Some(var_723) = &input.aws_elasticsearch_domain {
        let mut object_724 = object.key("AwsElasticsearchDomain").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_details(
            &mut object_724,
            var_723,
        );
        object_724.finish();
    }
    if let Some(var_725) = &input.aws_s3_bucket {
        let mut object_726 = object.key("AwsS3Bucket").start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_details(&mut object_726, var_725);
        object_726.finish();
    }
    if let Some(var_727) = &input.aws_s3_account_public_access_block {
        let mut object_728 = object.key("AwsS3AccountPublicAccessBlock").start_object();
        crate::json_ser::serialize_structure_aws_s3_account_public_access_block_details(
            &mut object_728,
            var_727,
        );
        object_728.finish();
    }
    if let Some(var_729) = &input.aws_s3_object {
        let mut object_730 = object.key("AwsS3Object").start_object();
        crate::json_ser::serialize_structure_aws_s3_object_details(&mut object_730, var_729);
        object_730.finish();
    }
    if let Some(var_731) = &input.aws_secrets_manager_secret {
        let mut object_732 = object.key("AwsSecretsManagerSecret").start_object();
        crate::json_ser::serialize_structure_aws_secrets_manager_secret_details(
            &mut object_732,
            var_731,
        );
        object_732.finish();
    }
    if let Some(var_733) = &input.aws_iam_access_key {
        let mut object_734 = object.key("AwsIamAccessKey").start_object();
        crate::json_ser::serialize_structure_aws_iam_access_key_details(&mut object_734, var_733);
        object_734.finish();
    }
    if let Some(var_735) = &input.aws_iam_user {
        let mut object_736 = object.key("AwsIamUser").start_object();
        crate::json_ser::serialize_structure_aws_iam_user_details(&mut object_736, var_735);
        object_736.finish();
    }
    if let Some(var_737) = &input.aws_iam_policy {
        let mut object_738 = object.key("AwsIamPolicy").start_object();
        crate::json_ser::serialize_structure_aws_iam_policy_details(&mut object_738, var_737);
        object_738.finish();
    }
    if let Some(var_739) = &input.aws_api_gateway_v2_stage {
        let mut object_740 = object.key("AwsApiGatewayV2Stage").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_v2_stage_details(
            &mut object_740,
            var_739,
        );
        object_740.finish();
    }
    if let Some(var_741) = &input.aws_api_gateway_v2_api {
        let mut object_742 = object.key("AwsApiGatewayV2Api").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_v2_api_details(
            &mut object_742,
            var_741,
        );
        object_742.finish();
    }
    if let Some(var_743) = &input.aws_dynamo_db_table {
        let mut object_744 = object.key("AwsDynamoDbTable").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_details(&mut object_744, var_743);
        object_744.finish();
    }
    if let Some(var_745) = &input.aws_api_gateway_stage {
        let mut object_746 = object.key("AwsApiGatewayStage").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_stage_details(
            &mut object_746,
            var_745,
        );
        object_746.finish();
    }
    if let Some(var_747) = &input.aws_api_gateway_rest_api {
        let mut object_748 = object.key("AwsApiGatewayRestApi").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_rest_api_details(
            &mut object_748,
            var_747,
        );
        object_748.finish();
    }
    if let Some(var_749) = &input.aws_cloud_trail_trail {
        let mut object_750 = object.key("AwsCloudTrailTrail").start_object();
        crate::json_ser::serialize_structure_aws_cloud_trail_trail_details(
            &mut object_750,
            var_749,
        );
        object_750.finish();
    }
    if let Some(var_751) = &input.aws_ssm_patch_compliance {
        let mut object_752 = object.key("AwsSsmPatchCompliance").start_object();
        crate::json_ser::serialize_structure_aws_ssm_patch_compliance_details(
            &mut object_752,
            var_751,
        );
        object_752.finish();
    }
    if let Some(var_753) = &input.aws_certificate_manager_certificate {
        let mut object_754 = object
            .key("AwsCertificateManagerCertificate")
            .start_object();
        crate::json_ser::serialize_structure_aws_certificate_manager_certificate_details(
            &mut object_754,
            var_753,
        );
        object_754.finish();
    }
    if let Some(var_755) = &input.aws_redshift_cluster {
        let mut object_756 = object.key("AwsRedshiftCluster").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_details(&mut object_756, var_755);
        object_756.finish();
    }
    if let Some(var_757) = &input.aws_elb_load_balancer {
        let mut object_758 = object.key("AwsElbLoadBalancer").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_details(
            &mut object_758,
            var_757,
        );
        object_758.finish();
    }
    if let Some(var_759) = &input.aws_iam_group {
        let mut object_760 = object.key("AwsIamGroup").start_object();
        crate::json_ser::serialize_structure_aws_iam_group_details(&mut object_760, var_759);
        object_760.finish();
    }
    if let Some(var_761) = &input.aws_iam_role {
        let mut object_762 = object.key("AwsIamRole").start_object();
        crate::json_ser::serialize_structure_aws_iam_role_details(&mut object_762, var_761);
        object_762.finish();
    }
    if let Some(var_763) = &input.aws_kms_key {
        let mut object_764 = object.key("AwsKmsKey").start_object();
        crate::json_ser::serialize_structure_aws_kms_key_details(&mut object_764, var_763);
        object_764.finish();
    }
    if let Some(var_765) = &input.aws_lambda_function {
        let mut object_766 = object.key("AwsLambdaFunction").start_object();
        crate::json_ser::serialize_structure_aws_lambda_function_details(&mut object_766, var_765);
        object_766.finish();
    }
    if let Some(var_767) = &input.aws_lambda_layer_version {
        let mut object_768 = object.key("AwsLambdaLayerVersion").start_object();
        crate::json_ser::serialize_structure_aws_lambda_layer_version_details(
            &mut object_768,
            var_767,
        );
        object_768.finish();
    }
    if let Some(var_769) = &input.aws_rds_db_instance {
        let mut object_770 = object.key("AwsRdsDbInstance").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_instance_details(&mut object_770, var_769);
        object_770.finish();
    }
    if let Some(var_771) = &input.aws_sns_topic {
        let mut object_772 = object.key("AwsSnsTopic").start_object();
        crate::json_ser::serialize_structure_aws_sns_topic_details(&mut object_772, var_771);
        object_772.finish();
    }
    if let Some(var_773) = &input.aws_sqs_queue {
        let mut object_774 = object.key("AwsSqsQueue").start_object();
        crate::json_ser::serialize_structure_aws_sqs_queue_details(&mut object_774, var_773);
        object_774.finish();
    }
    if let Some(var_775) = &input.aws_waf_web_acl {
        let mut object_776 = object.key("AwsWafWebAcl").start_object();
        crate::json_ser::serialize_structure_aws_waf_web_acl_details(&mut object_776, var_775);
        object_776.finish();
    }
    if let Some(var_777) = &input.aws_rds_db_snapshot {
        let mut object_778 = object.key("AwsRdsDbSnapshot").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_snapshot_details(&mut object_778, var_777);
        object_778.finish();
    }
    if let Some(var_779) = &input.aws_rds_db_cluster_snapshot {
        let mut object_780 = object.key("AwsRdsDbClusterSnapshot").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_cluster_snapshot_details(
            &mut object_780,
            var_779,
        );
        object_780.finish();
    }
    if let Some(var_781) = &input.aws_rds_db_cluster {
        let mut object_782 = object.key("AwsRdsDbCluster").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_cluster_details(&mut object_782, var_781);
        object_782.finish();
    }
    if let Some(var_783) = &input.aws_ecs_cluster {
        let mut object_784 = object.key("AwsEcsCluster").start_object();
        crate::json_ser::serialize_structure_aws_ecs_cluster_details(&mut object_784, var_783);
        object_784.finish();
    }
    if let Some(var_785) = &input.aws_ecs_task_definition {
        let mut object_786 = object.key("AwsEcsTaskDefinition").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_details(
            &mut object_786,
            var_785,
        );
        object_786.finish();
    }
    if let Some(var_787) = &input.container {
        let mut object_788 = object.key("Container").start_object();
        crate::json_ser::serialize_structure_container_details(&mut object_788, var_787);
        object_788.finish();
    }
    if let Some(var_789) = &input.other {
        let mut object_790 = object.key("Other").start_object();
        for (key_791, value_792) in var_789 {
            {
                object_790.key(key_791).string(value_792);
            }
        }
        object_790.finish();
    }
    if let Some(var_793) = &input.aws_rds_event_subscription {
        let mut object_794 = object.key("AwsRdsEventSubscription").start_object();
        crate::json_ser::serialize_structure_aws_rds_event_subscription_details(
            &mut object_794,
            var_793,
        );
        object_794.finish();
    }
    if let Some(var_795) = &input.aws_ecs_service {
        let mut object_796 = object.key("AwsEcsService").start_object();
        crate::json_ser::serialize_structure_aws_ecs_service_details(&mut object_796, var_795);
        object_796.finish();
    }
}

pub fn serialize_structure_status_reason(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatusReason,
) {
    if let Some(var_797) = &input.reason_code {
        object.key("ReasonCode").string(var_797);
    }
    if let Some(var_798) = &input.description {
        object.key("Description").string(var_798);
    }
}

pub fn serialize_structure_software_package(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SoftwarePackage,
) {
    if let Some(var_799) = &input.name {
        object.key("Name").string(var_799);
    }
    if let Some(var_800) = &input.version {
        object.key("Version").string(var_800);
    }
    if let Some(var_801) = &input.epoch {
        object.key("Epoch").string(var_801);
    }
    if let Some(var_802) = &input.release {
        object.key("Release").string(var_802);
    }
    if let Some(var_803) = &input.architecture {
        object.key("Architecture").string(var_803);
    }
}

pub fn serialize_structure_cvss(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Cvss,
) {
    if let Some(var_804) = &input.version {
        object.key("Version").string(var_804);
    }
    if input.base_score != 0.0 {
        object.key("BaseScore").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.base_score).into()),
        );
    }
    if let Some(var_805) = &input.base_vector {
        object.key("BaseVector").string(var_805);
    }
}

pub fn serialize_structure_vulnerability_vendor(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VulnerabilityVendor,
) {
    if let Some(var_806) = &input.name {
        object.key("Name").string(var_806);
    }
    if let Some(var_807) = &input.url {
        object.key("Url").string(var_807);
    }
    if let Some(var_808) = &input.vendor_severity {
        object.key("VendorSeverity").string(var_808);
    }
    if let Some(var_809) = &input.vendor_created_at {
        object.key("VendorCreatedAt").string(var_809);
    }
    if let Some(var_810) = &input.vendor_updated_at {
        object.key("VendorUpdatedAt").string(var_810);
    }
}

pub fn serialize_structure_network_connection_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConnectionAction,
) {
    if let Some(var_811) = &input.connection_direction {
        object.key("ConnectionDirection").string(var_811);
    }
    if let Some(var_812) = &input.remote_ip_details {
        let mut object_813 = object.key("RemoteIpDetails").start_object();
        crate::json_ser::serialize_structure_action_remote_ip_details(&mut object_813, var_812);
        object_813.finish();
    }
    if let Some(var_814) = &input.remote_port_details {
        let mut object_815 = object.key("RemotePortDetails").start_object();
        crate::json_ser::serialize_structure_action_remote_port_details(&mut object_815, var_814);
        object_815.finish();
    }
    if let Some(var_816) = &input.local_port_details {
        let mut object_817 = object.key("LocalPortDetails").start_object();
        crate::json_ser::serialize_structure_action_local_port_details(&mut object_817, var_816);
        object_817.finish();
    }
    if let Some(var_818) = &input.protocol {
        object.key("Protocol").string(var_818);
    }
    if input.blocked {
        object.key("Blocked").boolean(input.blocked);
    }
}

pub fn serialize_structure_aws_api_call_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiCallAction,
) {
    if let Some(var_819) = &input.api {
        object.key("Api").string(var_819);
    }
    if let Some(var_820) = &input.service_name {
        object.key("ServiceName").string(var_820);
    }
    if let Some(var_821) = &input.caller_type {
        object.key("CallerType").string(var_821);
    }
    if let Some(var_822) = &input.remote_ip_details {
        let mut object_823 = object.key("RemoteIpDetails").start_object();
        crate::json_ser::serialize_structure_action_remote_ip_details(&mut object_823, var_822);
        object_823.finish();
    }
    if let Some(var_824) = &input.domain_details {
        let mut object_825 = object.key("DomainDetails").start_object();
        crate::json_ser::serialize_structure_aws_api_call_action_domain_details(
            &mut object_825,
            var_824,
        );
        object_825.finish();
    }
    if let Some(var_826) = &input.affected_resources {
        let mut object_827 = object.key("AffectedResources").start_object();
        for (key_828, value_829) in var_826 {
            {
                object_827.key(key_828).string(value_829);
            }
        }
        object_827.finish();
    }
    if let Some(var_830) = &input.first_seen {
        object.key("FirstSeen").string(var_830);
    }
    if let Some(var_831) = &input.last_seen {
        object.key("LastSeen").string(var_831);
    }
}

pub fn serialize_structure_dns_request_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DnsRequestAction,
) {
    if let Some(var_832) = &input.domain {
        object.key("Domain").string(var_832);
    }
    if let Some(var_833) = &input.protocol {
        object.key("Protocol").string(var_833);
    }
    if input.blocked {
        object.key("Blocked").boolean(input.blocked);
    }
}

pub fn serialize_structure_port_probe_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortProbeAction,
) {
    if let Some(var_834) = &input.port_probe_details {
        let mut array_835 = object.key("PortProbeDetails").start_array();
        for item_836 in var_834 {
            {
                let mut object_837 = array_835.value().start_object();
                crate::json_ser::serialize_structure_port_probe_detail(&mut object_837, item_836);
                object_837.finish();
            }
        }
        array_835.finish();
    }
    if input.blocked {
        object.key("Blocked").boolean(input.blocked);
    }
}

pub fn serialize_structure_finding_provider_severity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindingProviderSeverity,
) {
    if let Some(var_838) = &input.label {
        object.key("Label").string(var_838.as_str());
    }
    if let Some(var_839) = &input.original {
        object.key("Original").string(var_839);
    }
}

pub fn serialize_structure_date_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateRange,
) {
    if input.value != 0 {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.value).into()),
        );
    }
    if let Some(var_840) = &input.unit {
        object.key("Unit").string(var_840.as_str());
    }
}

pub fn serialize_structure_network_path_component_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkPathComponentDetails,
) {
    if let Some(var_841) = &input.address {
        let mut array_842 = object.key("Address").start_array();
        for item_843 in var_841 {
            {
                array_842.value().string(item_843);
            }
        }
        array_842.finish();
    }
    if let Some(var_844) = &input.port_ranges {
        let mut array_845 = object.key("PortRanges").start_array();
        for item_846 in var_844 {
            {
                let mut object_847 = array_845.value().start_object();
                crate::json_ser::serialize_structure_port_range(&mut object_847, item_846);
                object_847.finish();
            }
        }
        array_845.finish();
    }
}

pub fn serialize_structure_classification_result(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClassificationResult,
) {
    if let Some(var_848) = &input.mime_type {
        object.key("MimeType").string(var_848);
    }
    if input.size_classified != 0 {
        object.key("SizeClassified").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.size_classified).into()),
        );
    }
    if input.additional_occurrences {
        object
            .key("AdditionalOccurrences")
            .boolean(input.additional_occurrences);
    }
    if let Some(var_849) = &input.status {
        let mut object_850 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_classification_status(&mut object_850, var_849);
        object_850.finish();
    }
    if let Some(var_851) = &input.sensitive_data {
        let mut array_852 = object.key("SensitiveData").start_array();
        for item_853 in var_851 {
            {
                let mut object_854 = array_852.value().start_object();
                crate::json_ser::serialize_structure_sensitive_data_result(
                    &mut object_854,
                    item_853,
                );
                object_854.finish();
            }
        }
        array_852.finish();
    }
    if let Some(var_855) = &input.custom_data_identifiers {
        let mut object_856 = object.key("CustomDataIdentifiers").start_object();
        crate::json_ser::serialize_structure_custom_data_identifiers_result(
            &mut object_856,
            var_855,
        );
        object_856.finish();
    }
}

pub fn serialize_structure_aws_auto_scaling_auto_scaling_group_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupDetails,
) {
    if let Some(var_857) = &input.launch_configuration_name {
        object.key("LaunchConfigurationName").string(var_857);
    }
    if let Some(var_858) = &input.load_balancer_names {
        let mut array_859 = object.key("LoadBalancerNames").start_array();
        for item_860 in var_858 {
            {
                array_859.value().string(item_860);
            }
        }
        array_859.finish();
    }
    if let Some(var_861) = &input.health_check_type {
        object.key("HealthCheckType").string(var_861);
    }
    if input.health_check_grace_period != 0 {
        object.key("HealthCheckGracePeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.health_check_grace_period).into()),
        );
    }
    if let Some(var_862) = &input.created_time {
        object.key("CreatedTime").string(var_862);
    }
}

pub fn serialize_structure_aws_code_build_project_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectDetails,
) {
    if let Some(var_863) = &input.encryption_key {
        object.key("EncryptionKey").string(var_863);
    }
    if let Some(var_864) = &input.environment {
        let mut object_865 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_aws_code_build_project_environment(
            &mut object_865,
            var_864,
        );
        object_865.finish();
    }
    if let Some(var_866) = &input.name {
        object.key("Name").string(var_866);
    }
    if let Some(var_867) = &input.source {
        let mut object_868 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_aws_code_build_project_source(
            &mut object_868,
            var_867,
        );
        object_868.finish();
    }
    if let Some(var_869) = &input.service_role {
        object.key("ServiceRole").string(var_869);
    }
    if let Some(var_870) = &input.vpc_config {
        let mut object_871 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_aws_code_build_project_vpc_config(
            &mut object_871,
            var_870,
        );
        object_871.finish();
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionDetails,
) {
    if let Some(var_872) = &input.cache_behaviors {
        let mut object_873 = object.key("CacheBehaviors").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_cache_behaviors(
            &mut object_873,
            var_872,
        );
        object_873.finish();
    }
    if let Some(var_874) = &input.default_cache_behavior {
        let mut object_875 = object.key("DefaultCacheBehavior").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_default_cache_behavior(
            &mut object_875,
            var_874,
        );
        object_875.finish();
    }
    if let Some(var_876) = &input.default_root_object {
        object.key("DefaultRootObject").string(var_876);
    }
    if let Some(var_877) = &input.domain_name {
        object.key("DomainName").string(var_877);
    }
    if let Some(var_878) = &input.e_tag {
        object.key("ETag").string(var_878);
    }
    if let Some(var_879) = &input.last_modified_time {
        object.key("LastModifiedTime").string(var_879);
    }
    if let Some(var_880) = &input.logging {
        let mut object_881 = object.key("Logging").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_logging(
            &mut object_881,
            var_880,
        );
        object_881.finish();
    }
    if let Some(var_882) = &input.origins {
        let mut object_883 = object.key("Origins").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_origins(
            &mut object_883,
            var_882,
        );
        object_883.finish();
    }
    if let Some(var_884) = &input.origin_groups {
        let mut object_885 = object.key("OriginGroups").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_origin_groups(
            &mut object_885,
            var_884,
        );
        object_885.finish();
    }
    if let Some(var_886) = &input.status {
        object.key("Status").string(var_886);
    }
    if let Some(var_887) = &input.web_acl_id {
        object.key("WebAclId").string(var_887);
    }
}

pub fn serialize_structure_aws_ec2_instance_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2InstanceDetails,
) {
    if let Some(var_888) = &input.r#type {
        object.key("Type").string(var_888);
    }
    if let Some(var_889) = &input.image_id {
        object.key("ImageId").string(var_889);
    }
    if let Some(var_890) = &input.ip_v4_addresses {
        let mut array_891 = object.key("IpV4Addresses").start_array();
        for item_892 in var_890 {
            {
                array_891.value().string(item_892);
            }
        }
        array_891.finish();
    }
    if let Some(var_893) = &input.ip_v6_addresses {
        let mut array_894 = object.key("IpV6Addresses").start_array();
        for item_895 in var_893 {
            {
                array_894.value().string(item_895);
            }
        }
        array_894.finish();
    }
    if let Some(var_896) = &input.key_name {
        object.key("KeyName").string(var_896);
    }
    if let Some(var_897) = &input.iam_instance_profile_arn {
        object.key("IamInstanceProfileArn").string(var_897);
    }
    if let Some(var_898) = &input.vpc_id {
        object.key("VpcId").string(var_898);
    }
    if let Some(var_899) = &input.subnet_id {
        object.key("SubnetId").string(var_899);
    }
    if let Some(var_900) = &input.launched_at {
        object.key("LaunchedAt").string(var_900);
    }
    if let Some(var_901) = &input.network_interfaces {
        let mut array_902 = object.key("NetworkInterfaces").start_array();
        for item_903 in var_901 {
            {
                let mut object_904 = array_902.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_instance_network_interfaces_details(
                    &mut object_904,
                    item_903,
                );
                object_904.finish();
            }
        }
        array_902.finish();
    }
}

pub fn serialize_structure_aws_ec2_network_interface_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceDetails,
) {
    if let Some(var_905) = &input.attachment {
        let mut object_906 = object.key("Attachment").start_object();
        crate::json_ser::serialize_structure_aws_ec2_network_interface_attachment(
            &mut object_906,
            var_905,
        );
        object_906.finish();
    }
    if let Some(var_907) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_907);
    }
    if let Some(var_908) = &input.security_groups {
        let mut array_909 = object.key("SecurityGroups").start_array();
        for item_910 in var_908 {
            {
                let mut object_911 = array_909.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_network_interface_security_group(
                    &mut object_911,
                    item_910,
                );
                object_911.finish();
            }
        }
        array_909.finish();
    }
    if input.source_dest_check {
        object
            .key("SourceDestCheck")
            .boolean(input.source_dest_check);
    }
    if let Some(var_912) = &input.ip_v6_addresses {
        let mut array_913 = object.key("IpV6Addresses").start_array();
        for item_914 in var_912 {
            {
                let mut object_915 = array_913.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_network_interface_ip_v6_address_detail(
                    &mut object_915,
                    item_914,
                );
                object_915.finish();
            }
        }
        array_913.finish();
    }
    if let Some(var_916) = &input.private_ip_addresses {
        let mut array_917 = object.key("PrivateIpAddresses").start_array();
        for item_918 in var_916 {
            {
                let mut object_919 = array_917.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_network_interface_private_ip_address_detail(&mut object_919, item_918);
                object_919.finish();
            }
        }
        array_917.finish();
    }
    if let Some(var_920) = &input.public_dns_name {
        object.key("PublicDnsName").string(var_920);
    }
    if let Some(var_921) = &input.public_ip {
        object.key("PublicIp").string(var_921);
    }
}

pub fn serialize_structure_aws_ec2_security_group_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupDetails,
) {
    if let Some(var_922) = &input.group_name {
        object.key("GroupName").string(var_922);
    }
    if let Some(var_923) = &input.group_id {
        object.key("GroupId").string(var_923);
    }
    if let Some(var_924) = &input.owner_id {
        object.key("OwnerId").string(var_924);
    }
    if let Some(var_925) = &input.vpc_id {
        object.key("VpcId").string(var_925);
    }
    if let Some(var_926) = &input.ip_permissions {
        let mut array_927 = object.key("IpPermissions").start_array();
        for item_928 in var_926 {
            {
                let mut object_929 = array_927.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_security_group_ip_permission(
                    &mut object_929,
                    item_928,
                );
                object_929.finish();
            }
        }
        array_927.finish();
    }
    if let Some(var_930) = &input.ip_permissions_egress {
        let mut array_931 = object.key("IpPermissionsEgress").start_array();
        for item_932 in var_930 {
            {
                let mut object_933 = array_931.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_security_group_ip_permission(
                    &mut object_933,
                    item_932,
                );
                object_933.finish();
            }
        }
        array_931.finish();
    }
}

pub fn serialize_structure_aws_ec2_volume_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VolumeDetails,
) {
    if let Some(var_934) = &input.create_time {
        object.key("CreateTime").string(var_934);
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if input.size != 0 {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.size).into()),
        );
    }
    if let Some(var_935) = &input.snapshot_id {
        object.key("SnapshotId").string(var_935);
    }
    if let Some(var_936) = &input.status {
        object.key("Status").string(var_936);
    }
    if let Some(var_937) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_937);
    }
    if let Some(var_938) = &input.attachments {
        let mut array_939 = object.key("Attachments").start_array();
        for item_940 in var_938 {
            {
                let mut object_941 = array_939.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_volume_attachment(
                    &mut object_941,
                    item_940,
                );
                object_941.finish();
            }
        }
        array_939.finish();
    }
}

pub fn serialize_structure_aws_ec2_vpc_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpcDetails,
) {
    if let Some(var_942) = &input.cidr_block_association_set {
        let mut array_943 = object.key("CidrBlockAssociationSet").start_array();
        for item_944 in var_942 {
            {
                let mut object_945 = array_943.value().start_object();
                crate::json_ser::serialize_structure_cidr_block_association(
                    &mut object_945,
                    item_944,
                );
                object_945.finish();
            }
        }
        array_943.finish();
    }
    if let Some(var_946) = &input.ipv6_cidr_block_association_set {
        let mut array_947 = object.key("Ipv6CidrBlockAssociationSet").start_array();
        for item_948 in var_946 {
            {
                let mut object_949 = array_947.value().start_object();
                crate::json_ser::serialize_structure_ipv6_cidr_block_association(
                    &mut object_949,
                    item_948,
                );
                object_949.finish();
            }
        }
        array_947.finish();
    }
    if let Some(var_950) = &input.dhcp_options_id {
        object.key("DhcpOptionsId").string(var_950);
    }
    if let Some(var_951) = &input.state {
        object.key("State").string(var_951);
    }
}

pub fn serialize_structure_aws_ec2_eip_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2EipDetails,
) {
    if let Some(var_952) = &input.instance_id {
        object.key("InstanceId").string(var_952);
    }
    if let Some(var_953) = &input.public_ip {
        object.key("PublicIp").string(var_953);
    }
    if let Some(var_954) = &input.allocation_id {
        object.key("AllocationId").string(var_954);
    }
    if let Some(var_955) = &input.association_id {
        object.key("AssociationId").string(var_955);
    }
    if let Some(var_956) = &input.domain {
        object.key("Domain").string(var_956);
    }
    if let Some(var_957) = &input.public_ipv4_pool {
        object.key("PublicIpv4Pool").string(var_957);
    }
    if let Some(var_958) = &input.network_border_group {
        object.key("NetworkBorderGroup").string(var_958);
    }
    if let Some(var_959) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_959);
    }
    if let Some(var_960) = &input.network_interface_owner_id {
        object.key("NetworkInterfaceOwnerId").string(var_960);
    }
    if let Some(var_961) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_961);
    }
}

pub fn serialize_structure_aws_ec2_subnet_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SubnetDetails,
) {
    if input.assign_ipv6_address_on_creation {
        object
            .key("AssignIpv6AddressOnCreation")
            .boolean(input.assign_ipv6_address_on_creation);
    }
    if let Some(var_962) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_962);
    }
    if let Some(var_963) = &input.availability_zone_id {
        object.key("AvailabilityZoneId").string(var_963);
    }
    if input.available_ip_address_count != 0 {
        object.key("AvailableIpAddressCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.available_ip_address_count).into()),
        );
    }
    if let Some(var_964) = &input.cidr_block {
        object.key("CidrBlock").string(var_964);
    }
    if input.default_for_az {
        object.key("DefaultForAz").boolean(input.default_for_az);
    }
    if input.map_public_ip_on_launch {
        object
            .key("MapPublicIpOnLaunch")
            .boolean(input.map_public_ip_on_launch);
    }
    if let Some(var_965) = &input.owner_id {
        object.key("OwnerId").string(var_965);
    }
    if let Some(var_966) = &input.state {
        object.key("State").string(var_966);
    }
    if let Some(var_967) = &input.subnet_arn {
        object.key("SubnetArn").string(var_967);
    }
    if let Some(var_968) = &input.subnet_id {
        object.key("SubnetId").string(var_968);
    }
    if let Some(var_969) = &input.vpc_id {
        object.key("VpcId").string(var_969);
    }
    if let Some(var_970) = &input.ipv6_cidr_block_association_set {
        let mut array_971 = object.key("Ipv6CidrBlockAssociationSet").start_array();
        for item_972 in var_970 {
            {
                let mut object_973 = array_971.value().start_object();
                crate::json_ser::serialize_structure_ipv6_cidr_block_association(
                    &mut object_973,
                    item_972,
                );
                object_973.finish();
            }
        }
        array_971.finish();
    }
}

pub fn serialize_structure_aws_ec2_network_acl_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkAclDetails,
) {
    if input.is_default {
        object.key("IsDefault").boolean(input.is_default);
    }
    if let Some(var_974) = &input.network_acl_id {
        object.key("NetworkAclId").string(var_974);
    }
    if let Some(var_975) = &input.owner_id {
        object.key("OwnerId").string(var_975);
    }
    if let Some(var_976) = &input.vpc_id {
        object.key("VpcId").string(var_976);
    }
    if let Some(var_977) = &input.associations {
        let mut array_978 = object.key("Associations").start_array();
        for item_979 in var_977 {
            {
                let mut object_980 = array_978.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_network_acl_association(
                    &mut object_980,
                    item_979,
                );
                object_980.finish();
            }
        }
        array_978.finish();
    }
    if let Some(var_981) = &input.entries {
        let mut array_982 = object.key("Entries").start_array();
        for item_983 in var_981 {
            {
                let mut object_984 = array_982.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_network_acl_entry(
                    &mut object_984,
                    item_983,
                );
                object_984.finish();
            }
        }
        array_982.finish();
    }
}

pub fn serialize_structure_aws_elbv2_load_balancer_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbv2LoadBalancerDetails,
) {
    if let Some(var_985) = &input.availability_zones {
        let mut array_986 = object.key("AvailabilityZones").start_array();
        for item_987 in var_985 {
            {
                let mut object_988 = array_986.value().start_object();
                crate::json_ser::serialize_structure_availability_zone(&mut object_988, item_987);
                object_988.finish();
            }
        }
        array_986.finish();
    }
    if let Some(var_989) = &input.canonical_hosted_zone_id {
        object.key("CanonicalHostedZoneId").string(var_989);
    }
    if let Some(var_990) = &input.created_time {
        object.key("CreatedTime").string(var_990);
    }
    if let Some(var_991) = &input.dns_name {
        object.key("DNSName").string(var_991);
    }
    if let Some(var_992) = &input.ip_address_type {
        object.key("IpAddressType").string(var_992);
    }
    if let Some(var_993) = &input.scheme {
        object.key("Scheme").string(var_993);
    }
    if let Some(var_994) = &input.security_groups {
        let mut array_995 = object.key("SecurityGroups").start_array();
        for item_996 in var_994 {
            {
                array_995.value().string(item_996);
            }
        }
        array_995.finish();
    }
    if let Some(var_997) = &input.state {
        let mut object_998 = object.key("State").start_object();
        crate::json_ser::serialize_structure_load_balancer_state(&mut object_998, var_997);
        object_998.finish();
    }
    if let Some(var_999) = &input.r#type {
        object.key("Type").string(var_999);
    }
    if let Some(var_1000) = &input.vpc_id {
        object.key("VpcId").string(var_1000);
    }
}

pub fn serialize_structure_aws_elastic_beanstalk_environment_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentDetails,
) {
    if let Some(var_1001) = &input.application_name {
        object.key("ApplicationName").string(var_1001);
    }
    if let Some(var_1002) = &input.cname {
        object.key("Cname").string(var_1002);
    }
    if let Some(var_1003) = &input.date_created {
        object.key("DateCreated").string(var_1003);
    }
    if let Some(var_1004) = &input.date_updated {
        object.key("DateUpdated").string(var_1004);
    }
    if let Some(var_1005) = &input.description {
        object.key("Description").string(var_1005);
    }
    if let Some(var_1006) = &input.endpoint_url {
        object.key("EndpointUrl").string(var_1006);
    }
    if let Some(var_1007) = &input.environment_arn {
        object.key("EnvironmentArn").string(var_1007);
    }
    if let Some(var_1008) = &input.environment_id {
        object.key("EnvironmentId").string(var_1008);
    }
    if let Some(var_1009) = &input.environment_links {
        let mut array_1010 = object.key("EnvironmentLinks").start_array();
        for item_1011 in var_1009 {
            {
                let mut object_1012 = array_1010.value().start_object();
                crate::json_ser::serialize_structure_aws_elastic_beanstalk_environment_environment_link(&mut object_1012, item_1011);
                object_1012.finish();
            }
        }
        array_1010.finish();
    }
    if let Some(var_1013) = &input.environment_name {
        object.key("EnvironmentName").string(var_1013);
    }
    if let Some(var_1014) = &input.option_settings {
        let mut array_1015 = object.key("OptionSettings").start_array();
        for item_1016 in var_1014 {
            {
                let mut object_1017 = array_1015.value().start_object();
                crate::json_ser::serialize_structure_aws_elastic_beanstalk_environment_option_setting(&mut object_1017, item_1016);
                object_1017.finish();
            }
        }
        array_1015.finish();
    }
    if let Some(var_1018) = &input.platform_arn {
        object.key("PlatformArn").string(var_1018);
    }
    if let Some(var_1019) = &input.solution_stack_name {
        object.key("SolutionStackName").string(var_1019);
    }
    if let Some(var_1020) = &input.status {
        object.key("Status").string(var_1020);
    }
    if let Some(var_1021) = &input.tier {
        let mut object_1022 = object.key("Tier").start_object();
        crate::json_ser::serialize_structure_aws_elastic_beanstalk_environment_tier(
            &mut object_1022,
            var_1021,
        );
        object_1022.finish();
    }
    if let Some(var_1023) = &input.version_label {
        object.key("VersionLabel").string(var_1023);
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainDetails,
) {
    if let Some(var_1024) = &input.access_policies {
        object.key("AccessPolicies").string(var_1024);
    }
    if let Some(var_1025) = &input.domain_endpoint_options {
        let mut object_1026 = object.key("DomainEndpointOptions").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_domain_endpoint_options(
            &mut object_1026,
            var_1025,
        );
        object_1026.finish();
    }
    if let Some(var_1027) = &input.domain_id {
        object.key("DomainId").string(var_1027);
    }
    if let Some(var_1028) = &input.domain_name {
        object.key("DomainName").string(var_1028);
    }
    if let Some(var_1029) = &input.endpoint {
        object.key("Endpoint").string(var_1029);
    }
    if let Some(var_1030) = &input.endpoints {
        let mut object_1031 = object.key("Endpoints").start_object();
        for (key_1032, value_1033) in var_1030 {
            {
                object_1031.key(key_1032).string(value_1033);
            }
        }
        object_1031.finish();
    }
    if let Some(var_1034) = &input.elasticsearch_version {
        object.key("ElasticsearchVersion").string(var_1034);
    }
    if let Some(var_1035) = &input.elasticsearch_cluster_config {
        let mut object_1036 = object.key("ElasticsearchClusterConfig").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_elasticsearch_cluster_config_details(&mut object_1036, var_1035);
        object_1036.finish();
    }
    if let Some(var_1037) = &input.encryption_at_rest_options {
        let mut object_1038 = object.key("EncryptionAtRestOptions").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_encryption_at_rest_options(
            &mut object_1038,
            var_1037,
        );
        object_1038.finish();
    }
    if let Some(var_1039) = &input.log_publishing_options {
        let mut object_1040 = object.key("LogPublishingOptions").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_log_publishing_options(
            &mut object_1040,
            var_1039,
        );
        object_1040.finish();
    }
    if let Some(var_1041) = &input.node_to_node_encryption_options {
        let mut object_1042 = object.key("NodeToNodeEncryptionOptions").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_node_to_node_encryption_options(&mut object_1042, var_1041);
        object_1042.finish();
    }
    if let Some(var_1043) = &input.service_software_options {
        let mut object_1044 = object.key("ServiceSoftwareOptions").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_service_software_options(
            &mut object_1044,
            var_1043,
        );
        object_1044.finish();
    }
    if let Some(var_1045) = &input.vpc_options {
        let mut object_1046 = object.key("VPCOptions").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_vpc_options(
            &mut object_1046,
            var_1045,
        );
        object_1046.finish();
    }
}

pub fn serialize_structure_aws_s3_bucket_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketDetails,
) {
    if let Some(var_1047) = &input.owner_id {
        object.key("OwnerId").string(var_1047);
    }
    if let Some(var_1048) = &input.owner_name {
        object.key("OwnerName").string(var_1048);
    }
    if let Some(var_1049) = &input.created_at {
        object.key("CreatedAt").string(var_1049);
    }
    if let Some(var_1050) = &input.server_side_encryption_configuration {
        let mut object_1051 = object
            .key("ServerSideEncryptionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_server_side_encryption_configuration(
            &mut object_1051,
            var_1050,
        );
        object_1051.finish();
    }
    if let Some(var_1052) = &input.bucket_lifecycle_configuration {
        let mut object_1053 = object.key("BucketLifecycleConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_details(
            &mut object_1053,
            var_1052,
        );
        object_1053.finish();
    }
    if let Some(var_1054) = &input.public_access_block_configuration {
        let mut object_1055 = object.key("PublicAccessBlockConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_s3_account_public_access_block_details(
            &mut object_1055,
            var_1054,
        );
        object_1055.finish();
    }
}

pub fn serialize_structure_aws_s3_account_public_access_block_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3AccountPublicAccessBlockDetails,
) {
    if input.block_public_acls {
        object
            .key("BlockPublicAcls")
            .boolean(input.block_public_acls);
    }
    if input.block_public_policy {
        object
            .key("BlockPublicPolicy")
            .boolean(input.block_public_policy);
    }
    if input.ignore_public_acls {
        object
            .key("IgnorePublicAcls")
            .boolean(input.ignore_public_acls);
    }
    if input.restrict_public_buckets {
        object
            .key("RestrictPublicBuckets")
            .boolean(input.restrict_public_buckets);
    }
}

pub fn serialize_structure_aws_s3_object_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3ObjectDetails,
) {
    if let Some(var_1056) = &input.last_modified {
        object.key("LastModified").string(var_1056);
    }
    if let Some(var_1057) = &input.e_tag {
        object.key("ETag").string(var_1057);
    }
    if let Some(var_1058) = &input.version_id {
        object.key("VersionId").string(var_1058);
    }
    if let Some(var_1059) = &input.content_type {
        object.key("ContentType").string(var_1059);
    }
    if let Some(var_1060) = &input.server_side_encryption {
        object.key("ServerSideEncryption").string(var_1060);
    }
    if let Some(var_1061) = &input.ssekms_key_id {
        object.key("SSEKMSKeyId").string(var_1061);
    }
}

pub fn serialize_structure_aws_secrets_manager_secret_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecretsManagerSecretDetails,
) {
    if let Some(var_1062) = &input.rotation_rules {
        let mut object_1063 = object.key("RotationRules").start_object();
        crate::json_ser::serialize_structure_aws_secrets_manager_secret_rotation_rules(
            &mut object_1063,
            var_1062,
        );
        object_1063.finish();
    }
    if input.rotation_occurred_within_frequency {
        object
            .key("RotationOccurredWithinFrequency")
            .boolean(input.rotation_occurred_within_frequency);
    }
    if let Some(var_1064) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1064);
    }
    if input.rotation_enabled {
        object
            .key("RotationEnabled")
            .boolean(input.rotation_enabled);
    }
    if let Some(var_1065) = &input.rotation_lambda_arn {
        object.key("RotationLambdaArn").string(var_1065);
    }
    if input.deleted {
        object.key("Deleted").boolean(input.deleted);
    }
    if let Some(var_1066) = &input.name {
        object.key("Name").string(var_1066);
    }
    if let Some(var_1067) = &input.description {
        object.key("Description").string(var_1067);
    }
}

pub fn serialize_structure_aws_iam_access_key_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeyDetails,
) {
    if let Some(var_1068) = &input.user_name {
        object.key("UserName").string(var_1068);
    }
    if let Some(var_1069) = &input.status {
        object.key("Status").string(var_1069.as_str());
    }
    if let Some(var_1070) = &input.created_at {
        object.key("CreatedAt").string(var_1070);
    }
    if let Some(var_1071) = &input.principal_id {
        object.key("PrincipalId").string(var_1071);
    }
    if let Some(var_1072) = &input.principal_type {
        object.key("PrincipalType").string(var_1072);
    }
    if let Some(var_1073) = &input.principal_name {
        object.key("PrincipalName").string(var_1073);
    }
    if let Some(var_1074) = &input.account_id {
        object.key("AccountId").string(var_1074);
    }
    if let Some(var_1075) = &input.access_key_id {
        object.key("AccessKeyId").string(var_1075);
    }
    if let Some(var_1076) = &input.session_context {
        let mut object_1077 = object.key("SessionContext").start_object();
        crate::json_ser::serialize_structure_aws_iam_access_key_session_context(
            &mut object_1077,
            var_1076,
        );
        object_1077.finish();
    }
}

pub fn serialize_structure_aws_iam_user_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamUserDetails,
) {
    if let Some(var_1078) = &input.attached_managed_policies {
        let mut array_1079 = object.key("AttachedManagedPolicies").start_array();
        for item_1080 in var_1078 {
            {
                let mut object_1081 = array_1079.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_attached_managed_policy(
                    &mut object_1081,
                    item_1080,
                );
                object_1081.finish();
            }
        }
        array_1079.finish();
    }
    if let Some(var_1082) = &input.create_date {
        object.key("CreateDate").string(var_1082);
    }
    if let Some(var_1083) = &input.group_list {
        let mut array_1084 = object.key("GroupList").start_array();
        for item_1085 in var_1083 {
            {
                array_1084.value().string(item_1085);
            }
        }
        array_1084.finish();
    }
    if let Some(var_1086) = &input.path {
        object.key("Path").string(var_1086);
    }
    if let Some(var_1087) = &input.permissions_boundary {
        let mut object_1088 = object.key("PermissionsBoundary").start_object();
        crate::json_ser::serialize_structure_aws_iam_permissions_boundary(
            &mut object_1088,
            var_1087,
        );
        object_1088.finish();
    }
    if let Some(var_1089) = &input.user_id {
        object.key("UserId").string(var_1089);
    }
    if let Some(var_1090) = &input.user_name {
        object.key("UserName").string(var_1090);
    }
    if let Some(var_1091) = &input.user_policy_list {
        let mut array_1092 = object.key("UserPolicyList").start_array();
        for item_1093 in var_1091 {
            {
                let mut object_1094 = array_1092.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_user_policy(
                    &mut object_1094,
                    item_1093,
                );
                object_1094.finish();
            }
        }
        array_1092.finish();
    }
}

pub fn serialize_structure_aws_iam_policy_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamPolicyDetails,
) {
    if input.attachment_count != 0 {
        object.key("AttachmentCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.attachment_count).into()),
        );
    }
    if let Some(var_1095) = &input.create_date {
        object.key("CreateDate").string(var_1095);
    }
    if let Some(var_1096) = &input.default_version_id {
        object.key("DefaultVersionId").string(var_1096);
    }
    if let Some(var_1097) = &input.description {
        object.key("Description").string(var_1097);
    }
    if input.is_attachable {
        object.key("IsAttachable").boolean(input.is_attachable);
    }
    if let Some(var_1098) = &input.path {
        object.key("Path").string(var_1098);
    }
    if input.permissions_boundary_usage_count != 0 {
        object.key("PermissionsBoundaryUsageCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.permissions_boundary_usage_count).into()),
        );
    }
    if let Some(var_1099) = &input.policy_id {
        object.key("PolicyId").string(var_1099);
    }
    if let Some(var_1100) = &input.policy_name {
        object.key("PolicyName").string(var_1100);
    }
    if let Some(var_1101) = &input.policy_version_list {
        let mut array_1102 = object.key("PolicyVersionList").start_array();
        for item_1103 in var_1101 {
            {
                let mut object_1104 = array_1102.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_policy_version(
                    &mut object_1104,
                    item_1103,
                );
                object_1104.finish();
            }
        }
        array_1102.finish();
    }
    if let Some(var_1105) = &input.update_date {
        object.key("UpdateDate").string(var_1105);
    }
}

pub fn serialize_structure_aws_api_gateway_v2_stage_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayV2StageDetails,
) {
    if let Some(var_1106) = &input.client_certificate_id {
        object.key("ClientCertificateId").string(var_1106);
    }
    if let Some(var_1107) = &input.created_date {
        object.key("CreatedDate").string(var_1107);
    }
    if let Some(var_1108) = &input.description {
        object.key("Description").string(var_1108);
    }
    if let Some(var_1109) = &input.default_route_settings {
        let mut object_1110 = object.key("DefaultRouteSettings").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_v2_route_settings(
            &mut object_1110,
            var_1109,
        );
        object_1110.finish();
    }
    if let Some(var_1111) = &input.deployment_id {
        object.key("DeploymentId").string(var_1111);
    }
    if let Some(var_1112) = &input.last_updated_date {
        object.key("LastUpdatedDate").string(var_1112);
    }
    if let Some(var_1113) = &input.route_settings {
        let mut object_1114 = object.key("RouteSettings").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_v2_route_settings(
            &mut object_1114,
            var_1113,
        );
        object_1114.finish();
    }
    if let Some(var_1115) = &input.stage_name {
        object.key("StageName").string(var_1115);
    }
    if let Some(var_1116) = &input.stage_variables {
        let mut object_1117 = object.key("StageVariables").start_object();
        for (key_1118, value_1119) in var_1116 {
            {
                object_1117.key(key_1118).string(value_1119);
            }
        }
        object_1117.finish();
    }
    if let Some(var_1120) = &input.access_log_settings {
        let mut object_1121 = object.key("AccessLogSettings").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_access_log_settings(
            &mut object_1121,
            var_1120,
        );
        object_1121.finish();
    }
    if input.auto_deploy {
        object.key("AutoDeploy").boolean(input.auto_deploy);
    }
    if let Some(var_1122) = &input.last_deployment_status_message {
        object.key("LastDeploymentStatusMessage").string(var_1122);
    }
    if input.api_gateway_managed {
        object
            .key("ApiGatewayManaged")
            .boolean(input.api_gateway_managed);
    }
}

pub fn serialize_structure_aws_api_gateway_v2_api_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayV2ApiDetails,
) {
    if let Some(var_1123) = &input.api_endpoint {
        object.key("ApiEndpoint").string(var_1123);
    }
    if let Some(var_1124) = &input.api_id {
        object.key("ApiId").string(var_1124);
    }
    if let Some(var_1125) = &input.api_key_selection_expression {
        object.key("ApiKeySelectionExpression").string(var_1125);
    }
    if let Some(var_1126) = &input.created_date {
        object.key("CreatedDate").string(var_1126);
    }
    if let Some(var_1127) = &input.description {
        object.key("Description").string(var_1127);
    }
    if let Some(var_1128) = &input.version {
        object.key("Version").string(var_1128);
    }
    if let Some(var_1129) = &input.name {
        object.key("Name").string(var_1129);
    }
    if let Some(var_1130) = &input.protocol_type {
        object.key("ProtocolType").string(var_1130);
    }
    if let Some(var_1131) = &input.route_selection_expression {
        object.key("RouteSelectionExpression").string(var_1131);
    }
    if let Some(var_1132) = &input.cors_configuration {
        let mut object_1133 = object.key("CorsConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_cors_configuration(&mut object_1133, var_1132);
        object_1133.finish();
    }
}

pub fn serialize_structure_aws_dynamo_db_table_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableDetails,
) {
    if let Some(var_1134) = &input.attribute_definitions {
        let mut array_1135 = object.key("AttributeDefinitions").start_array();
        for item_1136 in var_1134 {
            {
                let mut object_1137 = array_1135.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_attribute_definition(
                    &mut object_1137,
                    item_1136,
                );
                object_1137.finish();
            }
        }
        array_1135.finish();
    }
    if let Some(var_1138) = &input.billing_mode_summary {
        let mut object_1139 = object.key("BillingModeSummary").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_billing_mode_summary(
            &mut object_1139,
            var_1138,
        );
        object_1139.finish();
    }
    if let Some(var_1140) = &input.creation_date_time {
        object.key("CreationDateTime").string(var_1140);
    }
    if let Some(var_1141) = &input.global_secondary_indexes {
        let mut array_1142 = object.key("GlobalSecondaryIndexes").start_array();
        for item_1143 in var_1141 {
            {
                let mut object_1144 = array_1142.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_global_secondary_index(
                    &mut object_1144,
                    item_1143,
                );
                object_1144.finish();
            }
        }
        array_1142.finish();
    }
    if let Some(var_1145) = &input.global_table_version {
        object.key("GlobalTableVersion").string(var_1145);
    }
    if input.item_count != 0 {
        object.key("ItemCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.item_count).into()),
        );
    }
    if let Some(var_1146) = &input.key_schema {
        let mut array_1147 = object.key("KeySchema").start_array();
        for item_1148 in var_1146 {
            {
                let mut object_1149 = array_1147.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_key_schema(
                    &mut object_1149,
                    item_1148,
                );
                object_1149.finish();
            }
        }
        array_1147.finish();
    }
    if let Some(var_1150) = &input.latest_stream_arn {
        object.key("LatestStreamArn").string(var_1150);
    }
    if let Some(var_1151) = &input.latest_stream_label {
        object.key("LatestStreamLabel").string(var_1151);
    }
    if let Some(var_1152) = &input.local_secondary_indexes {
        let mut array_1153 = object.key("LocalSecondaryIndexes").start_array();
        for item_1154 in var_1152 {
            {
                let mut object_1155 = array_1153.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_local_secondary_index(
                    &mut object_1155,
                    item_1154,
                );
                object_1155.finish();
            }
        }
        array_1153.finish();
    }
    if let Some(var_1156) = &input.provisioned_throughput {
        let mut object_1157 = object.key("ProvisionedThroughput").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_provisioned_throughput(
            &mut object_1157,
            var_1156,
        );
        object_1157.finish();
    }
    if let Some(var_1158) = &input.replicas {
        let mut array_1159 = object.key("Replicas").start_array();
        for item_1160 in var_1158 {
            {
                let mut object_1161 = array_1159.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_replica(
                    &mut object_1161,
                    item_1160,
                );
                object_1161.finish();
            }
        }
        array_1159.finish();
    }
    if let Some(var_1162) = &input.restore_summary {
        let mut object_1163 = object.key("RestoreSummary").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_restore_summary(
            &mut object_1163,
            var_1162,
        );
        object_1163.finish();
    }
    if let Some(var_1164) = &input.sse_description {
        let mut object_1165 = object.key("SseDescription").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_sse_description(
            &mut object_1165,
            var_1164,
        );
        object_1165.finish();
    }
    if let Some(var_1166) = &input.stream_specification {
        let mut object_1167 = object.key("StreamSpecification").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_stream_specification(
            &mut object_1167,
            var_1166,
        );
        object_1167.finish();
    }
    if let Some(var_1168) = &input.table_id {
        object.key("TableId").string(var_1168);
    }
    if let Some(var_1169) = &input.table_name {
        object.key("TableName").string(var_1169);
    }
    if input.table_size_bytes != 0 {
        object.key("TableSizeBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.table_size_bytes).into()),
        );
    }
    if let Some(var_1170) = &input.table_status {
        object.key("TableStatus").string(var_1170);
    }
}

pub fn serialize_structure_aws_api_gateway_stage_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayStageDetails,
) {
    if let Some(var_1171) = &input.deployment_id {
        object.key("DeploymentId").string(var_1171);
    }
    if let Some(var_1172) = &input.client_certificate_id {
        object.key("ClientCertificateId").string(var_1172);
    }
    if let Some(var_1173) = &input.stage_name {
        object.key("StageName").string(var_1173);
    }
    if let Some(var_1174) = &input.description {
        object.key("Description").string(var_1174);
    }
    if input.cache_cluster_enabled {
        object
            .key("CacheClusterEnabled")
            .boolean(input.cache_cluster_enabled);
    }
    if let Some(var_1175) = &input.cache_cluster_size {
        object.key("CacheClusterSize").string(var_1175);
    }
    if let Some(var_1176) = &input.cache_cluster_status {
        object.key("CacheClusterStatus").string(var_1176);
    }
    if let Some(var_1177) = &input.method_settings {
        let mut array_1178 = object.key("MethodSettings").start_array();
        for item_1179 in var_1177 {
            {
                let mut object_1180 = array_1178.value().start_object();
                crate::json_ser::serialize_structure_aws_api_gateway_method_settings(
                    &mut object_1180,
                    item_1179,
                );
                object_1180.finish();
            }
        }
        array_1178.finish();
    }
    if let Some(var_1181) = &input.variables {
        let mut object_1182 = object.key("Variables").start_object();
        for (key_1183, value_1184) in var_1181 {
            {
                object_1182.key(key_1183).string(value_1184);
            }
        }
        object_1182.finish();
    }
    if let Some(var_1185) = &input.documentation_version {
        object.key("DocumentationVersion").string(var_1185);
    }
    if let Some(var_1186) = &input.access_log_settings {
        let mut object_1187 = object.key("AccessLogSettings").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_access_log_settings(
            &mut object_1187,
            var_1186,
        );
        object_1187.finish();
    }
    if let Some(var_1188) = &input.canary_settings {
        let mut object_1189 = object.key("CanarySettings").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_canary_settings(
            &mut object_1189,
            var_1188,
        );
        object_1189.finish();
    }
    if input.tracing_enabled {
        object.key("TracingEnabled").boolean(input.tracing_enabled);
    }
    if let Some(var_1190) = &input.created_date {
        object.key("CreatedDate").string(var_1190);
    }
    if let Some(var_1191) = &input.last_updated_date {
        object.key("LastUpdatedDate").string(var_1191);
    }
    if let Some(var_1192) = &input.web_acl_arn {
        object.key("WebAclArn").string(var_1192);
    }
}

pub fn serialize_structure_aws_api_gateway_rest_api_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayRestApiDetails,
) {
    if let Some(var_1193) = &input.id {
        object.key("Id").string(var_1193);
    }
    if let Some(var_1194) = &input.name {
        object.key("Name").string(var_1194);
    }
    if let Some(var_1195) = &input.description {
        object.key("Description").string(var_1195);
    }
    if let Some(var_1196) = &input.created_date {
        object.key("CreatedDate").string(var_1196);
    }
    if let Some(var_1197) = &input.version {
        object.key("Version").string(var_1197);
    }
    if let Some(var_1198) = &input.binary_media_types {
        let mut array_1199 = object.key("BinaryMediaTypes").start_array();
        for item_1200 in var_1198 {
            {
                array_1199.value().string(item_1200);
            }
        }
        array_1199.finish();
    }
    if input.minimum_compression_size != 0 {
        object.key("MinimumCompressionSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.minimum_compression_size).into()),
        );
    }
    if let Some(var_1201) = &input.api_key_source {
        object.key("ApiKeySource").string(var_1201);
    }
    if let Some(var_1202) = &input.endpoint_configuration {
        let mut object_1203 = object.key("EndpointConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_endpoint_configuration(
            &mut object_1203,
            var_1202,
        );
        object_1203.finish();
    }
}

pub fn serialize_structure_aws_cloud_trail_trail_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudTrailTrailDetails,
) {
    if let Some(var_1204) = &input.cloud_watch_logs_log_group_arn {
        object.key("CloudWatchLogsLogGroupArn").string(var_1204);
    }
    if let Some(var_1205) = &input.cloud_watch_logs_role_arn {
        object.key("CloudWatchLogsRoleArn").string(var_1205);
    }
    if input.has_custom_event_selectors {
        object
            .key("HasCustomEventSelectors")
            .boolean(input.has_custom_event_selectors);
    }
    if let Some(var_1206) = &input.home_region {
        object.key("HomeRegion").string(var_1206);
    }
    if input.include_global_service_events {
        object
            .key("IncludeGlobalServiceEvents")
            .boolean(input.include_global_service_events);
    }
    if input.is_multi_region_trail {
        object
            .key("IsMultiRegionTrail")
            .boolean(input.is_multi_region_trail);
    }
    if input.is_organization_trail {
        object
            .key("IsOrganizationTrail")
            .boolean(input.is_organization_trail);
    }
    if let Some(var_1207) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1207);
    }
    if input.log_file_validation_enabled {
        object
            .key("LogFileValidationEnabled")
            .boolean(input.log_file_validation_enabled);
    }
    if let Some(var_1208) = &input.name {
        object.key("Name").string(var_1208);
    }
    if let Some(var_1209) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_1209);
    }
    if let Some(var_1210) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_1210);
    }
    if let Some(var_1211) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1211);
    }
    if let Some(var_1212) = &input.sns_topic_name {
        object.key("SnsTopicName").string(var_1212);
    }
    if let Some(var_1213) = &input.trail_arn {
        object.key("TrailArn").string(var_1213);
    }
}

pub fn serialize_structure_aws_ssm_patch_compliance_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSsmPatchComplianceDetails,
) {
    if let Some(var_1214) = &input.patch {
        let mut object_1215 = object.key("Patch").start_object();
        crate::json_ser::serialize_structure_aws_ssm_patch(&mut object_1215, var_1214);
        object_1215.finish();
    }
}

pub fn serialize_structure_aws_certificate_manager_certificate_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateDetails,
) {
    if let Some(var_1216) = &input.certificate_authority_arn {
        object.key("CertificateAuthorityArn").string(var_1216);
    }
    if let Some(var_1217) = &input.created_at {
        object.key("CreatedAt").string(var_1217);
    }
    if let Some(var_1218) = &input.domain_name {
        object.key("DomainName").string(var_1218);
    }
    if let Some(var_1219) = &input.domain_validation_options {
        let mut array_1220 = object.key("DomainValidationOptions").start_array();
        for item_1221 in var_1219 {
            {
                let mut object_1222 = array_1220.value().start_object();
                crate::json_ser::serialize_structure_aws_certificate_manager_certificate_domain_validation_option(&mut object_1222, item_1221);
                object_1222.finish();
            }
        }
        array_1220.finish();
    }
    if let Some(var_1223) = &input.extended_key_usages {
        let mut array_1224 = object.key("ExtendedKeyUsages").start_array();
        for item_1225 in var_1223 {
            {
                let mut object_1226 = array_1224.value().start_object();
                crate::json_ser::serialize_structure_aws_certificate_manager_certificate_extended_key_usage(&mut object_1226, item_1225);
                object_1226.finish();
            }
        }
        array_1224.finish();
    }
    if let Some(var_1227) = &input.failure_reason {
        object.key("FailureReason").string(var_1227);
    }
    if let Some(var_1228) = &input.imported_at {
        object.key("ImportedAt").string(var_1228);
    }
    if let Some(var_1229) = &input.in_use_by {
        let mut array_1230 = object.key("InUseBy").start_array();
        for item_1231 in var_1229 {
            {
                array_1230.value().string(item_1231);
            }
        }
        array_1230.finish();
    }
    if let Some(var_1232) = &input.issued_at {
        object.key("IssuedAt").string(var_1232);
    }
    if let Some(var_1233) = &input.issuer {
        object.key("Issuer").string(var_1233);
    }
    if let Some(var_1234) = &input.key_algorithm {
        object.key("KeyAlgorithm").string(var_1234);
    }
    if let Some(var_1235) = &input.key_usages {
        let mut array_1236 = object.key("KeyUsages").start_array();
        for item_1237 in var_1235 {
            {
                let mut object_1238 = array_1236.value().start_object();
                crate::json_ser::serialize_structure_aws_certificate_manager_certificate_key_usage(
                    &mut object_1238,
                    item_1237,
                );
                object_1238.finish();
            }
        }
        array_1236.finish();
    }
    if let Some(var_1239) = &input.not_after {
        object.key("NotAfter").string(var_1239);
    }
    if let Some(var_1240) = &input.not_before {
        object.key("NotBefore").string(var_1240);
    }
    if let Some(var_1241) = &input.options {
        let mut object_1242 = object.key("Options").start_object();
        crate::json_ser::serialize_structure_aws_certificate_manager_certificate_options(
            &mut object_1242,
            var_1241,
        );
        object_1242.finish();
    }
    if let Some(var_1243) = &input.renewal_eligibility {
        object.key("RenewalEligibility").string(var_1243);
    }
    if let Some(var_1244) = &input.renewal_summary {
        let mut object_1245 = object.key("RenewalSummary").start_object();
        crate::json_ser::serialize_structure_aws_certificate_manager_certificate_renewal_summary(
            &mut object_1245,
            var_1244,
        );
        object_1245.finish();
    }
    if let Some(var_1246) = &input.serial {
        object.key("Serial").string(var_1246);
    }
    if let Some(var_1247) = &input.signature_algorithm {
        object.key("SignatureAlgorithm").string(var_1247);
    }
    if let Some(var_1248) = &input.status {
        object.key("Status").string(var_1248);
    }
    if let Some(var_1249) = &input.subject {
        object.key("Subject").string(var_1249);
    }
    if let Some(var_1250) = &input.subject_alternative_names {
        let mut array_1251 = object.key("SubjectAlternativeNames").start_array();
        for item_1252 in var_1250 {
            {
                array_1251.value().string(item_1252);
            }
        }
        array_1251.finish();
    }
    if let Some(var_1253) = &input.r#type {
        object.key("Type").string(var_1253);
    }
}

pub fn serialize_structure_aws_redshift_cluster_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterDetails,
) {
    if input.allow_version_upgrade {
        object
            .key("AllowVersionUpgrade")
            .boolean(input.allow_version_upgrade);
    }
    if input.automated_snapshot_retention_period != 0 {
        object.key("AutomatedSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.automated_snapshot_retention_period).into()),
        );
    }
    if let Some(var_1254) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1254);
    }
    if let Some(var_1255) = &input.cluster_availability_status {
        object.key("ClusterAvailabilityStatus").string(var_1255);
    }
    if let Some(var_1256) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_1256);
    }
    if let Some(var_1257) = &input.cluster_identifier {
        object.key("ClusterIdentifier").string(var_1257);
    }
    if let Some(var_1258) = &input.cluster_nodes {
        let mut array_1259 = object.key("ClusterNodes").start_array();
        for item_1260 in var_1258 {
            {
                let mut object_1261 = array_1259.value().start_object();
                crate::json_ser::serialize_structure_aws_redshift_cluster_cluster_node(
                    &mut object_1261,
                    item_1260,
                );
                object_1261.finish();
            }
        }
        array_1259.finish();
    }
    if let Some(var_1262) = &input.cluster_parameter_groups {
        let mut array_1263 = object.key("ClusterParameterGroups").start_array();
        for item_1264 in var_1262 {
            {
                let mut object_1265 = array_1263.value().start_object();
                crate::json_ser::serialize_structure_aws_redshift_cluster_cluster_parameter_group(
                    &mut object_1265,
                    item_1264,
                );
                object_1265.finish();
            }
        }
        array_1263.finish();
    }
    if let Some(var_1266) = &input.cluster_public_key {
        object.key("ClusterPublicKey").string(var_1266);
    }
    if let Some(var_1267) = &input.cluster_revision_number {
        object.key("ClusterRevisionNumber").string(var_1267);
    }
    if let Some(var_1268) = &input.cluster_security_groups {
        let mut array_1269 = object.key("ClusterSecurityGroups").start_array();
        for item_1270 in var_1268 {
            {
                let mut object_1271 = array_1269.value().start_object();
                crate::json_ser::serialize_structure_aws_redshift_cluster_cluster_security_group(
                    &mut object_1271,
                    item_1270,
                );
                object_1271.finish();
            }
        }
        array_1269.finish();
    }
    if let Some(var_1272) = &input.cluster_snapshot_copy_status {
        let mut object_1273 = object.key("ClusterSnapshotCopyStatus").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_cluster_snapshot_copy_status(
            &mut object_1273,
            var_1272,
        );
        object_1273.finish();
    }
    if let Some(var_1274) = &input.cluster_status {
        object.key("ClusterStatus").string(var_1274);
    }
    if let Some(var_1275) = &input.cluster_subnet_group_name {
        object.key("ClusterSubnetGroupName").string(var_1275);
    }
    if let Some(var_1276) = &input.cluster_version {
        object.key("ClusterVersion").string(var_1276);
    }
    if let Some(var_1277) = &input.db_name {
        object.key("DBName").string(var_1277);
    }
    if let Some(var_1278) = &input.deferred_maintenance_windows {
        let mut array_1279 = object.key("DeferredMaintenanceWindows").start_array();
        for item_1280 in var_1278 {
            {
                let mut object_1281 = array_1279.value().start_object();
                crate::json_ser::serialize_structure_aws_redshift_cluster_deferred_maintenance_window(&mut object_1281, item_1280);
                object_1281.finish();
            }
        }
        array_1279.finish();
    }
    if let Some(var_1282) = &input.elastic_ip_status {
        let mut object_1283 = object.key("ElasticIpStatus").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_elastic_ip_status(
            &mut object_1283,
            var_1282,
        );
        object_1283.finish();
    }
    if let Some(var_1284) = &input.elastic_resize_number_of_node_options {
        object
            .key("ElasticResizeNumberOfNodeOptions")
            .string(var_1284);
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if let Some(var_1285) = &input.endpoint {
        let mut object_1286 = object.key("Endpoint").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_endpoint(
            &mut object_1286,
            var_1285,
        );
        object_1286.finish();
    }
    if input.enhanced_vpc_routing {
        object
            .key("EnhancedVpcRouting")
            .boolean(input.enhanced_vpc_routing);
    }
    if let Some(var_1287) = &input.expected_next_snapshot_schedule_time {
        object
            .key("ExpectedNextSnapshotScheduleTime")
            .string(var_1287);
    }
    if let Some(var_1288) = &input.expected_next_snapshot_schedule_time_status {
        object
            .key("ExpectedNextSnapshotScheduleTimeStatus")
            .string(var_1288);
    }
    if let Some(var_1289) = &input.hsm_status {
        let mut object_1290 = object.key("HsmStatus").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_hsm_status(
            &mut object_1290,
            var_1289,
        );
        object_1290.finish();
    }
    if let Some(var_1291) = &input.iam_roles {
        let mut array_1292 = object.key("IamRoles").start_array();
        for item_1293 in var_1291 {
            {
                let mut object_1294 = array_1292.value().start_object();
                crate::json_ser::serialize_structure_aws_redshift_cluster_iam_role(
                    &mut object_1294,
                    item_1293,
                );
                object_1294.finish();
            }
        }
        array_1292.finish();
    }
    if let Some(var_1295) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1295);
    }
    if let Some(var_1296) = &input.maintenance_track_name {
        object.key("MaintenanceTrackName").string(var_1296);
    }
    if input.manual_snapshot_retention_period != 0 {
        object.key("ManualSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.manual_snapshot_retention_period).into()),
        );
    }
    if let Some(var_1297) = &input.master_username {
        object.key("MasterUsername").string(var_1297);
    }
    if let Some(var_1298) = &input.next_maintenance_window_start_time {
        object
            .key("NextMaintenanceWindowStartTime")
            .string(var_1298);
    }
    if let Some(var_1299) = &input.node_type {
        object.key("NodeType").string(var_1299);
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if let Some(var_1300) = &input.pending_actions {
        let mut array_1301 = object.key("PendingActions").start_array();
        for item_1302 in var_1300 {
            {
                array_1301.value().string(item_1302);
            }
        }
        array_1301.finish();
    }
    if let Some(var_1303) = &input.pending_modified_values {
        let mut object_1304 = object.key("PendingModifiedValues").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_pending_modified_values(
            &mut object_1304,
            var_1303,
        );
        object_1304.finish();
    }
    if let Some(var_1305) = &input.preferred_maintenance_window {
        object.key("PreferredMaintenanceWindow").string(var_1305);
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
    if let Some(var_1306) = &input.resize_info {
        let mut object_1307 = object.key("ResizeInfo").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_resize_info(
            &mut object_1307,
            var_1306,
        );
        object_1307.finish();
    }
    if let Some(var_1308) = &input.restore_status {
        let mut object_1309 = object.key("RestoreStatus").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_restore_status(
            &mut object_1309,
            var_1308,
        );
        object_1309.finish();
    }
    if let Some(var_1310) = &input.snapshot_schedule_identifier {
        object.key("SnapshotScheduleIdentifier").string(var_1310);
    }
    if let Some(var_1311) = &input.snapshot_schedule_state {
        object.key("SnapshotScheduleState").string(var_1311);
    }
    if let Some(var_1312) = &input.vpc_id {
        object.key("VpcId").string(var_1312);
    }
    if let Some(var_1313) = &input.vpc_security_groups {
        let mut array_1314 = object.key("VpcSecurityGroups").start_array();
        for item_1315 in var_1313 {
            {
                let mut object_1316 = array_1314.value().start_object();
                crate::json_ser::serialize_structure_aws_redshift_cluster_vpc_security_group(
                    &mut object_1316,
                    item_1315,
                );
                object_1316.finish();
            }
        }
        array_1314.finish();
    }
}

pub fn serialize_structure_aws_elb_load_balancer_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerDetails,
) {
    if let Some(var_1317) = &input.availability_zones {
        let mut array_1318 = object.key("AvailabilityZones").start_array();
        for item_1319 in var_1317 {
            {
                array_1318.value().string(item_1319);
            }
        }
        array_1318.finish();
    }
    if let Some(var_1320) = &input.backend_server_descriptions {
        let mut array_1321 = object.key("BackendServerDescriptions").start_array();
        for item_1322 in var_1320 {
            {
                let mut object_1323 = array_1321.value().start_object();
                crate::json_ser::serialize_structure_aws_elb_load_balancer_backend_server_description(&mut object_1323, item_1322);
                object_1323.finish();
            }
        }
        array_1321.finish();
    }
    if let Some(var_1324) = &input.canonical_hosted_zone_name {
        object.key("CanonicalHostedZoneName").string(var_1324);
    }
    if let Some(var_1325) = &input.canonical_hosted_zone_name_id {
        object.key("CanonicalHostedZoneNameID").string(var_1325);
    }
    if let Some(var_1326) = &input.created_time {
        object.key("CreatedTime").string(var_1326);
    }
    if let Some(var_1327) = &input.dns_name {
        object.key("DnsName").string(var_1327);
    }
    if let Some(var_1328) = &input.health_check {
        let mut object_1329 = object.key("HealthCheck").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_health_check(
            &mut object_1329,
            var_1328,
        );
        object_1329.finish();
    }
    if let Some(var_1330) = &input.instances {
        let mut array_1331 = object.key("Instances").start_array();
        for item_1332 in var_1330 {
            {
                let mut object_1333 = array_1331.value().start_object();
                crate::json_ser::serialize_structure_aws_elb_load_balancer_instance(
                    &mut object_1333,
                    item_1332,
                );
                object_1333.finish();
            }
        }
        array_1331.finish();
    }
    if let Some(var_1334) = &input.listener_descriptions {
        let mut array_1335 = object.key("ListenerDescriptions").start_array();
        for item_1336 in var_1334 {
            {
                let mut object_1337 = array_1335.value().start_object();
                crate::json_ser::serialize_structure_aws_elb_load_balancer_listener_description(
                    &mut object_1337,
                    item_1336,
                );
                object_1337.finish();
            }
        }
        array_1335.finish();
    }
    if let Some(var_1338) = &input.load_balancer_attributes {
        let mut object_1339 = object.key("LoadBalancerAttributes").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_attributes(
            &mut object_1339,
            var_1338,
        );
        object_1339.finish();
    }
    if let Some(var_1340) = &input.load_balancer_name {
        object.key("LoadBalancerName").string(var_1340);
    }
    if let Some(var_1341) = &input.policies {
        let mut object_1342 = object.key("Policies").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_policies(
            &mut object_1342,
            var_1341,
        );
        object_1342.finish();
    }
    if let Some(var_1343) = &input.scheme {
        object.key("Scheme").string(var_1343);
    }
    if let Some(var_1344) = &input.security_groups {
        let mut array_1345 = object.key("SecurityGroups").start_array();
        for item_1346 in var_1344 {
            {
                array_1345.value().string(item_1346);
            }
        }
        array_1345.finish();
    }
    if let Some(var_1347) = &input.source_security_group {
        let mut object_1348 = object.key("SourceSecurityGroup").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_source_security_group(
            &mut object_1348,
            var_1347,
        );
        object_1348.finish();
    }
    if let Some(var_1349) = &input.subnets {
        let mut array_1350 = object.key("Subnets").start_array();
        for item_1351 in var_1349 {
            {
                array_1350.value().string(item_1351);
            }
        }
        array_1350.finish();
    }
    if let Some(var_1352) = &input.vpc_id {
        object.key("VpcId").string(var_1352);
    }
}

pub fn serialize_structure_aws_iam_group_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamGroupDetails,
) {
    if let Some(var_1353) = &input.attached_managed_policies {
        let mut array_1354 = object.key("AttachedManagedPolicies").start_array();
        for item_1355 in var_1353 {
            {
                let mut object_1356 = array_1354.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_attached_managed_policy(
                    &mut object_1356,
                    item_1355,
                );
                object_1356.finish();
            }
        }
        array_1354.finish();
    }
    if let Some(var_1357) = &input.create_date {
        object.key("CreateDate").string(var_1357);
    }
    if let Some(var_1358) = &input.group_id {
        object.key("GroupId").string(var_1358);
    }
    if let Some(var_1359) = &input.group_name {
        object.key("GroupName").string(var_1359);
    }
    if let Some(var_1360) = &input.group_policy_list {
        let mut array_1361 = object.key("GroupPolicyList").start_array();
        for item_1362 in var_1360 {
            {
                let mut object_1363 = array_1361.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_group_policy(
                    &mut object_1363,
                    item_1362,
                );
                object_1363.finish();
            }
        }
        array_1361.finish();
    }
    if let Some(var_1364) = &input.path {
        object.key("Path").string(var_1364);
    }
}

pub fn serialize_structure_aws_iam_role_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamRoleDetails,
) {
    if let Some(var_1365) = &input.assume_role_policy_document {
        object.key("AssumeRolePolicyDocument").string(var_1365);
    }
    if let Some(var_1366) = &input.attached_managed_policies {
        let mut array_1367 = object.key("AttachedManagedPolicies").start_array();
        for item_1368 in var_1366 {
            {
                let mut object_1369 = array_1367.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_attached_managed_policy(
                    &mut object_1369,
                    item_1368,
                );
                object_1369.finish();
            }
        }
        array_1367.finish();
    }
    if let Some(var_1370) = &input.create_date {
        object.key("CreateDate").string(var_1370);
    }
    if let Some(var_1371) = &input.instance_profile_list {
        let mut array_1372 = object.key("InstanceProfileList").start_array();
        for item_1373 in var_1371 {
            {
                let mut object_1374 = array_1372.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_instance_profile(
                    &mut object_1374,
                    item_1373,
                );
                object_1374.finish();
            }
        }
        array_1372.finish();
    }
    if let Some(var_1375) = &input.permissions_boundary {
        let mut object_1376 = object.key("PermissionsBoundary").start_object();
        crate::json_ser::serialize_structure_aws_iam_permissions_boundary(
            &mut object_1376,
            var_1375,
        );
        object_1376.finish();
    }
    if let Some(var_1377) = &input.role_id {
        object.key("RoleId").string(var_1377);
    }
    if let Some(var_1378) = &input.role_name {
        object.key("RoleName").string(var_1378);
    }
    if let Some(var_1379) = &input.role_policy_list {
        let mut array_1380 = object.key("RolePolicyList").start_array();
        for item_1381 in var_1379 {
            {
                let mut object_1382 = array_1380.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_role_policy(
                    &mut object_1382,
                    item_1381,
                );
                object_1382.finish();
            }
        }
        array_1380.finish();
    }
    if input.max_session_duration != 0 {
        object.key("MaxSessionDuration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_session_duration).into()),
        );
    }
    if let Some(var_1383) = &input.path {
        object.key("Path").string(var_1383);
    }
}

pub fn serialize_structure_aws_kms_key_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsKmsKeyDetails,
) {
    if let Some(var_1384) = &input.aws_account_id {
        object.key("AWSAccountId").string(var_1384);
    }
    if input.creation_date != 0.0 {
        object.key("CreationDate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.creation_date).into()),
        );
    }
    if let Some(var_1385) = &input.key_id {
        object.key("KeyId").string(var_1385);
    }
    if let Some(var_1386) = &input.key_manager {
        object.key("KeyManager").string(var_1386);
    }
    if let Some(var_1387) = &input.key_state {
        object.key("KeyState").string(var_1387);
    }
    if let Some(var_1388) = &input.origin {
        object.key("Origin").string(var_1388);
    }
    if let Some(var_1389) = &input.description {
        object.key("Description").string(var_1389);
    }
}

pub fn serialize_structure_aws_lambda_function_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionDetails,
) {
    if let Some(var_1390) = &input.code {
        let mut object_1391 = object.key("Code").start_object();
        crate::json_ser::serialize_structure_aws_lambda_function_code(&mut object_1391, var_1390);
        object_1391.finish();
    }
    if let Some(var_1392) = &input.code_sha256 {
        object.key("CodeSha256").string(var_1392);
    }
    if let Some(var_1393) = &input.dead_letter_config {
        let mut object_1394 = object.key("DeadLetterConfig").start_object();
        crate::json_ser::serialize_structure_aws_lambda_function_dead_letter_config(
            &mut object_1394,
            var_1393,
        );
        object_1394.finish();
    }
    if let Some(var_1395) = &input.environment {
        let mut object_1396 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_aws_lambda_function_environment(
            &mut object_1396,
            var_1395,
        );
        object_1396.finish();
    }
    if let Some(var_1397) = &input.function_name {
        object.key("FunctionName").string(var_1397);
    }
    if let Some(var_1398) = &input.handler {
        object.key("Handler").string(var_1398);
    }
    if let Some(var_1399) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1399);
    }
    if let Some(var_1400) = &input.last_modified {
        object.key("LastModified").string(var_1400);
    }
    if let Some(var_1401) = &input.layers {
        let mut array_1402 = object.key("Layers").start_array();
        for item_1403 in var_1401 {
            {
                let mut object_1404 = array_1402.value().start_object();
                crate::json_ser::serialize_structure_aws_lambda_function_layer(
                    &mut object_1404,
                    item_1403,
                );
                object_1404.finish();
            }
        }
        array_1402.finish();
    }
    if let Some(var_1405) = &input.master_arn {
        object.key("MasterArn").string(var_1405);
    }
    if input.memory_size != 0 {
        object.key("MemorySize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.memory_size).into()),
        );
    }
    if let Some(var_1406) = &input.revision_id {
        object.key("RevisionId").string(var_1406);
    }
    if let Some(var_1407) = &input.role {
        object.key("Role").string(var_1407);
    }
    if let Some(var_1408) = &input.runtime {
        object.key("Runtime").string(var_1408);
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    if let Some(var_1409) = &input.tracing_config {
        let mut object_1410 = object.key("TracingConfig").start_object();
        crate::json_ser::serialize_structure_aws_lambda_function_tracing_config(
            &mut object_1410,
            var_1409,
        );
        object_1410.finish();
    }
    if let Some(var_1411) = &input.vpc_config {
        let mut object_1412 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_aws_lambda_function_vpc_config(
            &mut object_1412,
            var_1411,
        );
        object_1412.finish();
    }
    if let Some(var_1413) = &input.version {
        object.key("Version").string(var_1413);
    }
}

pub fn serialize_structure_aws_lambda_layer_version_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaLayerVersionDetails,
) {
    if input.version != 0 {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.version).into()),
        );
    }
    if let Some(var_1414) = &input.compatible_runtimes {
        let mut array_1415 = object.key("CompatibleRuntimes").start_array();
        for item_1416 in var_1414 {
            {
                array_1415.value().string(item_1416);
            }
        }
        array_1415.finish();
    }
    if let Some(var_1417) = &input.created_date {
        object.key("CreatedDate").string(var_1417);
    }
}

pub fn serialize_structure_aws_rds_db_instance_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceDetails,
) {
    if let Some(var_1418) = &input.associated_roles {
        let mut array_1419 = object.key("AssociatedRoles").start_array();
        for item_1420 in var_1418 {
            {
                let mut object_1421 = array_1419.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_instance_associated_role(
                    &mut object_1421,
                    item_1420,
                );
                object_1421.finish();
            }
        }
        array_1419.finish();
    }
    if let Some(var_1422) = &input.ca_certificate_identifier {
        object.key("CACertificateIdentifier").string(var_1422);
    }
    if let Some(var_1423) = &input.db_cluster_identifier {
        object.key("DBClusterIdentifier").string(var_1423);
    }
    if let Some(var_1424) = &input.db_instance_identifier {
        object.key("DBInstanceIdentifier").string(var_1424);
    }
    if let Some(var_1425) = &input.db_instance_class {
        object.key("DBInstanceClass").string(var_1425);
    }
    if input.db_instance_port != 0 {
        object.key("DbInstancePort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.db_instance_port).into()),
        );
    }
    if let Some(var_1426) = &input.dbi_resource_id {
        object.key("DbiResourceId").string(var_1426);
    }
    if let Some(var_1427) = &input.db_name {
        object.key("DBName").string(var_1427);
    }
    if input.deletion_protection {
        object
            .key("DeletionProtection")
            .boolean(input.deletion_protection);
    }
    if let Some(var_1428) = &input.endpoint {
        let mut object_1429 = object.key("Endpoint").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_instance_endpoint(
            &mut object_1429,
            var_1428,
        );
        object_1429.finish();
    }
    if let Some(var_1430) = &input.engine {
        object.key("Engine").string(var_1430);
    }
    if let Some(var_1431) = &input.engine_version {
        object.key("EngineVersion").string(var_1431);
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IAMDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    if let Some(var_1432) = &input.instance_create_time {
        object.key("InstanceCreateTime").string(var_1432);
    }
    if let Some(var_1433) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1433);
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_1434) = &input.tde_credential_arn {
        object.key("TdeCredentialArn").string(var_1434);
    }
    if let Some(var_1435) = &input.vpc_security_groups {
        let mut array_1436 = object.key("VpcSecurityGroups").start_array();
        for item_1437 in var_1435 {
            {
                let mut object_1438 = array_1436.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_instance_vpc_security_group(
                    &mut object_1438,
                    item_1437,
                );
                object_1438.finish();
            }
        }
        array_1436.finish();
    }
    if input.multi_az {
        object.key("MultiAz").boolean(input.multi_az);
    }
    if let Some(var_1439) = &input.enhanced_monitoring_resource_arn {
        object.key("EnhancedMonitoringResourceArn").string(var_1439);
    }
    if let Some(var_1440) = &input.db_instance_status {
        object.key("DbInstanceStatus").string(var_1440);
    }
    if let Some(var_1441) = &input.master_username {
        object.key("MasterUsername").string(var_1441);
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1442) = &input.preferred_backup_window {
        object.key("PreferredBackupWindow").string(var_1442);
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if let Some(var_1443) = &input.db_security_groups {
        let mut array_1444 = object.key("DbSecurityGroups").start_array();
        for item_1445 in var_1443 {
            {
                array_1444.value().string(item_1445);
            }
        }
        array_1444.finish();
    }
    if let Some(var_1446) = &input.db_parameter_groups {
        let mut array_1447 = object.key("DbParameterGroups").start_array();
        for item_1448 in var_1446 {
            {
                let mut object_1449 = array_1447.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_parameter_group(
                    &mut object_1449,
                    item_1448,
                );
                object_1449.finish();
            }
        }
        array_1447.finish();
    }
    if let Some(var_1450) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1450);
    }
    if let Some(var_1451) = &input.db_subnet_group {
        let mut object_1452 = object.key("DbSubnetGroup").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_subnet_group(&mut object_1452, var_1451);
        object_1452.finish();
    }
    if let Some(var_1453) = &input.preferred_maintenance_window {
        object.key("PreferredMaintenanceWindow").string(var_1453);
    }
    if let Some(var_1454) = &input.pending_modified_values {
        let mut object_1455 = object.key("PendingModifiedValues").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_pending_modified_values(
            &mut object_1455,
            var_1454,
        );
        object_1455.finish();
    }
    if let Some(var_1456) = &input.latest_restorable_time {
        object.key("LatestRestorableTime").string(var_1456);
    }
    if input.auto_minor_version_upgrade {
        object
            .key("AutoMinorVersionUpgrade")
            .boolean(input.auto_minor_version_upgrade);
    }
    if let Some(var_1457) = &input.read_replica_source_db_instance_identifier {
        object
            .key("ReadReplicaSourceDBInstanceIdentifier")
            .string(var_1457);
    }
    if let Some(var_1458) = &input.read_replica_db_instance_identifiers {
        let mut array_1459 = object.key("ReadReplicaDBInstanceIdentifiers").start_array();
        for item_1460 in var_1458 {
            {
                array_1459.value().string(item_1460);
            }
        }
        array_1459.finish();
    }
    if let Some(var_1461) = &input.read_replica_db_cluster_identifiers {
        let mut array_1462 = object.key("ReadReplicaDBClusterIdentifiers").start_array();
        for item_1463 in var_1461 {
            {
                array_1462.value().string(item_1463);
            }
        }
        array_1462.finish();
    }
    if let Some(var_1464) = &input.license_model {
        object.key("LicenseModel").string(var_1464);
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_1465) = &input.option_group_memberships {
        let mut array_1466 = object.key("OptionGroupMemberships").start_array();
        for item_1467 in var_1465 {
            {
                let mut object_1468 = array_1466.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_option_group_membership(
                    &mut object_1468,
                    item_1467,
                );
                object_1468.finish();
            }
        }
        array_1466.finish();
    }
    if let Some(var_1469) = &input.character_set_name {
        object.key("CharacterSetName").string(var_1469);
    }
    if let Some(var_1470) = &input.secondary_availability_zone {
        object.key("SecondaryAvailabilityZone").string(var_1470);
    }
    if let Some(var_1471) = &input.status_infos {
        let mut array_1472 = object.key("StatusInfos").start_array();
        for item_1473 in var_1471 {
            {
                let mut object_1474 = array_1472.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_status_info(
                    &mut object_1474,
                    item_1473,
                );
                object_1474.finish();
            }
        }
        array_1472.finish();
    }
    if let Some(var_1475) = &input.storage_type {
        object.key("StorageType").string(var_1475);
    }
    if let Some(var_1476) = &input.domain_memberships {
        let mut array_1477 = object.key("DomainMemberships").start_array();
        for item_1478 in var_1476 {
            {
                let mut object_1479 = array_1477.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_domain_membership(
                    &mut object_1479,
                    item_1478,
                );
                object_1479.finish();
            }
        }
        array_1477.finish();
    }
    if input.copy_tags_to_snapshot {
        object
            .key("CopyTagsToSnapshot")
            .boolean(input.copy_tags_to_snapshot);
    }
    if input.monitoring_interval != 0 {
        object.key("MonitoringInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.monitoring_interval).into()),
        );
    }
    if let Some(var_1480) = &input.monitoring_role_arn {
        object.key("MonitoringRoleArn").string(var_1480);
    }
    if input.promotion_tier != 0 {
        object.key("PromotionTier").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.promotion_tier).into()),
        );
    }
    if let Some(var_1481) = &input.timezone {
        object.key("Timezone").string(var_1481);
    }
    if input.performance_insights_enabled {
        object
            .key("PerformanceInsightsEnabled")
            .boolean(input.performance_insights_enabled);
    }
    if let Some(var_1482) = &input.performance_insights_kms_key_id {
        object.key("PerformanceInsightsKmsKeyId").string(var_1482);
    }
    if input.performance_insights_retention_period != 0 {
        object.key("PerformanceInsightsRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.performance_insights_retention_period).into()),
        );
    }
    if let Some(var_1483) = &input.enabled_cloud_watch_logs_exports {
        let mut array_1484 = object.key("EnabledCloudWatchLogsExports").start_array();
        for item_1485 in var_1483 {
            {
                array_1484.value().string(item_1485);
            }
        }
        array_1484.finish();
    }
    if let Some(var_1486) = &input.processor_features {
        let mut array_1487 = object.key("ProcessorFeatures").start_array();
        for item_1488 in var_1486 {
            {
                let mut object_1489 = array_1487.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_processor_feature(
                    &mut object_1489,
                    item_1488,
                );
                object_1489.finish();
            }
        }
        array_1487.finish();
    }
    if let Some(var_1490) = &input.listener_endpoint {
        let mut object_1491 = object.key("ListenerEndpoint").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_instance_endpoint(
            &mut object_1491,
            var_1490,
        );
        object_1491.finish();
    }
    if input.max_allocated_storage != 0 {
        object.key("MaxAllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_allocated_storage).into()),
        );
    }
}

pub fn serialize_structure_aws_sns_topic_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSnsTopicDetails,
) {
    if let Some(var_1492) = &input.kms_master_key_id {
        object.key("KmsMasterKeyId").string(var_1492);
    }
    if let Some(var_1493) = &input.subscription {
        let mut array_1494 = object.key("Subscription").start_array();
        for item_1495 in var_1493 {
            {
                let mut object_1496 = array_1494.value().start_object();
                crate::json_ser::serialize_structure_aws_sns_topic_subscription(
                    &mut object_1496,
                    item_1495,
                );
                object_1496.finish();
            }
        }
        array_1494.finish();
    }
    if let Some(var_1497) = &input.topic_name {
        object.key("TopicName").string(var_1497);
    }
    if let Some(var_1498) = &input.owner {
        object.key("Owner").string(var_1498);
    }
}

pub fn serialize_structure_aws_sqs_queue_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSqsQueueDetails,
) {
    if input.kms_data_key_reuse_period_seconds != 0 {
        object.key("KmsDataKeyReusePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.kms_data_key_reuse_period_seconds).into()),
        );
    }
    if let Some(var_1499) = &input.kms_master_key_id {
        object.key("KmsMasterKeyId").string(var_1499);
    }
    if let Some(var_1500) = &input.queue_name {
        object.key("QueueName").string(var_1500);
    }
    if let Some(var_1501) = &input.dead_letter_target_arn {
        object.key("DeadLetterTargetArn").string(var_1501);
    }
}

pub fn serialize_structure_aws_waf_web_acl_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafWebAclDetails,
) {
    if let Some(var_1502) = &input.name {
        object.key("Name").string(var_1502);
    }
    if let Some(var_1503) = &input.default_action {
        object.key("DefaultAction").string(var_1503);
    }
    if let Some(var_1504) = &input.rules {
        let mut array_1505 = object.key("Rules").start_array();
        for item_1506 in var_1504 {
            {
                let mut object_1507 = array_1505.value().start_object();
                crate::json_ser::serialize_structure_aws_waf_web_acl_rule(
                    &mut object_1507,
                    item_1506,
                );
                object_1507.finish();
            }
        }
        array_1505.finish();
    }
    if let Some(var_1508) = &input.web_acl_id {
        object.key("WebAclId").string(var_1508);
    }
}

pub fn serialize_structure_aws_rds_db_snapshot_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSnapshotDetails,
) {
    if let Some(var_1509) = &input.db_snapshot_identifier {
        object.key("DbSnapshotIdentifier").string(var_1509);
    }
    if let Some(var_1510) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_1510);
    }
    if let Some(var_1511) = &input.snapshot_create_time {
        object.key("SnapshotCreateTime").string(var_1511);
    }
    if let Some(var_1512) = &input.engine {
        object.key("Engine").string(var_1512);
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1513) = &input.status {
        object.key("Status").string(var_1513);
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1514) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1514);
    }
    if let Some(var_1515) = &input.vpc_id {
        object.key("VpcId").string(var_1515);
    }
    if let Some(var_1516) = &input.instance_create_time {
        object.key("InstanceCreateTime").string(var_1516);
    }
    if let Some(var_1517) = &input.master_username {
        object.key("MasterUsername").string(var_1517);
    }
    if let Some(var_1518) = &input.engine_version {
        object.key("EngineVersion").string(var_1518);
    }
    if let Some(var_1519) = &input.license_model {
        object.key("LicenseModel").string(var_1519);
    }
    if let Some(var_1520) = &input.snapshot_type {
        object.key("SnapshotType").string(var_1520);
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_1521) = &input.option_group_name {
        object.key("OptionGroupName").string(var_1521);
    }
    if input.percent_progress != 0 {
        object.key("PercentProgress").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.percent_progress).into()),
        );
    }
    if let Some(var_1522) = &input.source_region {
        object.key("SourceRegion").string(var_1522);
    }
    if let Some(var_1523) = &input.source_db_snapshot_identifier {
        object.key("SourceDbSnapshotIdentifier").string(var_1523);
    }
    if let Some(var_1524) = &input.storage_type {
        object.key("StorageType").string(var_1524);
    }
    if let Some(var_1525) = &input.tde_credential_arn {
        object.key("TdeCredentialArn").string(var_1525);
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if let Some(var_1526) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1526);
    }
    if let Some(var_1527) = &input.timezone {
        object.key("Timezone").string(var_1527);
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    if let Some(var_1528) = &input.processor_features {
        let mut array_1529 = object.key("ProcessorFeatures").start_array();
        for item_1530 in var_1528 {
            {
                let mut object_1531 = array_1529.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_processor_feature(
                    &mut object_1531,
                    item_1530,
                );
                object_1531.finish();
            }
        }
        array_1529.finish();
    }
    if let Some(var_1532) = &input.dbi_resource_id {
        object.key("DbiResourceId").string(var_1532);
    }
}

pub fn serialize_structure_aws_rds_db_cluster_snapshot_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterSnapshotDetails,
) {
    if let Some(var_1533) = &input.availability_zones {
        let mut array_1534 = object.key("AvailabilityZones").start_array();
        for item_1535 in var_1533 {
            {
                array_1534.value().string(item_1535);
            }
        }
        array_1534.finish();
    }
    if let Some(var_1536) = &input.snapshot_create_time {
        object.key("SnapshotCreateTime").string(var_1536);
    }
    if let Some(var_1537) = &input.engine {
        object.key("Engine").string(var_1537);
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1538) = &input.status {
        object.key("Status").string(var_1538);
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1539) = &input.vpc_id {
        object.key("VpcId").string(var_1539);
    }
    if let Some(var_1540) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_1540);
    }
    if let Some(var_1541) = &input.master_username {
        object.key("MasterUsername").string(var_1541);
    }
    if let Some(var_1542) = &input.engine_version {
        object.key("EngineVersion").string(var_1542);
    }
    if let Some(var_1543) = &input.license_model {
        object.key("LicenseModel").string(var_1543);
    }
    if let Some(var_1544) = &input.snapshot_type {
        object.key("SnapshotType").string(var_1544);
    }
    if input.percent_progress != 0 {
        object.key("PercentProgress").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.percent_progress).into()),
        );
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_1545) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1545);
    }
    if let Some(var_1546) = &input.db_cluster_identifier {
        object.key("DbClusterIdentifier").string(var_1546);
    }
    if let Some(var_1547) = &input.db_cluster_snapshot_identifier {
        object.key("DbClusterSnapshotIdentifier").string(var_1547);
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
}

pub fn serialize_structure_aws_rds_db_cluster_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterDetails,
) {
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1548) = &input.availability_zones {
        let mut array_1549 = object.key("AvailabilityZones").start_array();
        for item_1550 in var_1548 {
            {
                array_1549.value().string(item_1550);
            }
        }
        array_1549.finish();
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if let Some(var_1551) = &input.database_name {
        object.key("DatabaseName").string(var_1551);
    }
    if let Some(var_1552) = &input.status {
        object.key("Status").string(var_1552);
    }
    if let Some(var_1553) = &input.endpoint {
        object.key("Endpoint").string(var_1553);
    }
    if let Some(var_1554) = &input.reader_endpoint {
        object.key("ReaderEndpoint").string(var_1554);
    }
    if let Some(var_1555) = &input.custom_endpoints {
        let mut array_1556 = object.key("CustomEndpoints").start_array();
        for item_1557 in var_1555 {
            {
                array_1556.value().string(item_1557);
            }
        }
        array_1556.finish();
    }
    if input.multi_az {
        object.key("MultiAz").boolean(input.multi_az);
    }
    if let Some(var_1558) = &input.engine {
        object.key("Engine").string(var_1558);
    }
    if let Some(var_1559) = &input.engine_version {
        object.key("EngineVersion").string(var_1559);
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1560) = &input.master_username {
        object.key("MasterUsername").string(var_1560);
    }
    if let Some(var_1561) = &input.preferred_backup_window {
        object.key("PreferredBackupWindow").string(var_1561);
    }
    if let Some(var_1562) = &input.preferred_maintenance_window {
        object.key("PreferredMaintenanceWindow").string(var_1562);
    }
    if let Some(var_1563) = &input.read_replica_identifiers {
        let mut array_1564 = object.key("ReadReplicaIdentifiers").start_array();
        for item_1565 in var_1563 {
            {
                array_1564.value().string(item_1565);
            }
        }
        array_1564.finish();
    }
    if let Some(var_1566) = &input.vpc_security_groups {
        let mut array_1567 = object.key("VpcSecurityGroups").start_array();
        for item_1568 in var_1566 {
            {
                let mut object_1569 = array_1567.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_instance_vpc_security_group(
                    &mut object_1569,
                    item_1568,
                );
                object_1569.finish();
            }
        }
        array_1567.finish();
    }
    if let Some(var_1570) = &input.hosted_zone_id {
        object.key("HostedZoneId").string(var_1570);
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_1571) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1571);
    }
    if let Some(var_1572) = &input.db_cluster_resource_id {
        object.key("DbClusterResourceId").string(var_1572);
    }
    if let Some(var_1573) = &input.associated_roles {
        let mut array_1574 = object.key("AssociatedRoles").start_array();
        for item_1575 in var_1573 {
            {
                let mut object_1576 = array_1574.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_cluster_associated_role(
                    &mut object_1576,
                    item_1575,
                );
                object_1576.finish();
            }
        }
        array_1574.finish();
    }
    if let Some(var_1577) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_1577);
    }
    if let Some(var_1578) = &input.enabled_cloud_watch_logs_exports {
        let mut array_1579 = object.key("EnabledCloudWatchLogsExports").start_array();
        for item_1580 in var_1578 {
            {
                array_1579.value().string(item_1580);
            }
        }
        array_1579.finish();
    }
    if let Some(var_1581) = &input.engine_mode {
        object.key("EngineMode").string(var_1581);
    }
    if input.deletion_protection {
        object
            .key("DeletionProtection")
            .boolean(input.deletion_protection);
    }
    if input.http_endpoint_enabled {
        object
            .key("HttpEndpointEnabled")
            .boolean(input.http_endpoint_enabled);
    }
    if let Some(var_1582) = &input.activity_stream_status {
        object.key("ActivityStreamStatus").string(var_1582);
    }
    if input.copy_tags_to_snapshot {
        object
            .key("CopyTagsToSnapshot")
            .boolean(input.copy_tags_to_snapshot);
    }
    if input.cross_account_clone {
        object
            .key("CrossAccountClone")
            .boolean(input.cross_account_clone);
    }
    if let Some(var_1583) = &input.domain_memberships {
        let mut array_1584 = object.key("DomainMemberships").start_array();
        for item_1585 in var_1583 {
            {
                let mut object_1586 = array_1584.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_domain_membership(
                    &mut object_1586,
                    item_1585,
                );
                object_1586.finish();
            }
        }
        array_1584.finish();
    }
    if let Some(var_1587) = &input.db_cluster_parameter_group {
        object.key("DbClusterParameterGroup").string(var_1587);
    }
    if let Some(var_1588) = &input.db_subnet_group {
        object.key("DbSubnetGroup").string(var_1588);
    }
    if let Some(var_1589) = &input.db_cluster_option_group_memberships {
        let mut array_1590 = object.key("DbClusterOptionGroupMemberships").start_array();
        for item_1591 in var_1589 {
            {
                let mut object_1592 = array_1590.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_cluster_option_group_membership(
                    &mut object_1592,
                    item_1591,
                );
                object_1592.finish();
            }
        }
        array_1590.finish();
    }
    if let Some(var_1593) = &input.db_cluster_identifier {
        object.key("DbClusterIdentifier").string(var_1593);
    }
    if let Some(var_1594) = &input.db_cluster_members {
        let mut array_1595 = object.key("DbClusterMembers").start_array();
        for item_1596 in var_1594 {
            {
                let mut object_1597 = array_1595.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_cluster_member(
                    &mut object_1597,
                    item_1596,
                );
                object_1597.finish();
            }
        }
        array_1595.finish();
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
}

pub fn serialize_structure_aws_ecs_cluster_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterDetails,
) {
    if let Some(var_1598) = &input.capacity_providers {
        let mut array_1599 = object.key("CapacityProviders").start_array();
        for item_1600 in var_1598 {
            {
                array_1599.value().string(item_1600);
            }
        }
        array_1599.finish();
    }
    if let Some(var_1601) = &input.cluster_settings {
        let mut array_1602 = object.key("ClusterSettings").start_array();
        for item_1603 in var_1601 {
            {
                let mut object_1604 = array_1602.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_cluster_cluster_settings_details(
                    &mut object_1604,
                    item_1603,
                );
                object_1604.finish();
            }
        }
        array_1602.finish();
    }
    if let Some(var_1605) = &input.configuration {
        let mut object_1606 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_cluster_configuration_details(
            &mut object_1606,
            var_1605,
        );
        object_1606.finish();
    }
    if let Some(var_1607) = &input.default_capacity_provider_strategy {
        let mut array_1608 = object.key("DefaultCapacityProviderStrategy").start_array();
        for item_1609 in var_1607 {
            {
                let mut object_1610 = array_1608.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_cluster_default_capacity_provider_strategy_details(&mut object_1610, item_1609);
                object_1610.finish();
            }
        }
        array_1608.finish();
    }
}

pub fn serialize_structure_aws_ecs_task_definition_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionDetails,
) {
    if let Some(var_1611) = &input.container_definitions {
        let mut array_1612 = object.key("ContainerDefinitions").start_array();
        for item_1613 in var_1611 {
            {
                let mut object_1614 = array_1612.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_details(&mut object_1614, item_1613);
                object_1614.finish();
            }
        }
        array_1612.finish();
    }
    if let Some(var_1615) = &input.cpu {
        object.key("Cpu").string(var_1615);
    }
    if let Some(var_1616) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_1616);
    }
    if let Some(var_1617) = &input.family {
        object.key("Family").string(var_1617);
    }
    if let Some(var_1618) = &input.inference_accelerators {
        let mut array_1619 = object.key("InferenceAccelerators").start_array();
        for item_1620 in var_1618 {
            {
                let mut object_1621 = array_1619.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_inference_accelerators_details(&mut object_1621, item_1620);
                object_1621.finish();
            }
        }
        array_1619.finish();
    }
    if let Some(var_1622) = &input.ipc_mode {
        object.key("IpcMode").string(var_1622);
    }
    if let Some(var_1623) = &input.memory {
        object.key("Memory").string(var_1623);
    }
    if let Some(var_1624) = &input.network_mode {
        object.key("NetworkMode").string(var_1624);
    }
    if let Some(var_1625) = &input.pid_mode {
        object.key("PidMode").string(var_1625);
    }
    if let Some(var_1626) = &input.placement_constraints {
        let mut array_1627 = object.key("PlacementConstraints").start_array();
        for item_1628 in var_1626 {
            {
                let mut object_1629 = array_1627.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_placement_constraints_details(&mut object_1629, item_1628);
                object_1629.finish();
            }
        }
        array_1627.finish();
    }
    if let Some(var_1630) = &input.proxy_configuration {
        let mut object_1631 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_proxy_configuration_details(
            &mut object_1631,
            var_1630,
        );
        object_1631.finish();
    }
    if let Some(var_1632) = &input.requires_compatibilities {
        let mut array_1633 = object.key("RequiresCompatibilities").start_array();
        for item_1634 in var_1632 {
            {
                array_1633.value().string(item_1634);
            }
        }
        array_1633.finish();
    }
    if let Some(var_1635) = &input.task_role_arn {
        object.key("TaskRoleArn").string(var_1635);
    }
    if let Some(var_1636) = &input.volumes {
        let mut array_1637 = object.key("Volumes").start_array();
        for item_1638 in var_1636 {
            {
                let mut object_1639 = array_1637.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_volumes_details(
                    &mut object_1639,
                    item_1638,
                );
                object_1639.finish();
            }
        }
        array_1637.finish();
    }
}

pub fn serialize_structure_container_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDetails,
) {
    if let Some(var_1640) = &input.name {
        object.key("Name").string(var_1640);
    }
    if let Some(var_1641) = &input.image_id {
        object.key("ImageId").string(var_1641);
    }
    if let Some(var_1642) = &input.image_name {
        object.key("ImageName").string(var_1642);
    }
    if let Some(var_1643) = &input.launched_at {
        object.key("LaunchedAt").string(var_1643);
    }
}

pub fn serialize_structure_aws_rds_event_subscription_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsEventSubscriptionDetails,
) {
    if let Some(var_1644) = &input.cust_subscription_id {
        object.key("CustSubscriptionId").string(var_1644);
    }
    if let Some(var_1645) = &input.customer_aws_id {
        object.key("CustomerAwsId").string(var_1645);
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_1646) = &input.event_categories_list {
        let mut array_1647 = object.key("EventCategoriesList").start_array();
        for item_1648 in var_1646 {
            {
                array_1647.value().string(item_1648);
            }
        }
        array_1647.finish();
    }
    if let Some(var_1649) = &input.event_subscription_arn {
        object.key("EventSubscriptionArn").string(var_1649);
    }
    if let Some(var_1650) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1650);
    }
    if let Some(var_1651) = &input.source_ids_list {
        let mut array_1652 = object.key("SourceIdsList").start_array();
        for item_1653 in var_1651 {
            {
                array_1652.value().string(item_1653);
            }
        }
        array_1652.finish();
    }
    if let Some(var_1654) = &input.source_type {
        object.key("SourceType").string(var_1654);
    }
    if let Some(var_1655) = &input.status {
        object.key("Status").string(var_1655);
    }
    if let Some(var_1656) = &input.subscription_creation_time {
        object.key("SubscriptionCreationTime").string(var_1656);
    }
}

pub fn serialize_structure_aws_ecs_service_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDetails,
) {
    if let Some(var_1657) = &input.capacity_provider_strategy {
        let mut array_1658 = object.key("CapacityProviderStrategy").start_array();
        for item_1659 in var_1657 {
            {
                let mut object_1660 = array_1658.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_service_capacity_provider_strategy_details(&mut object_1660, item_1659);
                object_1660.finish();
            }
        }
        array_1658.finish();
    }
    if let Some(var_1661) = &input.cluster {
        object.key("Cluster").string(var_1661);
    }
    if let Some(var_1662) = &input.deployment_configuration {
        let mut object_1663 = object.key("DeploymentConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_service_deployment_configuration_details(
            &mut object_1663,
            var_1662,
        );
        object_1663.finish();
    }
    if let Some(var_1664) = &input.deployment_controller {
        let mut object_1665 = object.key("DeploymentController").start_object();
        crate::json_ser::serialize_structure_aws_ecs_service_deployment_controller_details(
            &mut object_1665,
            var_1664,
        );
        object_1665.finish();
    }
    if input.desired_count != 0 {
        object.key("DesiredCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.desired_count).into()),
        );
    }
    if input.enable_ecs_managed_tags {
        object
            .key("EnableEcsManagedTags")
            .boolean(input.enable_ecs_managed_tags);
    }
    if input.enable_execute_command {
        object
            .key("EnableExecuteCommand")
            .boolean(input.enable_execute_command);
    }
    if input.health_check_grace_period_seconds != 0 {
        object.key("HealthCheckGracePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.health_check_grace_period_seconds).into()),
        );
    }
    if let Some(var_1666) = &input.launch_type {
        object.key("LaunchType").string(var_1666);
    }
    if let Some(var_1667) = &input.load_balancers {
        let mut array_1668 = object.key("LoadBalancers").start_array();
        for item_1669 in var_1667 {
            {
                let mut object_1670 = array_1668.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_service_load_balancers_details(
                    &mut object_1670,
                    item_1669,
                );
                object_1670.finish();
            }
        }
        array_1668.finish();
    }
    if let Some(var_1671) = &input.name {
        object.key("Name").string(var_1671);
    }
    if let Some(var_1672) = &input.network_configuration {
        let mut object_1673 = object.key("NetworkConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_service_network_configuration_details(
            &mut object_1673,
            var_1672,
        );
        object_1673.finish();
    }
    if let Some(var_1674) = &input.placement_constraints {
        let mut array_1675 = object.key("PlacementConstraints").start_array();
        for item_1676 in var_1674 {
            {
                let mut object_1677 = array_1675.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_service_placement_constraints_details(
                    &mut object_1677,
                    item_1676,
                );
                object_1677.finish();
            }
        }
        array_1675.finish();
    }
    if let Some(var_1678) = &input.placement_strategies {
        let mut array_1679 = object.key("PlacementStrategies").start_array();
        for item_1680 in var_1678 {
            {
                let mut object_1681 = array_1679.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_service_placement_strategies_details(
                    &mut object_1681,
                    item_1680,
                );
                object_1681.finish();
            }
        }
        array_1679.finish();
    }
    if let Some(var_1682) = &input.platform_version {
        object.key("PlatformVersion").string(var_1682);
    }
    if let Some(var_1683) = &input.propagate_tags {
        object.key("PropagateTags").string(var_1683);
    }
    if let Some(var_1684) = &input.role {
        object.key("Role").string(var_1684);
    }
    if let Some(var_1685) = &input.scheduling_strategy {
        object.key("SchedulingStrategy").string(var_1685);
    }
    if let Some(var_1686) = &input.service_arn {
        object.key("ServiceArn").string(var_1686);
    }
    if let Some(var_1687) = &input.service_name {
        object.key("ServiceName").string(var_1687);
    }
    if let Some(var_1688) = &input.service_registries {
        let mut array_1689 = object.key("ServiceRegistries").start_array();
        for item_1690 in var_1688 {
            {
                let mut object_1691 = array_1689.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_service_service_registries_details(
                    &mut object_1691,
                    item_1690,
                );
                object_1691.finish();
            }
        }
        array_1689.finish();
    }
    if let Some(var_1692) = &input.task_definition {
        object.key("TaskDefinition").string(var_1692);
    }
}

pub fn serialize_structure_action_remote_ip_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionRemoteIpDetails,
) {
    if let Some(var_1693) = &input.ip_address_v4 {
        object.key("IpAddressV4").string(var_1693);
    }
    if let Some(var_1694) = &input.organization {
        let mut object_1695 = object.key("Organization").start_object();
        crate::json_ser::serialize_structure_ip_organization_details(&mut object_1695, var_1694);
        object_1695.finish();
    }
    if let Some(var_1696) = &input.country {
        let mut object_1697 = object.key("Country").start_object();
        crate::json_ser::serialize_structure_country(&mut object_1697, var_1696);
        object_1697.finish();
    }
    if let Some(var_1698) = &input.city {
        let mut object_1699 = object.key("City").start_object();
        crate::json_ser::serialize_structure_city(&mut object_1699, var_1698);
        object_1699.finish();
    }
    if let Some(var_1700) = &input.geo_location {
        let mut object_1701 = object.key("GeoLocation").start_object();
        crate::json_ser::serialize_structure_geo_location(&mut object_1701, var_1700);
        object_1701.finish();
    }
}

pub fn serialize_structure_action_remote_port_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionRemotePortDetails,
) {
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1702) = &input.port_name {
        object.key("PortName").string(var_1702);
    }
}

pub fn serialize_structure_action_local_port_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionLocalPortDetails,
) {
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1703) = &input.port_name {
        object.key("PortName").string(var_1703);
    }
}

pub fn serialize_structure_aws_api_call_action_domain_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiCallActionDomainDetails,
) {
    if let Some(var_1704) = &input.domain {
        object.key("Domain").string(var_1704);
    }
}

pub fn serialize_structure_port_probe_detail(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortProbeDetail,
) {
    if let Some(var_1705) = &input.local_port_details {
        let mut object_1706 = object.key("LocalPortDetails").start_object();
        crate::json_ser::serialize_structure_action_local_port_details(&mut object_1706, var_1705);
        object_1706.finish();
    }
    if let Some(var_1707) = &input.local_ip_details {
        let mut object_1708 = object.key("LocalIpDetails").start_object();
        crate::json_ser::serialize_structure_action_local_ip_details(&mut object_1708, var_1707);
        object_1708.finish();
    }
    if let Some(var_1709) = &input.remote_ip_details {
        let mut object_1710 = object.key("RemoteIpDetails").start_object();
        crate::json_ser::serialize_structure_action_remote_ip_details(&mut object_1710, var_1709);
        object_1710.finish();
    }
}

pub fn serialize_structure_classification_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClassificationStatus,
) {
    if let Some(var_1711) = &input.code {
        object.key("Code").string(var_1711);
    }
    if let Some(var_1712) = &input.reason {
        object.key("Reason").string(var_1712);
    }
}

pub fn serialize_structure_sensitive_data_result(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SensitiveDataResult,
) {
    if let Some(var_1713) = &input.category {
        object.key("Category").string(var_1713);
    }
    if let Some(var_1714) = &input.detections {
        let mut array_1715 = object.key("Detections").start_array();
        for item_1716 in var_1714 {
            {
                let mut object_1717 = array_1715.value().start_object();
                crate::json_ser::serialize_structure_sensitive_data_detections(
                    &mut object_1717,
                    item_1716,
                );
                object_1717.finish();
            }
        }
        array_1715.finish();
    }
    if input.total_count != 0 {
        object.key("TotalCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.total_count).into()),
        );
    }
}

pub fn serialize_structure_custom_data_identifiers_result(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDataIdentifiersResult,
) {
    if let Some(var_1718) = &input.detections {
        let mut array_1719 = object.key("Detections").start_array();
        for item_1720 in var_1718 {
            {
                let mut object_1721 = array_1719.value().start_object();
                crate::json_ser::serialize_structure_custom_data_identifiers_detections(
                    &mut object_1721,
                    item_1720,
                );
                object_1721.finish();
            }
        }
        array_1719.finish();
    }
    if input.total_count != 0 {
        object.key("TotalCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.total_count).into()),
        );
    }
}

pub fn serialize_structure_aws_code_build_project_environment(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectEnvironment,
) {
    if let Some(var_1722) = &input.certificate {
        object.key("Certificate").string(var_1722);
    }
    if let Some(var_1723) = &input.image_pull_credentials_type {
        object.key("ImagePullCredentialsType").string(var_1723);
    }
    if let Some(var_1724) = &input.registry_credential {
        let mut object_1725 = object.key("RegistryCredential").start_object();
        crate::json_ser::serialize_structure_aws_code_build_project_environment_registry_credential(
            &mut object_1725,
            var_1724,
        );
        object_1725.finish();
    }
    if let Some(var_1726) = &input.r#type {
        object.key("Type").string(var_1726);
    }
}

pub fn serialize_structure_aws_code_build_project_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectSource,
) {
    if let Some(var_1727) = &input.r#type {
        object.key("Type").string(var_1727);
    }
    if let Some(var_1728) = &input.location {
        object.key("Location").string(var_1728);
    }
    if input.git_clone_depth != 0 {
        object.key("GitCloneDepth").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.git_clone_depth).into()),
        );
    }
    if input.insecure_ssl {
        object.key("InsecureSsl").boolean(input.insecure_ssl);
    }
}

pub fn serialize_structure_aws_code_build_project_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectVpcConfig,
) {
    if let Some(var_1729) = &input.vpc_id {
        object.key("VpcId").string(var_1729);
    }
    if let Some(var_1730) = &input.subnets {
        let mut array_1731 = object.key("Subnets").start_array();
        for item_1732 in var_1730 {
            {
                array_1731.value().string(item_1732);
            }
        }
        array_1731.finish();
    }
    if let Some(var_1733) = &input.security_group_ids {
        let mut array_1734 = object.key("SecurityGroupIds").start_array();
        for item_1735 in var_1733 {
            {
                array_1734.value().string(item_1735);
            }
        }
        array_1734.finish();
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_cache_behaviors(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionCacheBehaviors,
) {
    if let Some(var_1736) = &input.items {
        let mut array_1737 = object.key("Items").start_array();
        for item_1738 in var_1736 {
            {
                let mut object_1739 = array_1737.value().start_object();
                crate::json_ser::serialize_structure_aws_cloud_front_distribution_cache_behavior(
                    &mut object_1739,
                    item_1738,
                );
                object_1739.finish();
            }
        }
        array_1737.finish();
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_default_cache_behavior(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionDefaultCacheBehavior,
) {
    if let Some(var_1740) = &input.viewer_protocol_policy {
        object.key("ViewerProtocolPolicy").string(var_1740);
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_logging(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionLogging,
) {
    if let Some(var_1741) = &input.bucket {
        object.key("Bucket").string(var_1741);
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if input.include_cookies {
        object.key("IncludeCookies").boolean(input.include_cookies);
    }
    if let Some(var_1742) = &input.prefix {
        object.key("Prefix").string(var_1742);
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_origins(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOrigins,
) {
    if let Some(var_1743) = &input.items {
        let mut array_1744 = object.key("Items").start_array();
        for item_1745 in var_1743 {
            {
                let mut object_1746 = array_1744.value().start_object();
                crate::json_ser::serialize_structure_aws_cloud_front_distribution_origin_item(
                    &mut object_1746,
                    item_1745,
                );
                object_1746.finish();
            }
        }
        array_1744.finish();
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_origin_groups(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroups,
) {
    if let Some(var_1747) = &input.items {
        let mut array_1748 = object.key("Items").start_array();
        for item_1749 in var_1747 {
            {
                let mut object_1750 = array_1748.value().start_object();
                crate::json_ser::serialize_structure_aws_cloud_front_distribution_origin_group(
                    &mut object_1750,
                    item_1749,
                );
                object_1750.finish();
            }
        }
        array_1748.finish();
    }
}

pub fn serialize_structure_aws_ec2_instance_network_interfaces_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2InstanceNetworkInterfacesDetails,
) {
    if let Some(var_1751) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_1751);
    }
}

pub fn serialize_structure_aws_ec2_network_interface_attachment(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceAttachment,
) {
    if let Some(var_1752) = &input.attach_time {
        object.key("AttachTime").string(var_1752);
    }
    if let Some(var_1753) = &input.attachment_id {
        object.key("AttachmentId").string(var_1753);
    }
    if input.delete_on_termination {
        object
            .key("DeleteOnTermination")
            .boolean(input.delete_on_termination);
    }
    if input.device_index != 0 {
        object.key("DeviceIndex").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.device_index).into()),
        );
    }
    if let Some(var_1754) = &input.instance_id {
        object.key("InstanceId").string(var_1754);
    }
    if let Some(var_1755) = &input.instance_owner_id {
        object.key("InstanceOwnerId").string(var_1755);
    }
    if let Some(var_1756) = &input.status {
        object.key("Status").string(var_1756);
    }
}

pub fn serialize_structure_aws_ec2_network_interface_security_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceSecurityGroup,
) {
    if let Some(var_1757) = &input.group_name {
        object.key("GroupName").string(var_1757);
    }
    if let Some(var_1758) = &input.group_id {
        object.key("GroupId").string(var_1758);
    }
}

pub fn serialize_structure_aws_ec2_network_interface_ip_v6_address_detail(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceIpV6AddressDetail,
) {
    if let Some(var_1759) = &input.ip_v6_address {
        object.key("IpV6Address").string(var_1759);
    }
}

pub fn serialize_structure_aws_ec2_network_interface_private_ip_address_detail(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfacePrivateIpAddressDetail,
) {
    if let Some(var_1760) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_1760);
    }
    if let Some(var_1761) = &input.private_dns_name {
        object.key("PrivateDnsName").string(var_1761);
    }
}

pub fn serialize_structure_aws_ec2_security_group_ip_permission(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupIpPermission,
) {
    if let Some(var_1762) = &input.ip_protocol {
        object.key("IpProtocol").string(var_1762);
    }
    if input.from_port != 0 {
        object.key("FromPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    if input.to_port != 0 {
        object.key("ToPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
    if let Some(var_1763) = &input.user_id_group_pairs {
        let mut array_1764 = object.key("UserIdGroupPairs").start_array();
        for item_1765 in var_1763 {
            {
                let mut object_1766 = array_1764.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_security_group_user_id_group_pair(
                    &mut object_1766,
                    item_1765,
                );
                object_1766.finish();
            }
        }
        array_1764.finish();
    }
    if let Some(var_1767) = &input.ip_ranges {
        let mut array_1768 = object.key("IpRanges").start_array();
        for item_1769 in var_1767 {
            {
                let mut object_1770 = array_1768.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_security_group_ip_range(
                    &mut object_1770,
                    item_1769,
                );
                object_1770.finish();
            }
        }
        array_1768.finish();
    }
    if let Some(var_1771) = &input.ipv6_ranges {
        let mut array_1772 = object.key("Ipv6Ranges").start_array();
        for item_1773 in var_1771 {
            {
                let mut object_1774 = array_1772.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_security_group_ipv6_range(
                    &mut object_1774,
                    item_1773,
                );
                object_1774.finish();
            }
        }
        array_1772.finish();
    }
    if let Some(var_1775) = &input.prefix_list_ids {
        let mut array_1776 = object.key("PrefixListIds").start_array();
        for item_1777 in var_1775 {
            {
                let mut object_1778 = array_1776.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_security_group_prefix_list_id(
                    &mut object_1778,
                    item_1777,
                );
                object_1778.finish();
            }
        }
        array_1776.finish();
    }
}

pub fn serialize_structure_aws_ec2_volume_attachment(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VolumeAttachment,
) {
    if let Some(var_1779) = &input.attach_time {
        object.key("AttachTime").string(var_1779);
    }
    if input.delete_on_termination {
        object
            .key("DeleteOnTermination")
            .boolean(input.delete_on_termination);
    }
    if let Some(var_1780) = &input.instance_id {
        object.key("InstanceId").string(var_1780);
    }
    if let Some(var_1781) = &input.status {
        object.key("Status").string(var_1781);
    }
}

pub fn serialize_structure_cidr_block_association(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CidrBlockAssociation,
) {
    if let Some(var_1782) = &input.association_id {
        object.key("AssociationId").string(var_1782);
    }
    if let Some(var_1783) = &input.cidr_block {
        object.key("CidrBlock").string(var_1783);
    }
    if let Some(var_1784) = &input.cidr_block_state {
        object.key("CidrBlockState").string(var_1784);
    }
}

pub fn serialize_structure_ipv6_cidr_block_association(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ipv6CidrBlockAssociation,
) {
    if let Some(var_1785) = &input.association_id {
        object.key("AssociationId").string(var_1785);
    }
    if let Some(var_1786) = &input.ipv6_cidr_block {
        object.key("Ipv6CidrBlock").string(var_1786);
    }
    if let Some(var_1787) = &input.cidr_block_state {
        object.key("CidrBlockState").string(var_1787);
    }
}

pub fn serialize_structure_aws_ec2_network_acl_association(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkAclAssociation,
) {
    if let Some(var_1788) = &input.network_acl_association_id {
        object.key("NetworkAclAssociationId").string(var_1788);
    }
    if let Some(var_1789) = &input.network_acl_id {
        object.key("NetworkAclId").string(var_1789);
    }
    if let Some(var_1790) = &input.subnet_id {
        object.key("SubnetId").string(var_1790);
    }
}

pub fn serialize_structure_aws_ec2_network_acl_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkAclEntry,
) {
    if let Some(var_1791) = &input.cidr_block {
        object.key("CidrBlock").string(var_1791);
    }
    if input.egress {
        object.key("Egress").boolean(input.egress);
    }
    if let Some(var_1792) = &input.icmp_type_code {
        let mut object_1793 = object.key("IcmpTypeCode").start_object();
        crate::json_ser::serialize_structure_icmp_type_code(&mut object_1793, var_1792);
        object_1793.finish();
    }
    if let Some(var_1794) = &input.ipv6_cidr_block {
        object.key("Ipv6CidrBlock").string(var_1794);
    }
    if let Some(var_1795) = &input.port_range {
        let mut object_1796 = object.key("PortRange").start_object();
        crate::json_ser::serialize_structure_port_range_from_to(&mut object_1796, var_1795);
        object_1796.finish();
    }
    if let Some(var_1797) = &input.protocol {
        object.key("Protocol").string(var_1797);
    }
    if let Some(var_1798) = &input.rule_action {
        object.key("RuleAction").string(var_1798);
    }
    if input.rule_number != 0 {
        object.key("RuleNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.rule_number).into()),
        );
    }
}

pub fn serialize_structure_availability_zone(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AvailabilityZone,
) {
    if let Some(var_1799) = &input.zone_name {
        object.key("ZoneName").string(var_1799);
    }
    if let Some(var_1800) = &input.subnet_id {
        object.key("SubnetId").string(var_1800);
    }
}

pub fn serialize_structure_load_balancer_state(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoadBalancerState,
) {
    if let Some(var_1801) = &input.code {
        object.key("Code").string(var_1801);
    }
    if let Some(var_1802) = &input.reason {
        object.key("Reason").string(var_1802);
    }
}

pub fn serialize_structure_aws_elastic_beanstalk_environment_environment_link(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentEnvironmentLink,
) {
    if let Some(var_1803) = &input.environment_name {
        object.key("EnvironmentName").string(var_1803);
    }
    if let Some(var_1804) = &input.link_name {
        object.key("LinkName").string(var_1804);
    }
}

pub fn serialize_structure_aws_elastic_beanstalk_environment_option_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentOptionSetting,
) {
    if let Some(var_1805) = &input.namespace {
        object.key("Namespace").string(var_1805);
    }
    if let Some(var_1806) = &input.option_name {
        object.key("OptionName").string(var_1806);
    }
    if let Some(var_1807) = &input.resource_name {
        object.key("ResourceName").string(var_1807);
    }
    if let Some(var_1808) = &input.value {
        object.key("Value").string(var_1808);
    }
}

pub fn serialize_structure_aws_elastic_beanstalk_environment_tier(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentTier,
) {
    if let Some(var_1809) = &input.name {
        object.key("Name").string(var_1809);
    }
    if let Some(var_1810) = &input.r#type {
        object.key("Type").string(var_1810);
    }
    if let Some(var_1811) = &input.version {
        object.key("Version").string(var_1811);
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_domain_endpoint_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainDomainEndpointOptions,
) {
    if input.enforce_https {
        object.key("EnforceHTTPS").boolean(input.enforce_https);
    }
    if let Some(var_1812) = &input.tls_security_policy {
        object.key("TLSSecurityPolicy").string(var_1812);
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_elasticsearch_cluster_config_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainElasticsearchClusterConfigDetails,
) {
    if input.dedicated_master_count != 0 {
        object.key("DedicatedMasterCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.dedicated_master_count).into()),
        );
    }
    if input.dedicated_master_enabled {
        object
            .key("DedicatedMasterEnabled")
            .boolean(input.dedicated_master_enabled);
    }
    if let Some(var_1813) = &input.dedicated_master_type {
        object.key("DedicatedMasterType").string(var_1813);
    }
    if input.instance_count != 0 {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    if let Some(var_1814) = &input.instance_type {
        object.key("InstanceType").string(var_1814);
    }
    if let Some(var_1815) = &input.zone_awareness_config {
        let mut object_1816 = object.key("ZoneAwarenessConfig").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_elasticsearch_cluster_config_zone_awareness_config_details(&mut object_1816, var_1815);
        object_1816.finish();
    }
    if input.zone_awareness_enabled {
        object
            .key("ZoneAwarenessEnabled")
            .boolean(input.zone_awareness_enabled);
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_encryption_at_rest_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainEncryptionAtRestOptions,
) {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_1817) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1817);
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_log_publishing_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainLogPublishingOptions,
) {
    if let Some(var_1818) = &input.index_slow_logs {
        let mut object_1819 = object.key("IndexSlowLogs").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_log_publishing_options_log_config(&mut object_1819, var_1818);
        object_1819.finish();
    }
    if let Some(var_1820) = &input.search_slow_logs {
        let mut object_1821 = object.key("SearchSlowLogs").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_log_publishing_options_log_config(&mut object_1821, var_1820);
        object_1821.finish();
    }
    if let Some(var_1822) = &input.audit_logs {
        let mut object_1823 = object.key("AuditLogs").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_log_publishing_options_log_config(&mut object_1823, var_1822);
        object_1823.finish();
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_node_to_node_encryption_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainNodeToNodeEncryptionOptions,
) {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_service_software_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainServiceSoftwareOptions,
) {
    if let Some(var_1824) = &input.automated_update_date {
        object.key("AutomatedUpdateDate").string(var_1824);
    }
    if input.cancellable {
        object.key("Cancellable").boolean(input.cancellable);
    }
    if let Some(var_1825) = &input.current_version {
        object.key("CurrentVersion").string(var_1825);
    }
    if let Some(var_1826) = &input.description {
        object.key("Description").string(var_1826);
    }
    if let Some(var_1827) = &input.new_version {
        object.key("NewVersion").string(var_1827);
    }
    if input.update_available {
        object
            .key("UpdateAvailable")
            .boolean(input.update_available);
    }
    if let Some(var_1828) = &input.update_status {
        object.key("UpdateStatus").string(var_1828);
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_vpc_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainVpcOptions,
) {
    if let Some(var_1829) = &input.availability_zones {
        let mut array_1830 = object.key("AvailabilityZones").start_array();
        for item_1831 in var_1829 {
            {
                array_1830.value().string(item_1831);
            }
        }
        array_1830.finish();
    }
    if let Some(var_1832) = &input.security_group_ids {
        let mut array_1833 = object.key("SecurityGroupIds").start_array();
        for item_1834 in var_1832 {
            {
                array_1833.value().string(item_1834);
            }
        }
        array_1833.finish();
    }
    if let Some(var_1835) = &input.subnet_ids {
        let mut array_1836 = object.key("SubnetIds").start_array();
        for item_1837 in var_1835 {
            {
                array_1836.value().string(item_1837);
            }
        }
        array_1836.finish();
    }
    if let Some(var_1838) = &input.vpc_id {
        object.key("VPCId").string(var_1838);
    }
}

pub fn serialize_structure_aws_s3_bucket_server_side_encryption_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketServerSideEncryptionConfiguration,
) {
    if let Some(var_1839) = &input.rules {
        let mut array_1840 = object.key("Rules").start_array();
        for item_1841 in var_1839 {
            {
                let mut object_1842 = array_1840.value().start_object();
                crate::json_ser::serialize_structure_aws_s3_bucket_server_side_encryption_rule(
                    &mut object_1842,
                    item_1841,
                );
                object_1842.finish();
            }
        }
        array_1840.finish();
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationDetails,
) {
    if let Some(var_1843) = &input.rules {
        let mut array_1844 = object.key("Rules").start_array();
        for item_1845 in var_1843 {
            {
                let mut object_1846 = array_1844.value().start_object();
                crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_details(&mut object_1846, item_1845);
                object_1846.finish();
            }
        }
        array_1844.finish();
    }
}

pub fn serialize_structure_aws_secrets_manager_secret_rotation_rules(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecretsManagerSecretRotationRules,
) {
    if input.automatically_after_days != 0 {
        object.key("AutomaticallyAfterDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.automatically_after_days).into()),
        );
    }
}

pub fn serialize_structure_aws_iam_access_key_session_context(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeySessionContext,
) {
    if let Some(var_1847) = &input.attributes {
        let mut object_1848 = object.key("Attributes").start_object();
        crate::json_ser::serialize_structure_aws_iam_access_key_session_context_attributes(
            &mut object_1848,
            var_1847,
        );
        object_1848.finish();
    }
    if let Some(var_1849) = &input.session_issuer {
        let mut object_1850 = object.key("SessionIssuer").start_object();
        crate::json_ser::serialize_structure_aws_iam_access_key_session_context_session_issuer(
            &mut object_1850,
            var_1849,
        );
        object_1850.finish();
    }
}

pub fn serialize_structure_aws_iam_attached_managed_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAttachedManagedPolicy,
) {
    if let Some(var_1851) = &input.policy_name {
        object.key("PolicyName").string(var_1851);
    }
    if let Some(var_1852) = &input.policy_arn {
        object.key("PolicyArn").string(var_1852);
    }
}

pub fn serialize_structure_aws_iam_permissions_boundary(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamPermissionsBoundary,
) {
    if let Some(var_1853) = &input.permissions_boundary_arn {
        object.key("PermissionsBoundaryArn").string(var_1853);
    }
    if let Some(var_1854) = &input.permissions_boundary_type {
        object.key("PermissionsBoundaryType").string(var_1854);
    }
}

pub fn serialize_structure_aws_iam_user_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamUserPolicy,
) {
    if let Some(var_1855) = &input.policy_name {
        object.key("PolicyName").string(var_1855);
    }
}

pub fn serialize_structure_aws_iam_policy_version(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamPolicyVersion,
) {
    if let Some(var_1856) = &input.version_id {
        object.key("VersionId").string(var_1856);
    }
    if input.is_default_version {
        object
            .key("IsDefaultVersion")
            .boolean(input.is_default_version);
    }
    if let Some(var_1857) = &input.create_date {
        object.key("CreateDate").string(var_1857);
    }
}

pub fn serialize_structure_aws_api_gateway_v2_route_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayV2RouteSettings,
) {
    if input.detailed_metrics_enabled {
        object
            .key("DetailedMetricsEnabled")
            .boolean(input.detailed_metrics_enabled);
    }
    if let Some(var_1858) = &input.logging_level {
        object.key("LoggingLevel").string(var_1858);
    }
    if input.data_trace_enabled {
        object
            .key("DataTraceEnabled")
            .boolean(input.data_trace_enabled);
    }
    if input.throttling_burst_limit != 0 {
        object.key("ThrottlingBurstLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.throttling_burst_limit).into()),
        );
    }
    if input.throttling_rate_limit != 0.0 {
        object.key("ThrottlingRateLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.throttling_rate_limit).into()),
        );
    }
}

pub fn serialize_structure_aws_api_gateway_access_log_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayAccessLogSettings,
) {
    if let Some(var_1859) = &input.format {
        object.key("Format").string(var_1859);
    }
    if let Some(var_1860) = &input.destination_arn {
        object.key("DestinationArn").string(var_1860);
    }
}

pub fn serialize_structure_aws_cors_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCorsConfiguration,
) {
    if let Some(var_1861) = &input.allow_origins {
        let mut array_1862 = object.key("AllowOrigins").start_array();
        for item_1863 in var_1861 {
            {
                array_1862.value().string(item_1863);
            }
        }
        array_1862.finish();
    }
    if input.allow_credentials {
        object
            .key("AllowCredentials")
            .boolean(input.allow_credentials);
    }
    if let Some(var_1864) = &input.expose_headers {
        let mut array_1865 = object.key("ExposeHeaders").start_array();
        for item_1866 in var_1864 {
            {
                array_1865.value().string(item_1866);
            }
        }
        array_1865.finish();
    }
    if input.max_age != 0 {
        object.key("MaxAge").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_age).into()),
        );
    }
    if let Some(var_1867) = &input.allow_methods {
        let mut array_1868 = object.key("AllowMethods").start_array();
        for item_1869 in var_1867 {
            {
                array_1868.value().string(item_1869);
            }
        }
        array_1868.finish();
    }
    if let Some(var_1870) = &input.allow_headers {
        let mut array_1871 = object.key("AllowHeaders").start_array();
        for item_1872 in var_1870 {
            {
                array_1871.value().string(item_1872);
            }
        }
        array_1871.finish();
    }
}

pub fn serialize_structure_aws_dynamo_db_table_attribute_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableAttributeDefinition,
) {
    if let Some(var_1873) = &input.attribute_name {
        object.key("AttributeName").string(var_1873);
    }
    if let Some(var_1874) = &input.attribute_type {
        object.key("AttributeType").string(var_1874);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_billing_mode_summary(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableBillingModeSummary,
) {
    if let Some(var_1875) = &input.billing_mode {
        object.key("BillingMode").string(var_1875);
    }
    if let Some(var_1876) = &input.last_update_to_pay_per_request_date_time {
        object
            .key("LastUpdateToPayPerRequestDateTime")
            .string(var_1876);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_global_secondary_index(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableGlobalSecondaryIndex,
) {
    if input.backfilling {
        object.key("Backfilling").boolean(input.backfilling);
    }
    if let Some(var_1877) = &input.index_arn {
        object.key("IndexArn").string(var_1877);
    }
    if let Some(var_1878) = &input.index_name {
        object.key("IndexName").string(var_1878);
    }
    if input.index_size_bytes != 0 {
        object.key("IndexSizeBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.index_size_bytes).into()),
        );
    }
    if let Some(var_1879) = &input.index_status {
        object.key("IndexStatus").string(var_1879);
    }
    if input.item_count != 0 {
        object.key("ItemCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.item_count).into()),
        );
    }
    if let Some(var_1880) = &input.key_schema {
        let mut array_1881 = object.key("KeySchema").start_array();
        for item_1882 in var_1880 {
            {
                let mut object_1883 = array_1881.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_key_schema(
                    &mut object_1883,
                    item_1882,
                );
                object_1883.finish();
            }
        }
        array_1881.finish();
    }
    if let Some(var_1884) = &input.projection {
        let mut object_1885 = object.key("Projection").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_projection(
            &mut object_1885,
            var_1884,
        );
        object_1885.finish();
    }
    if let Some(var_1886) = &input.provisioned_throughput {
        let mut object_1887 = object.key("ProvisionedThroughput").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_provisioned_throughput(
            &mut object_1887,
            var_1886,
        );
        object_1887.finish();
    }
}

pub fn serialize_structure_aws_dynamo_db_table_key_schema(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableKeySchema,
) {
    if let Some(var_1888) = &input.attribute_name {
        object.key("AttributeName").string(var_1888);
    }
    if let Some(var_1889) = &input.key_type {
        object.key("KeyType").string(var_1889);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_local_secondary_index(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableLocalSecondaryIndex,
) {
    if let Some(var_1890) = &input.index_arn {
        object.key("IndexArn").string(var_1890);
    }
    if let Some(var_1891) = &input.index_name {
        object.key("IndexName").string(var_1891);
    }
    if let Some(var_1892) = &input.key_schema {
        let mut array_1893 = object.key("KeySchema").start_array();
        for item_1894 in var_1892 {
            {
                let mut object_1895 = array_1893.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_key_schema(
                    &mut object_1895,
                    item_1894,
                );
                object_1895.finish();
            }
        }
        array_1893.finish();
    }
    if let Some(var_1896) = &input.projection {
        let mut object_1897 = object.key("Projection").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_projection(
            &mut object_1897,
            var_1896,
        );
        object_1897.finish();
    }
}

pub fn serialize_structure_aws_dynamo_db_table_provisioned_throughput(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableProvisionedThroughput,
) {
    if let Some(var_1898) = &input.last_decrease_date_time {
        object.key("LastDecreaseDateTime").string(var_1898);
    }
    if let Some(var_1899) = &input.last_increase_date_time {
        object.key("LastIncreaseDateTime").string(var_1899);
    }
    if input.number_of_decreases_today != 0 {
        object.key("NumberOfDecreasesToday").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_decreases_today).into()),
        );
    }
    if input.read_capacity_units != 0 {
        object.key("ReadCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.read_capacity_units).into()),
        );
    }
    if input.write_capacity_units != 0 {
        object.key("WriteCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.write_capacity_units).into()),
        );
    }
}

pub fn serialize_structure_aws_dynamo_db_table_replica(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableReplica,
) {
    if let Some(var_1900) = &input.global_secondary_indexes {
        let mut array_1901 = object.key("GlobalSecondaryIndexes").start_array();
        for item_1902 in var_1900 {
            {
                let mut object_1903 = array_1901.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_replica_global_secondary_index(&mut object_1903, item_1902);
                object_1903.finish();
            }
        }
        array_1901.finish();
    }
    if let Some(var_1904) = &input.kms_master_key_id {
        object.key("KmsMasterKeyId").string(var_1904);
    }
    if let Some(var_1905) = &input.provisioned_throughput_override {
        let mut object_1906 = object.key("ProvisionedThroughputOverride").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_provisioned_throughput_override(
            &mut object_1906,
            var_1905,
        );
        object_1906.finish();
    }
    if let Some(var_1907) = &input.region_name {
        object.key("RegionName").string(var_1907);
    }
    if let Some(var_1908) = &input.replica_status {
        object.key("ReplicaStatus").string(var_1908);
    }
    if let Some(var_1909) = &input.replica_status_description {
        object.key("ReplicaStatusDescription").string(var_1909);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_restore_summary(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableRestoreSummary,
) {
    if let Some(var_1910) = &input.source_backup_arn {
        object.key("SourceBackupArn").string(var_1910);
    }
    if let Some(var_1911) = &input.source_table_arn {
        object.key("SourceTableArn").string(var_1911);
    }
    if let Some(var_1912) = &input.restore_date_time {
        object.key("RestoreDateTime").string(var_1912);
    }
    if input.restore_in_progress {
        object
            .key("RestoreInProgress")
            .boolean(input.restore_in_progress);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_sse_description(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableSseDescription,
) {
    if let Some(var_1913) = &input.inaccessible_encryption_date_time {
        object
            .key("InaccessibleEncryptionDateTime")
            .string(var_1913);
    }
    if let Some(var_1914) = &input.status {
        object.key("Status").string(var_1914);
    }
    if let Some(var_1915) = &input.sse_type {
        object.key("SseType").string(var_1915);
    }
    if let Some(var_1916) = &input.kms_master_key_arn {
        object.key("KmsMasterKeyArn").string(var_1916);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_stream_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableStreamSpecification,
) {
    if input.stream_enabled {
        object.key("StreamEnabled").boolean(input.stream_enabled);
    }
    if let Some(var_1917) = &input.stream_view_type {
        object.key("StreamViewType").string(var_1917);
    }
}

pub fn serialize_structure_aws_api_gateway_method_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayMethodSettings,
) {
    if input.metrics_enabled {
        object.key("MetricsEnabled").boolean(input.metrics_enabled);
    }
    if let Some(var_1918) = &input.logging_level {
        object.key("LoggingLevel").string(var_1918);
    }
    if input.data_trace_enabled {
        object
            .key("DataTraceEnabled")
            .boolean(input.data_trace_enabled);
    }
    if input.throttling_burst_limit != 0 {
        object.key("ThrottlingBurstLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.throttling_burst_limit).into()),
        );
    }
    if input.throttling_rate_limit != 0.0 {
        object.key("ThrottlingRateLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.throttling_rate_limit).into()),
        );
    }
    if input.caching_enabled {
        object.key("CachingEnabled").boolean(input.caching_enabled);
    }
    if input.cache_ttl_in_seconds != 0 {
        object.key("CacheTtlInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.cache_ttl_in_seconds).into()),
        );
    }
    if input.cache_data_encrypted {
        object
            .key("CacheDataEncrypted")
            .boolean(input.cache_data_encrypted);
    }
    if input.require_authorization_for_cache_control {
        object
            .key("RequireAuthorizationForCacheControl")
            .boolean(input.require_authorization_for_cache_control);
    }
    if let Some(var_1919) = &input.unauthorized_cache_control_header_strategy {
        object
            .key("UnauthorizedCacheControlHeaderStrategy")
            .string(var_1919);
    }
    if let Some(var_1920) = &input.http_method {
        object.key("HttpMethod").string(var_1920);
    }
    if let Some(var_1921) = &input.resource_path {
        object.key("ResourcePath").string(var_1921);
    }
}

pub fn serialize_structure_aws_api_gateway_canary_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayCanarySettings,
) {
    if input.percent_traffic != 0.0 {
        object.key("PercentTraffic").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.percent_traffic).into()),
        );
    }
    if let Some(var_1922) = &input.deployment_id {
        object.key("DeploymentId").string(var_1922);
    }
    if let Some(var_1923) = &input.stage_variable_overrides {
        let mut object_1924 = object.key("StageVariableOverrides").start_object();
        for (key_1925, value_1926) in var_1923 {
            {
                object_1924.key(key_1925).string(value_1926);
            }
        }
        object_1924.finish();
    }
    if input.use_stage_cache {
        object.key("UseStageCache").boolean(input.use_stage_cache);
    }
}

pub fn serialize_structure_aws_api_gateway_endpoint_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayEndpointConfiguration,
) {
    if let Some(var_1927) = &input.types {
        let mut array_1928 = object.key("Types").start_array();
        for item_1929 in var_1927 {
            {
                array_1928.value().string(item_1929);
            }
        }
        array_1928.finish();
    }
}

pub fn serialize_structure_aws_ssm_patch(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSsmPatch,
) {
    if let Some(var_1930) = &input.compliance_summary {
        let mut object_1931 = object.key("ComplianceSummary").start_object();
        crate::json_ser::serialize_structure_aws_ssm_compliance_summary(&mut object_1931, var_1930);
        object_1931.finish();
    }
}

pub fn serialize_structure_aws_certificate_manager_certificate_domain_validation_option(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateDomainValidationOption,
) {
    if let Some(var_1932) = &input.domain_name {
        object.key("DomainName").string(var_1932);
    }
    if let Some(var_1933) = &input.resource_record {
        let mut object_1934 = object.key("ResourceRecord").start_object();
        crate::json_ser::serialize_structure_aws_certificate_manager_certificate_resource_record(
            &mut object_1934,
            var_1933,
        );
        object_1934.finish();
    }
    if let Some(var_1935) = &input.validation_domain {
        object.key("ValidationDomain").string(var_1935);
    }
    if let Some(var_1936) = &input.validation_emails {
        let mut array_1937 = object.key("ValidationEmails").start_array();
        for item_1938 in var_1936 {
            {
                array_1937.value().string(item_1938);
            }
        }
        array_1937.finish();
    }
    if let Some(var_1939) = &input.validation_method {
        object.key("ValidationMethod").string(var_1939);
    }
    if let Some(var_1940) = &input.validation_status {
        object.key("ValidationStatus").string(var_1940);
    }
}

pub fn serialize_structure_aws_certificate_manager_certificate_extended_key_usage(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateExtendedKeyUsage,
) {
    if let Some(var_1941) = &input.name {
        object.key("Name").string(var_1941);
    }
    if let Some(var_1942) = &input.o_id {
        object.key("OId").string(var_1942);
    }
}

pub fn serialize_structure_aws_certificate_manager_certificate_key_usage(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateKeyUsage,
) {
    if let Some(var_1943) = &input.name {
        object.key("Name").string(var_1943);
    }
}

pub fn serialize_structure_aws_certificate_manager_certificate_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateOptions,
) {
    if let Some(var_1944) = &input.certificate_transparency_logging_preference {
        object
            .key("CertificateTransparencyLoggingPreference")
            .string(var_1944);
    }
}

pub fn serialize_structure_aws_certificate_manager_certificate_renewal_summary(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateRenewalSummary,
) {
    if let Some(var_1945) = &input.domain_validation_options {
        let mut array_1946 = object.key("DomainValidationOptions").start_array();
        for item_1947 in var_1945 {
            {
                let mut object_1948 = array_1946.value().start_object();
                crate::json_ser::serialize_structure_aws_certificate_manager_certificate_domain_validation_option(&mut object_1948, item_1947);
                object_1948.finish();
            }
        }
        array_1946.finish();
    }
    if let Some(var_1949) = &input.renewal_status {
        object.key("RenewalStatus").string(var_1949);
    }
    if let Some(var_1950) = &input.renewal_status_reason {
        object.key("RenewalStatusReason").string(var_1950);
    }
    if let Some(var_1951) = &input.updated_at {
        object.key("UpdatedAt").string(var_1951);
    }
}

pub fn serialize_structure_aws_redshift_cluster_cluster_node(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterNode,
) {
    if let Some(var_1952) = &input.node_role {
        object.key("NodeRole").string(var_1952);
    }
    if let Some(var_1953) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_1953);
    }
    if let Some(var_1954) = &input.public_ip_address {
        object.key("PublicIpAddress").string(var_1954);
    }
}

pub fn serialize_structure_aws_redshift_cluster_cluster_parameter_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterParameterGroup,
) {
    if let Some(var_1955) = &input.cluster_parameter_status_list {
        let mut array_1956 = object.key("ClusterParameterStatusList").start_array();
        for item_1957 in var_1955 {
            {
                let mut object_1958 = array_1956.value().start_object();
                crate::json_ser::serialize_structure_aws_redshift_cluster_cluster_parameter_status(
                    &mut object_1958,
                    item_1957,
                );
                object_1958.finish();
            }
        }
        array_1956.finish();
    }
    if let Some(var_1959) = &input.parameter_apply_status {
        object.key("ParameterApplyStatus").string(var_1959);
    }
    if let Some(var_1960) = &input.parameter_group_name {
        object.key("ParameterGroupName").string(var_1960);
    }
}

pub fn serialize_structure_aws_redshift_cluster_cluster_security_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterSecurityGroup,
) {
    if let Some(var_1961) = &input.cluster_security_group_name {
        object.key("ClusterSecurityGroupName").string(var_1961);
    }
    if let Some(var_1962) = &input.status {
        object.key("Status").string(var_1962);
    }
}

pub fn serialize_structure_aws_redshift_cluster_cluster_snapshot_copy_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterSnapshotCopyStatus,
) {
    if let Some(var_1963) = &input.destination_region {
        object.key("DestinationRegion").string(var_1963);
    }
    if input.manual_snapshot_retention_period != 0 {
        object.key("ManualSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.manual_snapshot_retention_period).into()),
        );
    }
    if input.retention_period != 0 {
        object.key("RetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.retention_period).into()),
        );
    }
    if let Some(var_1964) = &input.snapshot_copy_grant_name {
        object.key("SnapshotCopyGrantName").string(var_1964);
    }
}

pub fn serialize_structure_aws_redshift_cluster_deferred_maintenance_window(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterDeferredMaintenanceWindow,
) {
    if let Some(var_1965) = &input.defer_maintenance_end_time {
        object.key("DeferMaintenanceEndTime").string(var_1965);
    }
    if let Some(var_1966) = &input.defer_maintenance_identifier {
        object.key("DeferMaintenanceIdentifier").string(var_1966);
    }
    if let Some(var_1967) = &input.defer_maintenance_start_time {
        object.key("DeferMaintenanceStartTime").string(var_1967);
    }
}

pub fn serialize_structure_aws_redshift_cluster_elastic_ip_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterElasticIpStatus,
) {
    if let Some(var_1968) = &input.elastic_ip {
        object.key("ElasticIp").string(var_1968);
    }
    if let Some(var_1969) = &input.status {
        object.key("Status").string(var_1969);
    }
}

pub fn serialize_structure_aws_redshift_cluster_endpoint(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterEndpoint,
) {
    if let Some(var_1970) = &input.address {
        object.key("Address").string(var_1970);
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
}

pub fn serialize_structure_aws_redshift_cluster_hsm_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterHsmStatus,
) {
    if let Some(var_1971) = &input.hsm_client_certificate_identifier {
        object
            .key("HsmClientCertificateIdentifier")
            .string(var_1971);
    }
    if let Some(var_1972) = &input.hsm_configuration_identifier {
        object.key("HsmConfigurationIdentifier").string(var_1972);
    }
    if let Some(var_1973) = &input.status {
        object.key("Status").string(var_1973);
    }
}

pub fn serialize_structure_aws_redshift_cluster_iam_role(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterIamRole,
) {
    if let Some(var_1974) = &input.apply_status {
        object.key("ApplyStatus").string(var_1974);
    }
    if let Some(var_1975) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_1975);
    }
}

pub fn serialize_structure_aws_redshift_cluster_pending_modified_values(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterPendingModifiedValues,
) {
    if input.automated_snapshot_retention_period != 0 {
        object.key("AutomatedSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.automated_snapshot_retention_period).into()),
        );
    }
    if let Some(var_1976) = &input.cluster_identifier {
        object.key("ClusterIdentifier").string(var_1976);
    }
    if let Some(var_1977) = &input.cluster_type {
        object.key("ClusterType").string(var_1977);
    }
    if let Some(var_1978) = &input.cluster_version {
        object.key("ClusterVersion").string(var_1978);
    }
    if let Some(var_1979) = &input.encryption_type {
        object.key("EncryptionType").string(var_1979);
    }
    if input.enhanced_vpc_routing {
        object
            .key("EnhancedVpcRouting")
            .boolean(input.enhanced_vpc_routing);
    }
    if let Some(var_1980) = &input.maintenance_track_name {
        object.key("MaintenanceTrackName").string(var_1980);
    }
    if let Some(var_1981) = &input.master_user_password {
        object.key("MasterUserPassword").string(var_1981);
    }
    if let Some(var_1982) = &input.node_type {
        object.key("NodeType").string(var_1982);
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
}

pub fn serialize_structure_aws_redshift_cluster_resize_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterResizeInfo,
) {
    if input.allow_cancel_resize {
        object
            .key("AllowCancelResize")
            .boolean(input.allow_cancel_resize);
    }
    if let Some(var_1983) = &input.resize_type {
        object.key("ResizeType").string(var_1983);
    }
}

pub fn serialize_structure_aws_redshift_cluster_restore_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterRestoreStatus,
) {
    if input.current_restore_rate_in_mega_bytes_per_second != 0.0 {
        object.key("CurrentRestoreRateInMegaBytesPerSecond").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float(
                (input.current_restore_rate_in_mega_bytes_per_second).into(),
            ),
        );
    }
    if input.elapsed_time_in_seconds != 0 {
        object.key("ElapsedTimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.elapsed_time_in_seconds).into()),
        );
    }
    if input.estimated_time_to_completion_in_seconds != 0 {
        object.key("EstimatedTimeToCompletionInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.estimated_time_to_completion_in_seconds).into()),
        );
    }
    if input.progress_in_mega_bytes != 0 {
        object.key("ProgressInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.progress_in_mega_bytes).into()),
        );
    }
    if input.snapshot_size_in_mega_bytes != 0 {
        object.key("SnapshotSizeInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.snapshot_size_in_mega_bytes).into()),
        );
    }
    if let Some(var_1984) = &input.status {
        object.key("Status").string(var_1984);
    }
}

pub fn serialize_structure_aws_redshift_cluster_vpc_security_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterVpcSecurityGroup,
) {
    if let Some(var_1985) = &input.status {
        object.key("Status").string(var_1985);
    }
    if let Some(var_1986) = &input.vpc_security_group_id {
        object.key("VpcSecurityGroupId").string(var_1986);
    }
}

pub fn serialize_structure_aws_elb_load_balancer_backend_server_description(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerBackendServerDescription,
) {
    if input.instance_port != 0 {
        object.key("InstancePort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.instance_port).into()),
        );
    }
    if let Some(var_1987) = &input.policy_names {
        let mut array_1988 = object.key("PolicyNames").start_array();
        for item_1989 in var_1987 {
            {
                array_1988.value().string(item_1989);
            }
        }
        array_1988.finish();
    }
}

pub fn serialize_structure_aws_elb_load_balancer_health_check(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerHealthCheck,
) {
    if input.healthy_threshold != 0 {
        object.key("HealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.healthy_threshold).into()),
        );
    }
    if input.interval != 0 {
        object.key("Interval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.interval).into()),
        );
    }
    if let Some(var_1990) = &input.target {
        object.key("Target").string(var_1990);
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    if input.unhealthy_threshold != 0 {
        object.key("UnhealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.unhealthy_threshold).into()),
        );
    }
}

pub fn serialize_structure_aws_elb_load_balancer_instance(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerInstance,
) {
    if let Some(var_1991) = &input.instance_id {
        object.key("InstanceId").string(var_1991);
    }
}

pub fn serialize_structure_aws_elb_load_balancer_listener_description(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerListenerDescription,
) {
    if let Some(var_1992) = &input.listener {
        let mut object_1993 = object.key("Listener").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_listener(
            &mut object_1993,
            var_1992,
        );
        object_1993.finish();
    }
    if let Some(var_1994) = &input.policy_names {
        let mut array_1995 = object.key("PolicyNames").start_array();
        for item_1996 in var_1994 {
            {
                array_1995.value().string(item_1996);
            }
        }
        array_1995.finish();
    }
}

pub fn serialize_structure_aws_elb_load_balancer_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerAttributes,
) {
    if let Some(var_1997) = &input.access_log {
        let mut object_1998 = object.key("AccessLog").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_access_log(
            &mut object_1998,
            var_1997,
        );
        object_1998.finish();
    }
    if let Some(var_1999) = &input.connection_draining {
        let mut object_2000 = object.key("ConnectionDraining").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_connection_draining(
            &mut object_2000,
            var_1999,
        );
        object_2000.finish();
    }
    if let Some(var_2001) = &input.connection_settings {
        let mut object_2002 = object.key("ConnectionSettings").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_connection_settings(
            &mut object_2002,
            var_2001,
        );
        object_2002.finish();
    }
    if let Some(var_2003) = &input.cross_zone_load_balancing {
        let mut object_2004 = object.key("CrossZoneLoadBalancing").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_cross_zone_load_balancing(
            &mut object_2004,
            var_2003,
        );
        object_2004.finish();
    }
}

pub fn serialize_structure_aws_elb_load_balancer_policies(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerPolicies,
) {
    if let Some(var_2005) = &input.app_cookie_stickiness_policies {
        let mut array_2006 = object.key("AppCookieStickinessPolicies").start_array();
        for item_2007 in var_2005 {
            {
                let mut object_2008 = array_2006.value().start_object();
                crate::json_ser::serialize_structure_aws_elb_app_cookie_stickiness_policy(
                    &mut object_2008,
                    item_2007,
                );
                object_2008.finish();
            }
        }
        array_2006.finish();
    }
    if let Some(var_2009) = &input.lb_cookie_stickiness_policies {
        let mut array_2010 = object.key("LbCookieStickinessPolicies").start_array();
        for item_2011 in var_2009 {
            {
                let mut object_2012 = array_2010.value().start_object();
                crate::json_ser::serialize_structure_aws_elb_lb_cookie_stickiness_policy(
                    &mut object_2012,
                    item_2011,
                );
                object_2012.finish();
            }
        }
        array_2010.finish();
    }
    if let Some(var_2013) = &input.other_policies {
        let mut array_2014 = object.key("OtherPolicies").start_array();
        for item_2015 in var_2013 {
            {
                array_2014.value().string(item_2015);
            }
        }
        array_2014.finish();
    }
}

pub fn serialize_structure_aws_elb_load_balancer_source_security_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerSourceSecurityGroup,
) {
    if let Some(var_2016) = &input.group_name {
        object.key("GroupName").string(var_2016);
    }
    if let Some(var_2017) = &input.owner_alias {
        object.key("OwnerAlias").string(var_2017);
    }
}

pub fn serialize_structure_aws_iam_group_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamGroupPolicy,
) {
    if let Some(var_2018) = &input.policy_name {
        object.key("PolicyName").string(var_2018);
    }
}

pub fn serialize_structure_aws_iam_instance_profile(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamInstanceProfile,
) {
    if let Some(var_2019) = &input.arn {
        object.key("Arn").string(var_2019);
    }
    if let Some(var_2020) = &input.create_date {
        object.key("CreateDate").string(var_2020);
    }
    if let Some(var_2021) = &input.instance_profile_id {
        object.key("InstanceProfileId").string(var_2021);
    }
    if let Some(var_2022) = &input.instance_profile_name {
        object.key("InstanceProfileName").string(var_2022);
    }
    if let Some(var_2023) = &input.path {
        object.key("Path").string(var_2023);
    }
    if let Some(var_2024) = &input.roles {
        let mut array_2025 = object.key("Roles").start_array();
        for item_2026 in var_2024 {
            {
                let mut object_2027 = array_2025.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_instance_profile_role(
                    &mut object_2027,
                    item_2026,
                );
                object_2027.finish();
            }
        }
        array_2025.finish();
    }
}

pub fn serialize_structure_aws_iam_role_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamRolePolicy,
) {
    if let Some(var_2028) = &input.policy_name {
        object.key("PolicyName").string(var_2028);
    }
}

pub fn serialize_structure_aws_lambda_function_code(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionCode,
) {
    if let Some(var_2029) = &input.s3_bucket {
        object.key("S3Bucket").string(var_2029);
    }
    if let Some(var_2030) = &input.s3_key {
        object.key("S3Key").string(var_2030);
    }
    if let Some(var_2031) = &input.s3_object_version {
        object.key("S3ObjectVersion").string(var_2031);
    }
    if let Some(var_2032) = &input.zip_file {
        object.key("ZipFile").string(var_2032);
    }
}

pub fn serialize_structure_aws_lambda_function_dead_letter_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionDeadLetterConfig,
) {
    if let Some(var_2033) = &input.target_arn {
        object.key("TargetArn").string(var_2033);
    }
}

pub fn serialize_structure_aws_lambda_function_environment(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionEnvironment,
) {
    if let Some(var_2034) = &input.variables {
        let mut object_2035 = object.key("Variables").start_object();
        for (key_2036, value_2037) in var_2034 {
            {
                object_2035.key(key_2036).string(value_2037);
            }
        }
        object_2035.finish();
    }
    if let Some(var_2038) = &input.error {
        let mut object_2039 = object.key("Error").start_object();
        crate::json_ser::serialize_structure_aws_lambda_function_environment_error(
            &mut object_2039,
            var_2038,
        );
        object_2039.finish();
    }
}

pub fn serialize_structure_aws_lambda_function_layer(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionLayer,
) {
    if let Some(var_2040) = &input.arn {
        object.key("Arn").string(var_2040);
    }
    if input.code_size != 0 {
        object.key("CodeSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.code_size).into()),
        );
    }
}

pub fn serialize_structure_aws_lambda_function_tracing_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionTracingConfig,
) {
    if let Some(var_2041) = &input.mode {
        object.key("Mode").string(var_2041);
    }
}

pub fn serialize_structure_aws_lambda_function_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionVpcConfig,
) {
    if let Some(var_2042) = &input.security_group_ids {
        let mut array_2043 = object.key("SecurityGroupIds").start_array();
        for item_2044 in var_2042 {
            {
                array_2043.value().string(item_2044);
            }
        }
        array_2043.finish();
    }
    if let Some(var_2045) = &input.subnet_ids {
        let mut array_2046 = object.key("SubnetIds").start_array();
        for item_2047 in var_2045 {
            {
                array_2046.value().string(item_2047);
            }
        }
        array_2046.finish();
    }
    if let Some(var_2048) = &input.vpc_id {
        object.key("VpcId").string(var_2048);
    }
}

pub fn serialize_structure_aws_rds_db_instance_associated_role(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceAssociatedRole,
) {
    if let Some(var_2049) = &input.role_arn {
        object.key("RoleArn").string(var_2049);
    }
    if let Some(var_2050) = &input.feature_name {
        object.key("FeatureName").string(var_2050);
    }
    if let Some(var_2051) = &input.status {
        object.key("Status").string(var_2051);
    }
}

pub fn serialize_structure_aws_rds_db_instance_endpoint(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceEndpoint,
) {
    if let Some(var_2052) = &input.address {
        object.key("Address").string(var_2052);
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_2053) = &input.hosted_zone_id {
        object.key("HostedZoneId").string(var_2053);
    }
}

pub fn serialize_structure_aws_rds_db_instance_vpc_security_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceVpcSecurityGroup,
) {
    if let Some(var_2054) = &input.vpc_security_group_id {
        object.key("VpcSecurityGroupId").string(var_2054);
    }
    if let Some(var_2055) = &input.status {
        object.key("Status").string(var_2055);
    }
}

pub fn serialize_structure_aws_rds_db_parameter_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbParameterGroup,
) {
    if let Some(var_2056) = &input.db_parameter_group_name {
        object.key("DbParameterGroupName").string(var_2056);
    }
    if let Some(var_2057) = &input.parameter_apply_status {
        object.key("ParameterApplyStatus").string(var_2057);
    }
}

pub fn serialize_structure_aws_rds_db_subnet_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSubnetGroup,
) {
    if let Some(var_2058) = &input.db_subnet_group_name {
        object.key("DbSubnetGroupName").string(var_2058);
    }
    if let Some(var_2059) = &input.db_subnet_group_description {
        object.key("DbSubnetGroupDescription").string(var_2059);
    }
    if let Some(var_2060) = &input.vpc_id {
        object.key("VpcId").string(var_2060);
    }
    if let Some(var_2061) = &input.subnet_group_status {
        object.key("SubnetGroupStatus").string(var_2061);
    }
    if let Some(var_2062) = &input.subnets {
        let mut array_2063 = object.key("Subnets").start_array();
        for item_2064 in var_2062 {
            {
                let mut object_2065 = array_2063.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_subnet_group_subnet(
                    &mut object_2065,
                    item_2064,
                );
                object_2065.finish();
            }
        }
        array_2063.finish();
    }
    if let Some(var_2066) = &input.db_subnet_group_arn {
        object.key("DbSubnetGroupArn").string(var_2066);
    }
}

pub fn serialize_structure_aws_rds_db_pending_modified_values(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbPendingModifiedValues,
) {
    if let Some(var_2067) = &input.db_instance_class {
        object.key("DbInstanceClass").string(var_2067);
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_2068) = &input.master_user_password {
        object.key("MasterUserPassword").string(var_2068);
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if input.multi_az {
        object.key("MultiAZ").boolean(input.multi_az);
    }
    if let Some(var_2069) = &input.engine_version {
        object.key("EngineVersion").string(var_2069);
    }
    if let Some(var_2070) = &input.license_model {
        object.key("LicenseModel").string(var_2070);
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_2071) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_2071);
    }
    if let Some(var_2072) = &input.storage_type {
        object.key("StorageType").string(var_2072);
    }
    if let Some(var_2073) = &input.ca_certificate_identifier {
        object.key("CaCertificateIdentifier").string(var_2073);
    }
    if let Some(var_2074) = &input.db_subnet_group_name {
        object.key("DbSubnetGroupName").string(var_2074);
    }
    if let Some(var_2075) = &input.pending_cloud_watch_logs_exports {
        let mut object_2076 = object.key("PendingCloudWatchLogsExports").start_object();
        crate::json_ser::serialize_structure_aws_rds_pending_cloud_watch_logs_exports(
            &mut object_2076,
            var_2075,
        );
        object_2076.finish();
    }
    if let Some(var_2077) = &input.processor_features {
        let mut array_2078 = object.key("ProcessorFeatures").start_array();
        for item_2079 in var_2077 {
            {
                let mut object_2080 = array_2078.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_processor_feature(
                    &mut object_2080,
                    item_2079,
                );
                object_2080.finish();
            }
        }
        array_2078.finish();
    }
}

pub fn serialize_structure_aws_rds_db_option_group_membership(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbOptionGroupMembership,
) {
    if let Some(var_2081) = &input.option_group_name {
        object.key("OptionGroupName").string(var_2081);
    }
    if let Some(var_2082) = &input.status {
        object.key("Status").string(var_2082);
    }
}

pub fn serialize_structure_aws_rds_db_status_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbStatusInfo,
) {
    if let Some(var_2083) = &input.status_type {
        object.key("StatusType").string(var_2083);
    }
    if input.normal {
        object.key("Normal").boolean(input.normal);
    }
    if let Some(var_2084) = &input.status {
        object.key("Status").string(var_2084);
    }
    if let Some(var_2085) = &input.message {
        object.key("Message").string(var_2085);
    }
}

pub fn serialize_structure_aws_rds_db_domain_membership(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbDomainMembership,
) {
    if let Some(var_2086) = &input.domain {
        object.key("Domain").string(var_2086);
    }
    if let Some(var_2087) = &input.status {
        object.key("Status").string(var_2087);
    }
    if let Some(var_2088) = &input.fqdn {
        object.key("Fqdn").string(var_2088);
    }
    if let Some(var_2089) = &input.iam_role_name {
        object.key("IamRoleName").string(var_2089);
    }
}

pub fn serialize_structure_aws_rds_db_processor_feature(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbProcessorFeature,
) {
    if let Some(var_2090) = &input.name {
        object.key("Name").string(var_2090);
    }
    if let Some(var_2091) = &input.value {
        object.key("Value").string(var_2091);
    }
}

pub fn serialize_structure_aws_sns_topic_subscription(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSnsTopicSubscription,
) {
    if let Some(var_2092) = &input.endpoint {
        object.key("Endpoint").string(var_2092);
    }
    if let Some(var_2093) = &input.protocol {
        object.key("Protocol").string(var_2093);
    }
}

pub fn serialize_structure_aws_waf_web_acl_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafWebAclRule,
) {
    if let Some(var_2094) = &input.action {
        let mut object_2095 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_waf_action(&mut object_2095, var_2094);
        object_2095.finish();
    }
    if let Some(var_2096) = &input.excluded_rules {
        let mut array_2097 = object.key("ExcludedRules").start_array();
        for item_2098 in var_2096 {
            {
                let mut object_2099 = array_2097.value().start_object();
                crate::json_ser::serialize_structure_waf_excluded_rule(&mut object_2099, item_2098);
                object_2099.finish();
            }
        }
        array_2097.finish();
    }
    if let Some(var_2100) = &input.override_action {
        let mut object_2101 = object.key("OverrideAction").start_object();
        crate::json_ser::serialize_structure_waf_override_action(&mut object_2101, var_2100);
        object_2101.finish();
    }
    if input.priority != 0 {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_2102) = &input.rule_id {
        object.key("RuleId").string(var_2102);
    }
    if let Some(var_2103) = &input.r#type {
        object.key("Type").string(var_2103);
    }
}

pub fn serialize_structure_aws_rds_db_cluster_associated_role(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterAssociatedRole,
) {
    if let Some(var_2104) = &input.role_arn {
        object.key("RoleArn").string(var_2104);
    }
    if let Some(var_2105) = &input.status {
        object.key("Status").string(var_2105);
    }
}

pub fn serialize_structure_aws_rds_db_cluster_option_group_membership(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterOptionGroupMembership,
) {
    if let Some(var_2106) = &input.db_cluster_option_group_name {
        object.key("DbClusterOptionGroupName").string(var_2106);
    }
    if let Some(var_2107) = &input.status {
        object.key("Status").string(var_2107);
    }
}

pub fn serialize_structure_aws_rds_db_cluster_member(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterMember,
) {
    if input.is_cluster_writer {
        object
            .key("IsClusterWriter")
            .boolean(input.is_cluster_writer);
    }
    if input.promotion_tier != 0 {
        object.key("PromotionTier").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.promotion_tier).into()),
        );
    }
    if let Some(var_2108) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_2108);
    }
    if let Some(var_2109) = &input.db_cluster_parameter_group_status {
        object.key("DbClusterParameterGroupStatus").string(var_2109);
    }
}

pub fn serialize_structure_aws_ecs_cluster_cluster_settings_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterClusterSettingsDetails,
) {
    if let Some(var_2110) = &input.name {
        object.key("Name").string(var_2110);
    }
    if let Some(var_2111) = &input.value {
        object.key("Value").string(var_2111);
    }
}

pub fn serialize_structure_aws_ecs_cluster_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterConfigurationDetails,
) {
    if let Some(var_2112) = &input.execute_command_configuration {
        let mut object_2113 = object.key("ExecuteCommandConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_cluster_configuration_execute_command_configuration_details(&mut object_2113, var_2112);
        object_2113.finish();
    }
}

pub fn serialize_structure_aws_ecs_cluster_default_capacity_provider_strategy_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterDefaultCapacityProviderStrategyDetails,
) {
    if input.base != 0 {
        object.key("Base").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.base).into()),
        );
    }
    if let Some(var_2114) = &input.capacity_provider {
        object.key("CapacityProvider").string(var_2114);
    }
    if input.weight != 0 {
        object.key("Weight").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.weight).into()),
        );
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsDetails,
) {
    if let Some(var_2115) = &input.command {
        let mut array_2116 = object.key("Command").start_array();
        for item_2117 in var_2115 {
            {
                array_2116.value().string(item_2117);
            }
        }
        array_2116.finish();
    }
    if input.cpu != 0 {
        object.key("Cpu").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.cpu).into()),
        );
    }
    if let Some(var_2118) = &input.depends_on {
        let mut array_2119 = object.key("DependsOn").start_array();
        for item_2120 in var_2118 {
            {
                let mut object_2121 = array_2119.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_depends_on_details(&mut object_2121, item_2120);
                object_2121.finish();
            }
        }
        array_2119.finish();
    }
    if input.disable_networking {
        object
            .key("DisableNetworking")
            .boolean(input.disable_networking);
    }
    if let Some(var_2122) = &input.dns_search_domains {
        let mut array_2123 = object.key("DnsSearchDomains").start_array();
        for item_2124 in var_2122 {
            {
                array_2123.value().string(item_2124);
            }
        }
        array_2123.finish();
    }
    if let Some(var_2125) = &input.dns_servers {
        let mut array_2126 = object.key("DnsServers").start_array();
        for item_2127 in var_2125 {
            {
                array_2126.value().string(item_2127);
            }
        }
        array_2126.finish();
    }
    if let Some(var_2128) = &input.docker_labels {
        let mut object_2129 = object.key("DockerLabels").start_object();
        for (key_2130, value_2131) in var_2128 {
            {
                object_2129.key(key_2130).string(value_2131);
            }
        }
        object_2129.finish();
    }
    if let Some(var_2132) = &input.docker_security_options {
        let mut array_2133 = object.key("DockerSecurityOptions").start_array();
        for item_2134 in var_2132 {
            {
                array_2133.value().string(item_2134);
            }
        }
        array_2133.finish();
    }
    if let Some(var_2135) = &input.entry_point {
        let mut array_2136 = object.key("EntryPoint").start_array();
        for item_2137 in var_2135 {
            {
                array_2136.value().string(item_2137);
            }
        }
        array_2136.finish();
    }
    if let Some(var_2138) = &input.environment {
        let mut array_2139 = object.key("Environment").start_array();
        for item_2140 in var_2138 {
            {
                let mut object_2141 = array_2139.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_environment_details(&mut object_2141, item_2140);
                object_2141.finish();
            }
        }
        array_2139.finish();
    }
    if let Some(var_2142) = &input.environment_files {
        let mut array_2143 = object.key("EnvironmentFiles").start_array();
        for item_2144 in var_2142 {
            {
                let mut object_2145 = array_2143.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_environment_files_details(&mut object_2145, item_2144);
                object_2145.finish();
            }
        }
        array_2143.finish();
    }
    if input.essential {
        object.key("Essential").boolean(input.essential);
    }
    if let Some(var_2146) = &input.extra_hosts {
        let mut array_2147 = object.key("ExtraHosts").start_array();
        for item_2148 in var_2146 {
            {
                let mut object_2149 = array_2147.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_extra_hosts_details(&mut object_2149, item_2148);
                object_2149.finish();
            }
        }
        array_2147.finish();
    }
    if let Some(var_2150) = &input.firelens_configuration {
        let mut object_2151 = object.key("FirelensConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_firelens_configuration_details(&mut object_2151, var_2150);
        object_2151.finish();
    }
    if let Some(var_2152) = &input.health_check {
        let mut object_2153 = object.key("HealthCheck").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_health_check_details(&mut object_2153, var_2152);
        object_2153.finish();
    }
    if let Some(var_2154) = &input.hostname {
        object.key("Hostname").string(var_2154);
    }
    if let Some(var_2155) = &input.image {
        object.key("Image").string(var_2155);
    }
    if input.interactive {
        object.key("Interactive").boolean(input.interactive);
    }
    if let Some(var_2156) = &input.links {
        let mut array_2157 = object.key("Links").start_array();
        for item_2158 in var_2156 {
            {
                array_2157.value().string(item_2158);
            }
        }
        array_2157.finish();
    }
    if let Some(var_2159) = &input.linux_parameters {
        let mut object_2160 = object.key("LinuxParameters").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_details(&mut object_2160, var_2159);
        object_2160.finish();
    }
    if let Some(var_2161) = &input.log_configuration {
        let mut object_2162 = object.key("LogConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_log_configuration_details(&mut object_2162, var_2161);
        object_2162.finish();
    }
    if input.memory != 0 {
        object.key("Memory").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.memory).into()),
        );
    }
    if input.memory_reservation != 0 {
        object.key("MemoryReservation").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.memory_reservation).into()),
        );
    }
    if let Some(var_2163) = &input.mount_points {
        let mut array_2164 = object.key("MountPoints").start_array();
        for item_2165 in var_2163 {
            {
                let mut object_2166 = array_2164.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_mount_points_details(&mut object_2166, item_2165);
                object_2166.finish();
            }
        }
        array_2164.finish();
    }
    if let Some(var_2167) = &input.name {
        object.key("Name").string(var_2167);
    }
    if let Some(var_2168) = &input.port_mappings {
        let mut array_2169 = object.key("PortMappings").start_array();
        for item_2170 in var_2168 {
            {
                let mut object_2171 = array_2169.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_port_mappings_details(&mut object_2171, item_2170);
                object_2171.finish();
            }
        }
        array_2169.finish();
    }
    if input.privileged {
        object.key("Privileged").boolean(input.privileged);
    }
    if input.pseudo_terminal {
        object.key("PseudoTerminal").boolean(input.pseudo_terminal);
    }
    if input.readonly_root_filesystem {
        object
            .key("ReadonlyRootFilesystem")
            .boolean(input.readonly_root_filesystem);
    }
    if let Some(var_2172) = &input.repository_credentials {
        let mut object_2173 = object.key("RepositoryCredentials").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_repository_credentials_details(&mut object_2173, var_2172);
        object_2173.finish();
    }
    if let Some(var_2174) = &input.resource_requirements {
        let mut array_2175 = object.key("ResourceRequirements").start_array();
        for item_2176 in var_2174 {
            {
                let mut object_2177 = array_2175.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_resource_requirements_details(&mut object_2177, item_2176);
                object_2177.finish();
            }
        }
        array_2175.finish();
    }
    if let Some(var_2178) = &input.secrets {
        let mut array_2179 = object.key("Secrets").start_array();
        for item_2180 in var_2178 {
            {
                let mut object_2181 = array_2179.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_secrets_details(&mut object_2181, item_2180);
                object_2181.finish();
            }
        }
        array_2179.finish();
    }
    if input.start_timeout != 0 {
        object.key("StartTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.start_timeout).into()),
        );
    }
    if input.stop_timeout != 0 {
        object.key("StopTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.stop_timeout).into()),
        );
    }
    if let Some(var_2182) = &input.system_controls {
        let mut array_2183 = object.key("SystemControls").start_array();
        for item_2184 in var_2182 {
            {
                let mut object_2185 = array_2183.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_system_controls_details(&mut object_2185, item_2184);
                object_2185.finish();
            }
        }
        array_2183.finish();
    }
    if let Some(var_2186) = &input.ulimits {
        let mut array_2187 = object.key("Ulimits").start_array();
        for item_2188 in var_2186 {
            {
                let mut object_2189 = array_2187.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_ulimits_details(&mut object_2189, item_2188);
                object_2189.finish();
            }
        }
        array_2187.finish();
    }
    if let Some(var_2190) = &input.user {
        object.key("User").string(var_2190);
    }
    if let Some(var_2191) = &input.volumes_from {
        let mut array_2192 = object.key("VolumesFrom").start_array();
        for item_2193 in var_2191 {
            {
                let mut object_2194 = array_2192.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_volumes_from_details(&mut object_2194, item_2193);
                object_2194.finish();
            }
        }
        array_2192.finish();
    }
    if let Some(var_2195) = &input.working_directory {
        object.key("WorkingDirectory").string(var_2195);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_inference_accelerators_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionInferenceAcceleratorsDetails,
) {
    if let Some(var_2196) = &input.device_name {
        object.key("DeviceName").string(var_2196);
    }
    if let Some(var_2197) = &input.device_type {
        object.key("DeviceType").string(var_2197);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_placement_constraints_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionPlacementConstraintsDetails,
) {
    if let Some(var_2198) = &input.expression {
        object.key("Expression").string(var_2198);
    }
    if let Some(var_2199) = &input.r#type {
        object.key("Type").string(var_2199);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_proxy_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionProxyConfigurationDetails,
) {
    if let Some(var_2200) = &input.container_name {
        object.key("ContainerName").string(var_2200);
    }
    if let Some(var_2201) = &input.proxy_configuration_properties {
        let mut array_2202 = object.key("ProxyConfigurationProperties").start_array();
        for item_2203 in var_2201 {
            {
                let mut object_2204 = array_2202.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_proxy_configuration_proxy_configuration_properties_details(&mut object_2204, item_2203);
                object_2204.finish();
            }
        }
        array_2202.finish();
    }
    if let Some(var_2205) = &input.r#type {
        object.key("Type").string(var_2205);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_volumes_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesDetails,
) {
    if let Some(var_2206) = &input.docker_volume_configuration {
        let mut object_2207 = object.key("DockerVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_volumes_docker_volume_configuration_details(&mut object_2207, var_2206);
        object_2207.finish();
    }
    if let Some(var_2208) = &input.efs_volume_configuration {
        let mut object_2209 = object.key("EfsVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_volumes_efs_volume_configuration_details(&mut object_2209, var_2208);
        object_2209.finish();
    }
    if let Some(var_2210) = &input.host {
        let mut object_2211 = object.key("Host").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_volumes_host_details(
            &mut object_2211,
            var_2210,
        );
        object_2211.finish();
    }
    if let Some(var_2212) = &input.name {
        object.key("Name").string(var_2212);
    }
}

pub fn serialize_structure_aws_ecs_service_capacity_provider_strategy_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceCapacityProviderStrategyDetails,
) {
    if input.base != 0 {
        object.key("Base").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.base).into()),
        );
    }
    if let Some(var_2213) = &input.capacity_provider {
        object.key("CapacityProvider").string(var_2213);
    }
    if input.weight != 0 {
        object.key("Weight").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.weight).into()),
        );
    }
}

pub fn serialize_structure_aws_ecs_service_deployment_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDeploymentConfigurationDetails,
) {
    if let Some(var_2214) = &input.deployment_circuit_breaker {
        let mut object_2215 = object.key("DeploymentCircuitBreaker").start_object();
        crate::json_ser::serialize_structure_aws_ecs_service_deployment_configuration_deployment_circuit_breaker_details(&mut object_2215, var_2214);
        object_2215.finish();
    }
    if input.maximum_percent != 0 {
        object.key("MaximumPercent").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.maximum_percent).into()),
        );
    }
    if input.minimum_healthy_percent != 0 {
        object.key("MinimumHealthyPercent").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.minimum_healthy_percent).into()),
        );
    }
}

pub fn serialize_structure_aws_ecs_service_deployment_controller_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDeploymentControllerDetails,
) {
    if let Some(var_2216) = &input.r#type {
        object.key("Type").string(var_2216);
    }
}

pub fn serialize_structure_aws_ecs_service_load_balancers_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceLoadBalancersDetails,
) {
    if let Some(var_2217) = &input.container_name {
        object.key("ContainerName").string(var_2217);
    }
    if input.container_port != 0 {
        object.key("ContainerPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.container_port).into()),
        );
    }
    if let Some(var_2218) = &input.load_balancer_name {
        object.key("LoadBalancerName").string(var_2218);
    }
    if let Some(var_2219) = &input.target_group_arn {
        object.key("TargetGroupArn").string(var_2219);
    }
}

pub fn serialize_structure_aws_ecs_service_network_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceNetworkConfigurationDetails,
) {
    if let Some(var_2220) = &input.aws_vpc_configuration {
        let mut object_2221 = object.key("AwsVpcConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_service_network_configuration_aws_vpc_configuration_details(&mut object_2221, var_2220);
        object_2221.finish();
    }
}

pub fn serialize_structure_aws_ecs_service_placement_constraints_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServicePlacementConstraintsDetails,
) {
    if let Some(var_2222) = &input.expression {
        object.key("Expression").string(var_2222);
    }
    if let Some(var_2223) = &input.r#type {
        object.key("Type").string(var_2223);
    }
}

pub fn serialize_structure_aws_ecs_service_placement_strategies_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServicePlacementStrategiesDetails,
) {
    if let Some(var_2224) = &input.field {
        object.key("Field").string(var_2224);
    }
    if let Some(var_2225) = &input.r#type {
        object.key("Type").string(var_2225);
    }
}

pub fn serialize_structure_aws_ecs_service_service_registries_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceServiceRegistriesDetails,
) {
    if let Some(var_2226) = &input.container_name {
        object.key("ContainerName").string(var_2226);
    }
    if input.container_port != 0 {
        object.key("ContainerPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.container_port).into()),
        );
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_2227) = &input.registry_arn {
        object.key("RegistryArn").string(var_2227);
    }
}

pub fn serialize_structure_ip_organization_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpOrganizationDetails,
) {
    if input.asn != 0 {
        object.key("Asn").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.asn).into()),
        );
    }
    if let Some(var_2228) = &input.asn_org {
        object.key("AsnOrg").string(var_2228);
    }
    if let Some(var_2229) = &input.isp {
        object.key("Isp").string(var_2229);
    }
    if let Some(var_2230) = &input.org {
        object.key("Org").string(var_2230);
    }
}

pub fn serialize_structure_country(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Country,
) {
    if let Some(var_2231) = &input.country_code {
        object.key("CountryCode").string(var_2231);
    }
    if let Some(var_2232) = &input.country_name {
        object.key("CountryName").string(var_2232);
    }
}

pub fn serialize_structure_city(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::City,
) {
    if let Some(var_2233) = &input.city_name {
        object.key("CityName").string(var_2233);
    }
}

pub fn serialize_structure_geo_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoLocation,
) {
    if input.lon != 0.0 {
        object.key("Lon").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.lon).into()),
        );
    }
    if input.lat != 0.0 {
        object.key("Lat").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.lat).into()),
        );
    }
}

pub fn serialize_structure_action_local_ip_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionLocalIpDetails,
) {
    if let Some(var_2234) = &input.ip_address_v4 {
        object.key("IpAddressV4").string(var_2234);
    }
}

pub fn serialize_structure_sensitive_data_detections(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SensitiveDataDetections,
) {
    if input.count != 0 {
        object.key("Count").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.count).into()),
        );
    }
    if let Some(var_2235) = &input.r#type {
        object.key("Type").string(var_2235);
    }
    if let Some(var_2236) = &input.occurrences {
        let mut object_2237 = object.key("Occurrences").start_object();
        crate::json_ser::serialize_structure_occurrences(&mut object_2237, var_2236);
        object_2237.finish();
    }
}

pub fn serialize_structure_custom_data_identifiers_detections(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDataIdentifiersDetections,
) {
    if input.count != 0 {
        object.key("Count").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.count).into()),
        );
    }
    if let Some(var_2238) = &input.arn {
        object.key("Arn").string(var_2238);
    }
    if let Some(var_2239) = &input.name {
        object.key("Name").string(var_2239);
    }
    if let Some(var_2240) = &input.occurrences {
        let mut object_2241 = object.key("Occurrences").start_object();
        crate::json_ser::serialize_structure_occurrences(&mut object_2241, var_2240);
        object_2241.finish();
    }
}

pub fn serialize_structure_aws_code_build_project_environment_registry_credential(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectEnvironmentRegistryCredential,
) {
    if let Some(var_2242) = &input.credential {
        object.key("Credential").string(var_2242);
    }
    if let Some(var_2243) = &input.credential_provider {
        object.key("CredentialProvider").string(var_2243);
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_cache_behavior(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionCacheBehavior,
) {
    if let Some(var_2244) = &input.viewer_protocol_policy {
        object.key("ViewerProtocolPolicy").string(var_2244);
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_origin_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginItem,
) {
    if let Some(var_2245) = &input.domain_name {
        object.key("DomainName").string(var_2245);
    }
    if let Some(var_2246) = &input.id {
        object.key("Id").string(var_2246);
    }
    if let Some(var_2247) = &input.origin_path {
        object.key("OriginPath").string(var_2247);
    }
    if let Some(var_2248) = &input.s3_origin_config {
        let mut object_2249 = object.key("S3OriginConfig").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_origin_s3_origin_config(
            &mut object_2249,
            var_2248,
        );
        object_2249.finish();
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_origin_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroup,
) {
    if let Some(var_2250) = &input.failover_criteria {
        let mut object_2251 = object.key("FailoverCriteria").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_origin_group_failover(
            &mut object_2251,
            var_2250,
        );
        object_2251.finish();
    }
}

pub fn serialize_structure_aws_ec2_security_group_user_id_group_pair(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupUserIdGroupPair,
) {
    if let Some(var_2252) = &input.group_id {
        object.key("GroupId").string(var_2252);
    }
    if let Some(var_2253) = &input.group_name {
        object.key("GroupName").string(var_2253);
    }
    if let Some(var_2254) = &input.peering_status {
        object.key("PeeringStatus").string(var_2254);
    }
    if let Some(var_2255) = &input.user_id {
        object.key("UserId").string(var_2255);
    }
    if let Some(var_2256) = &input.vpc_id {
        object.key("VpcId").string(var_2256);
    }
    if let Some(var_2257) = &input.vpc_peering_connection_id {
        object.key("VpcPeeringConnectionId").string(var_2257);
    }
}

pub fn serialize_structure_aws_ec2_security_group_ip_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupIpRange,
) {
    if let Some(var_2258) = &input.cidr_ip {
        object.key("CidrIp").string(var_2258);
    }
}

pub fn serialize_structure_aws_ec2_security_group_ipv6_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupIpv6Range,
) {
    if let Some(var_2259) = &input.cidr_ipv6 {
        object.key("CidrIpv6").string(var_2259);
    }
}

pub fn serialize_structure_aws_ec2_security_group_prefix_list_id(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupPrefixListId,
) {
    if let Some(var_2260) = &input.prefix_list_id {
        object.key("PrefixListId").string(var_2260);
    }
}

pub fn serialize_structure_icmp_type_code(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IcmpTypeCode,
) {
    if input.code != 0 {
        object.key("Code").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.code).into()),
        );
    }
    if input.r#type != 0 {
        object.key("Type").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.r#type).into()),
        );
    }
}

pub fn serialize_structure_port_range_from_to(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRangeFromTo,
) {
    if input.from != 0 {
        object.key("From").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.from).into()),
        );
    }
    if input.to != 0 {
        object.key("To").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.to).into()),
        );
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_elasticsearch_cluster_config_zone_awareness_config_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetails,
) {
    if input.availability_zone_count != 0 {
        object.key("AvailabilityZoneCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.availability_zone_count).into()),
        );
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_log_publishing_options_log_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainLogPublishingOptionsLogConfig,
) {
    if let Some(var_2261) = &input.cloud_watch_logs_log_group_arn {
        object.key("CloudWatchLogsLogGroupArn").string(var_2261);
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
}

pub fn serialize_structure_aws_s3_bucket_server_side_encryption_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketServerSideEncryptionRule,
) {
    if let Some(var_2262) = &input.apply_server_side_encryption_by_default {
        let mut object_2263 = object
            .key("ApplyServerSideEncryptionByDefault")
            .start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_server_side_encryption_by_default(
            &mut object_2263,
            var_2262,
        );
        object_2263.finish();
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesDetails,
) {
    if let Some(var_2264) = &input.abort_incomplete_multipart_upload {
        let mut object_2265 = object.key("AbortIncompleteMultipartUpload").start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_abort_incomplete_multipart_upload_details(&mut object_2265, var_2264);
        object_2265.finish();
    }
    if let Some(var_2266) = &input.expiration_date {
        object.key("ExpirationDate").string(var_2266);
    }
    if input.expiration_in_days != 0 {
        object.key("ExpirationInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.expiration_in_days).into()),
        );
    }
    if input.expired_object_delete_marker {
        object
            .key("ExpiredObjectDeleteMarker")
            .boolean(input.expired_object_delete_marker);
    }
    if let Some(var_2267) = &input.filter {
        let mut object_2268 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_details(&mut object_2268, var_2267);
        object_2268.finish();
    }
    if let Some(var_2269) = &input.id {
        object.key("ID").string(var_2269);
    }
    if input.noncurrent_version_expiration_in_days != 0 {
        object.key("NoncurrentVersionExpirationInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.noncurrent_version_expiration_in_days).into()),
        );
    }
    if let Some(var_2270) = &input.noncurrent_version_transitions {
        let mut array_2271 = object.key("NoncurrentVersionTransitions").start_array();
        for item_2272 in var_2270 {
            {
                let mut object_2273 = array_2271.value().start_object();
                crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_noncurrent_version_transitions_details(&mut object_2273, item_2272);
                object_2273.finish();
            }
        }
        array_2271.finish();
    }
    if let Some(var_2274) = &input.prefix {
        object.key("Prefix").string(var_2274);
    }
    if let Some(var_2275) = &input.status {
        object.key("Status").string(var_2275);
    }
    if let Some(var_2276) = &input.transitions {
        let mut array_2277 = object.key("Transitions").start_array();
        for item_2278 in var_2276 {
            {
                let mut object_2279 = array_2277.value().start_object();
                crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_transitions_details(&mut object_2279, item_2278);
                object_2279.finish();
            }
        }
        array_2277.finish();
    }
}

pub fn serialize_structure_aws_iam_access_key_session_context_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeySessionContextAttributes,
) {
    if input.mfa_authenticated {
        object
            .key("MfaAuthenticated")
            .boolean(input.mfa_authenticated);
    }
    if let Some(var_2280) = &input.creation_date {
        object.key("CreationDate").string(var_2280);
    }
}

pub fn serialize_structure_aws_iam_access_key_session_context_session_issuer(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeySessionContextSessionIssuer,
) {
    if let Some(var_2281) = &input.r#type {
        object.key("Type").string(var_2281);
    }
    if let Some(var_2282) = &input.principal_id {
        object.key("PrincipalId").string(var_2282);
    }
    if let Some(var_2283) = &input.arn {
        object.key("Arn").string(var_2283);
    }
    if let Some(var_2284) = &input.account_id {
        object.key("AccountId").string(var_2284);
    }
    if let Some(var_2285) = &input.user_name {
        object.key("UserName").string(var_2285);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_projection(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableProjection,
) {
    if let Some(var_2286) = &input.non_key_attributes {
        let mut array_2287 = object.key("NonKeyAttributes").start_array();
        for item_2288 in var_2286 {
            {
                array_2287.value().string(item_2288);
            }
        }
        array_2287.finish();
    }
    if let Some(var_2289) = &input.projection_type {
        object.key("ProjectionType").string(var_2289);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_replica_global_secondary_index(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableReplicaGlobalSecondaryIndex,
) {
    if let Some(var_2290) = &input.index_name {
        object.key("IndexName").string(var_2290);
    }
    if let Some(var_2291) = &input.provisioned_throughput_override {
        let mut object_2292 = object.key("ProvisionedThroughputOverride").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_provisioned_throughput_override(
            &mut object_2292,
            var_2291,
        );
        object_2292.finish();
    }
}

pub fn serialize_structure_aws_dynamo_db_table_provisioned_throughput_override(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableProvisionedThroughputOverride,
) {
    if input.read_capacity_units != 0 {
        object.key("ReadCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.read_capacity_units).into()),
        );
    }
}

pub fn serialize_structure_aws_ssm_compliance_summary(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSsmComplianceSummary,
) {
    if let Some(var_2293) = &input.status {
        object.key("Status").string(var_2293);
    }
    if input.compliant_critical_count != 0 {
        object.key("CompliantCriticalCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.compliant_critical_count).into()),
        );
    }
    if input.compliant_high_count != 0 {
        object.key("CompliantHighCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.compliant_high_count).into()),
        );
    }
    if input.compliant_medium_count != 0 {
        object.key("CompliantMediumCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.compliant_medium_count).into()),
        );
    }
    if let Some(var_2294) = &input.execution_type {
        object.key("ExecutionType").string(var_2294);
    }
    if input.non_compliant_critical_count != 0 {
        object.key("NonCompliantCriticalCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.non_compliant_critical_count).into()),
        );
    }
    if input.compliant_informational_count != 0 {
        object.key("CompliantInformationalCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.compliant_informational_count).into()),
        );
    }
    if input.non_compliant_informational_count != 0 {
        object.key("NonCompliantInformationalCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.non_compliant_informational_count).into()),
        );
    }
    if input.compliant_unspecified_count != 0 {
        object.key("CompliantUnspecifiedCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.compliant_unspecified_count).into()),
        );
    }
    if input.non_compliant_low_count != 0 {
        object.key("NonCompliantLowCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.non_compliant_low_count).into()),
        );
    }
    if input.non_compliant_high_count != 0 {
        object.key("NonCompliantHighCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.non_compliant_high_count).into()),
        );
    }
    if input.compliant_low_count != 0 {
        object.key("CompliantLowCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.compliant_low_count).into()),
        );
    }
    if let Some(var_2295) = &input.compliance_type {
        object.key("ComplianceType").string(var_2295);
    }
    if let Some(var_2296) = &input.patch_baseline_id {
        object.key("PatchBaselineId").string(var_2296);
    }
    if let Some(var_2297) = &input.overall_severity {
        object.key("OverallSeverity").string(var_2297);
    }
    if input.non_compliant_medium_count != 0 {
        object.key("NonCompliantMediumCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.non_compliant_medium_count).into()),
        );
    }
    if input.non_compliant_unspecified_count != 0 {
        object.key("NonCompliantUnspecifiedCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.non_compliant_unspecified_count).into()),
        );
    }
    if let Some(var_2298) = &input.patch_group {
        object.key("PatchGroup").string(var_2298);
    }
}

pub fn serialize_structure_aws_certificate_manager_certificate_resource_record(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateResourceRecord,
) {
    if let Some(var_2299) = &input.name {
        object.key("Name").string(var_2299);
    }
    if let Some(var_2300) = &input.r#type {
        object.key("Type").string(var_2300);
    }
    if let Some(var_2301) = &input.value {
        object.key("Value").string(var_2301);
    }
}

pub fn serialize_structure_aws_redshift_cluster_cluster_parameter_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterParameterStatus,
) {
    if let Some(var_2302) = &input.parameter_name {
        object.key("ParameterName").string(var_2302);
    }
    if let Some(var_2303) = &input.parameter_apply_status {
        object.key("ParameterApplyStatus").string(var_2303);
    }
    if let Some(var_2304) = &input.parameter_apply_error_description {
        object
            .key("ParameterApplyErrorDescription")
            .string(var_2304);
    }
}

pub fn serialize_structure_aws_elb_load_balancer_listener(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerListener,
) {
    if input.instance_port != 0 {
        object.key("InstancePort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.instance_port).into()),
        );
    }
    if let Some(var_2305) = &input.instance_protocol {
        object.key("InstanceProtocol").string(var_2305);
    }
    if input.load_balancer_port != 0 {
        object.key("LoadBalancerPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.load_balancer_port).into()),
        );
    }
    if let Some(var_2306) = &input.protocol {
        object.key("Protocol").string(var_2306);
    }
    if let Some(var_2307) = &input.ssl_certificate_id {
        object.key("SslCertificateId").string(var_2307);
    }
}

pub fn serialize_structure_aws_elb_load_balancer_access_log(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerAccessLog,
) {
    if input.emit_interval != 0 {
        object.key("EmitInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.emit_interval).into()),
        );
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_2308) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_2308);
    }
    if let Some(var_2309) = &input.s3_bucket_prefix {
        object.key("S3BucketPrefix").string(var_2309);
    }
}

pub fn serialize_structure_aws_elb_load_balancer_connection_draining(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerConnectionDraining,
) {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
}

pub fn serialize_structure_aws_elb_load_balancer_connection_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerConnectionSettings,
) {
    if input.idle_timeout != 0 {
        object.key("IdleTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.idle_timeout).into()),
        );
    }
}

pub fn serialize_structure_aws_elb_load_balancer_cross_zone_load_balancing(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerCrossZoneLoadBalancing,
) {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
}

pub fn serialize_structure_aws_elb_app_cookie_stickiness_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbAppCookieStickinessPolicy,
) {
    if let Some(var_2310) = &input.cookie_name {
        object.key("CookieName").string(var_2310);
    }
    if let Some(var_2311) = &input.policy_name {
        object.key("PolicyName").string(var_2311);
    }
}

pub fn serialize_structure_aws_elb_lb_cookie_stickiness_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLbCookieStickinessPolicy,
) {
    if input.cookie_expiration_period != 0 {
        object.key("CookieExpirationPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.cookie_expiration_period).into()),
        );
    }
    if let Some(var_2312) = &input.policy_name {
        object.key("PolicyName").string(var_2312);
    }
}

pub fn serialize_structure_aws_iam_instance_profile_role(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamInstanceProfileRole,
) {
    if let Some(var_2313) = &input.arn {
        object.key("Arn").string(var_2313);
    }
    if let Some(var_2314) = &input.assume_role_policy_document {
        object.key("AssumeRolePolicyDocument").string(var_2314);
    }
    if let Some(var_2315) = &input.create_date {
        object.key("CreateDate").string(var_2315);
    }
    if let Some(var_2316) = &input.path {
        object.key("Path").string(var_2316);
    }
    if let Some(var_2317) = &input.role_id {
        object.key("RoleId").string(var_2317);
    }
    if let Some(var_2318) = &input.role_name {
        object.key("RoleName").string(var_2318);
    }
}

pub fn serialize_structure_aws_lambda_function_environment_error(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionEnvironmentError,
) {
    if let Some(var_2319) = &input.error_code {
        object.key("ErrorCode").string(var_2319);
    }
    if let Some(var_2320) = &input.message {
        object.key("Message").string(var_2320);
    }
}

pub fn serialize_structure_aws_rds_db_subnet_group_subnet(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSubnetGroupSubnet,
) {
    if let Some(var_2321) = &input.subnet_identifier {
        object.key("SubnetIdentifier").string(var_2321);
    }
    if let Some(var_2322) = &input.subnet_availability_zone {
        let mut object_2323 = object.key("SubnetAvailabilityZone").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_subnet_group_subnet_availability_zone(
            &mut object_2323,
            var_2322,
        );
        object_2323.finish();
    }
    if let Some(var_2324) = &input.subnet_status {
        object.key("SubnetStatus").string(var_2324);
    }
}

pub fn serialize_structure_aws_rds_pending_cloud_watch_logs_exports(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsPendingCloudWatchLogsExports,
) {
    if let Some(var_2325) = &input.log_types_to_enable {
        let mut array_2326 = object.key("LogTypesToEnable").start_array();
        for item_2327 in var_2325 {
            {
                array_2326.value().string(item_2327);
            }
        }
        array_2326.finish();
    }
    if let Some(var_2328) = &input.log_types_to_disable {
        let mut array_2329 = object.key("LogTypesToDisable").start_array();
        for item_2330 in var_2328 {
            {
                array_2329.value().string(item_2330);
            }
        }
        array_2329.finish();
    }
}

pub fn serialize_structure_waf_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WafAction,
) {
    if let Some(var_2331) = &input.r#type {
        object.key("Type").string(var_2331);
    }
}

pub fn serialize_structure_waf_excluded_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WafExcludedRule,
) {
    if let Some(var_2332) = &input.rule_id {
        object.key("RuleId").string(var_2332);
    }
}

pub fn serialize_structure_waf_override_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WafOverrideAction,
) {
    if let Some(var_2333) = &input.r#type {
        object.key("Type").string(var_2333);
    }
}

pub fn serialize_structure_aws_ecs_cluster_configuration_execute_command_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterConfigurationExecuteCommandConfigurationDetails,
) {
    if let Some(var_2334) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2334);
    }
    if let Some(var_2335) = &input.log_configuration {
        let mut object_2336 = object.key("LogConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_cluster_configuration_execute_command_configuration_log_configuration_details(&mut object_2336, var_2335);
        object_2336.finish();
    }
    if let Some(var_2337) = &input.logging {
        object.key("Logging").string(var_2337);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_depends_on_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails,
) {
    if let Some(var_2338) = &input.condition {
        object.key("Condition").string(var_2338);
    }
    if let Some(var_2339) = &input.container_name {
        object.key("ContainerName").string(var_2339);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_environment_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails,
) {
    if let Some(var_2340) = &input.name {
        object.key("Name").string(var_2340);
    }
    if let Some(var_2341) = &input.value {
        object.key("Value").string(var_2341);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_environment_files_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails,
) {
    if let Some(var_2342) = &input.r#type {
        object.key("Type").string(var_2342);
    }
    if let Some(var_2343) = &input.value {
        object.key("Value").string(var_2343);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_extra_hosts_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails,
) {
    if let Some(var_2344) = &input.hostname {
        object.key("Hostname").string(var_2344);
    }
    if let Some(var_2345) = &input.ip_address {
        object.key("IpAddress").string(var_2345);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_firelens_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails,
) {
    if let Some(var_2346) = &input.options {
        let mut object_2347 = object.key("Options").start_object();
        for (key_2348, value_2349) in var_2346 {
            {
                object_2347.key(key_2348).string(value_2349);
            }
        }
        object_2347.finish();
    }
    if let Some(var_2350) = &input.r#type {
        object.key("Type").string(var_2350);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_health_check_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetails,
) {
    if let Some(var_2351) = &input.command {
        let mut array_2352 = object.key("Command").start_array();
        for item_2353 in var_2351 {
            {
                array_2352.value().string(item_2353);
            }
        }
        array_2352.finish();
    }
    if input.interval != 0 {
        object.key("Interval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.interval).into()),
        );
    }
    if input.retries != 0 {
        object.key("Retries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.retries).into()),
        );
    }
    if input.start_period != 0 {
        object.key("StartPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.start_period).into()),
        );
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetails,
) {
    if let Some(var_2354) = &input.capabilities {
        let mut object_2355 = object.key("Capabilities").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_capabilities_details(&mut object_2355, var_2354);
        object_2355.finish();
    }
    if let Some(var_2356) = &input.devices {
        let mut array_2357 = object.key("Devices").start_array();
        for item_2358 in var_2356 {
            {
                let mut object_2359 = array_2357.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_devices_details(&mut object_2359, item_2358);
                object_2359.finish();
            }
        }
        array_2357.finish();
    }
    if input.init_process_enabled {
        object
            .key("InitProcessEnabled")
            .boolean(input.init_process_enabled);
    }
    if input.max_swap != 0 {
        object.key("MaxSwap").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_swap).into()),
        );
    }
    if input.shared_memory_size != 0 {
        object.key("SharedMemorySize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.shared_memory_size).into()),
        );
    }
    if input.swappiness != 0 {
        object.key("Swappiness").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.swappiness).into()),
        );
    }
    if let Some(var_2360) = &input.tmpfs {
        let mut array_2361 = object.key("Tmpfs").start_array();
        for item_2362 in var_2360 {
            {
                let mut object_2363 = array_2361.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_tmpfs_details(&mut object_2363, item_2362);
                object_2363.finish();
            }
        }
        array_2361.finish();
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_log_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails,
) {
    if let Some(var_2364) = &input.log_driver {
        object.key("LogDriver").string(var_2364);
    }
    if let Some(var_2365) = &input.options {
        let mut object_2366 = object.key("Options").start_object();
        for (key_2367, value_2368) in var_2365 {
            {
                object_2366.key(key_2367).string(value_2368);
            }
        }
        object_2366.finish();
    }
    if let Some(var_2369) = &input.secret_options {
        let mut array_2370 = object.key("SecretOptions").start_array();
        for item_2371 in var_2369 {
            {
                let mut object_2372 = array_2370.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_log_configuration_secret_options_details(&mut object_2372, item_2371);
                object_2372.finish();
            }
        }
        array_2370.finish();
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_mount_points_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails,
) {
    if let Some(var_2373) = &input.container_path {
        object.key("ContainerPath").string(var_2373);
    }
    if input.read_only {
        object.key("ReadOnly").boolean(input.read_only);
    }
    if let Some(var_2374) = &input.source_volume {
        object.key("SourceVolume").string(var_2374);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_port_mappings_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails,
) {
    if input.container_port != 0 {
        object.key("ContainerPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.container_port).into()),
        );
    }
    if input.host_port != 0 {
        object.key("HostPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.host_port).into()),
        );
    }
    if let Some(var_2375) = &input.protocol {
        object.key("Protocol").string(var_2375);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_repository_credentials_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails,
) {
    if let Some(var_2376) = &input.credentials_parameter {
        object.key("CredentialsParameter").string(var_2376);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_resource_requirements_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails,
) {
    if let Some(var_2377) = &input.r#type {
        object.key("Type").string(var_2377);
    }
    if let Some(var_2378) = &input.value {
        object.key("Value").string(var_2378);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_secrets_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails,
) {
    if let Some(var_2379) = &input.name {
        object.key("Name").string(var_2379);
    }
    if let Some(var_2380) = &input.value_from {
        object.key("ValueFrom").string(var_2380);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_system_controls_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails,
) {
    if let Some(var_2381) = &input.namespace {
        object.key("Namespace").string(var_2381);
    }
    if let Some(var_2382) = &input.value {
        object.key("Value").string(var_2382);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_ulimits_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails,
) {
    if input.hard_limit != 0 {
        object.key("HardLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.hard_limit).into()),
        );
    }
    if let Some(var_2383) = &input.name {
        object.key("Name").string(var_2383);
    }
    if input.soft_limit != 0 {
        object.key("SoftLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.soft_limit).into()),
        );
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_volumes_from_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails,
) {
    if input.read_only {
        object.key("ReadOnly").boolean(input.read_only);
    }
    if let Some(var_2384) = &input.source_container {
        object.key("SourceContainer").string(var_2384);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_proxy_configuration_proxy_configuration_properties_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesDetails,
) {
    if let Some(var_2385) = &input.name {
        object.key("Name").string(var_2385);
    }
    if let Some(var_2386) = &input.value {
        object.key("Value").string(var_2386);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_volumes_docker_volume_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails,
) {
    if input.autoprovision {
        object.key("Autoprovision").boolean(input.autoprovision);
    }
    if let Some(var_2387) = &input.driver {
        object.key("Driver").string(var_2387);
    }
    if let Some(var_2388) = &input.driver_opts {
        let mut object_2389 = object.key("DriverOpts").start_object();
        for (key_2390, value_2391) in var_2388 {
            {
                object_2389.key(key_2390).string(value_2391);
            }
        }
        object_2389.finish();
    }
    if let Some(var_2392) = &input.labels {
        let mut object_2393 = object.key("Labels").start_object();
        for (key_2394, value_2395) in var_2392 {
            {
                object_2393.key(key_2394).string(value_2395);
            }
        }
        object_2393.finish();
    }
    if let Some(var_2396) = &input.scope {
        object.key("Scope").string(var_2396);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_volumes_efs_volume_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails,
) {
    if let Some(var_2397) = &input.authorization_config {
        let mut object_2398 = object.key("AuthorizationConfig").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_volumes_efs_volume_configuration_authorization_config_details(&mut object_2398, var_2397);
        object_2398.finish();
    }
    if let Some(var_2399) = &input.filesystem_id {
        object.key("FilesystemId").string(var_2399);
    }
    if let Some(var_2400) = &input.root_directory {
        object.key("RootDirectory").string(var_2400);
    }
    if let Some(var_2401) = &input.transit_encryption {
        object.key("TransitEncryption").string(var_2401);
    }
    if input.transit_encryption_port != 0 {
        object.key("TransitEncryptionPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.transit_encryption_port).into()),
        );
    }
}

pub fn serialize_structure_aws_ecs_task_definition_volumes_host_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesHostDetails,
) {
    if let Some(var_2402) = &input.source_path {
        object.key("SourcePath").string(var_2402);
    }
}

pub fn serialize_structure_aws_ecs_service_deployment_configuration_deployment_circuit_breaker_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDeploymentConfigurationDeploymentCircuitBreakerDetails,
) {
    if input.enable {
        object.key("Enable").boolean(input.enable);
    }
    if input.rollback {
        object.key("Rollback").boolean(input.rollback);
    }
}

pub fn serialize_structure_aws_ecs_service_network_configuration_aws_vpc_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetails,
) {
    if let Some(var_2403) = &input.assign_public_ip {
        object.key("AssignPublicIp").string(var_2403);
    }
    if let Some(var_2404) = &input.security_groups {
        let mut array_2405 = object.key("SecurityGroups").start_array();
        for item_2406 in var_2404 {
            {
                array_2405.value().string(item_2406);
            }
        }
        array_2405.finish();
    }
    if let Some(var_2407) = &input.subnets {
        let mut array_2408 = object.key("Subnets").start_array();
        for item_2409 in var_2407 {
            {
                array_2408.value().string(item_2409);
            }
        }
        array_2408.finish();
    }
}

pub fn serialize_structure_occurrences(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Occurrences,
) {
    if let Some(var_2410) = &input.line_ranges {
        let mut array_2411 = object.key("LineRanges").start_array();
        for item_2412 in var_2410 {
            {
                let mut object_2413 = array_2411.value().start_object();
                crate::json_ser::serialize_structure_range(&mut object_2413, item_2412);
                object_2413.finish();
            }
        }
        array_2411.finish();
    }
    if let Some(var_2414) = &input.offset_ranges {
        let mut array_2415 = object.key("OffsetRanges").start_array();
        for item_2416 in var_2414 {
            {
                let mut object_2417 = array_2415.value().start_object();
                crate::json_ser::serialize_structure_range(&mut object_2417, item_2416);
                object_2417.finish();
            }
        }
        array_2415.finish();
    }
    if let Some(var_2418) = &input.pages {
        let mut array_2419 = object.key("Pages").start_array();
        for item_2420 in var_2418 {
            {
                let mut object_2421 = array_2419.value().start_object();
                crate::json_ser::serialize_structure_page(&mut object_2421, item_2420);
                object_2421.finish();
            }
        }
        array_2419.finish();
    }
    if let Some(var_2422) = &input.records {
        let mut array_2423 = object.key("Records").start_array();
        for item_2424 in var_2422 {
            {
                let mut object_2425 = array_2423.value().start_object();
                crate::json_ser::serialize_structure_record(&mut object_2425, item_2424);
                object_2425.finish();
            }
        }
        array_2423.finish();
    }
    if let Some(var_2426) = &input.cells {
        let mut array_2427 = object.key("Cells").start_array();
        for item_2428 in var_2426 {
            {
                let mut object_2429 = array_2427.value().start_object();
                crate::json_ser::serialize_structure_cell(&mut object_2429, item_2428);
                object_2429.finish();
            }
        }
        array_2427.finish();
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_origin_s3_origin_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginS3OriginConfig,
) {
    if let Some(var_2430) = &input.origin_access_identity {
        object.key("OriginAccessIdentity").string(var_2430);
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_origin_group_failover(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroupFailover,
) {
    if let Some(var_2431) = &input.status_codes {
        let mut object_2432 = object.key("StatusCodes").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_origin_group_failover_status_codes(&mut object_2432, var_2431);
        object_2432.finish();
    }
}

pub fn serialize_structure_aws_s3_bucket_server_side_encryption_by_default(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketServerSideEncryptionByDefault,
) {
    if let Some(var_2433) = &input.sse_algorithm {
        object.key("SSEAlgorithm").string(var_2433);
    }
    if let Some(var_2434) = &input.kms_master_key_id {
        object.key("KMSMasterKeyID").string(var_2434);
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_abort_incomplete_multipart_upload_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails,
) {
    if input.days_after_initiation != 0 {
        object.key("DaysAfterInitiation").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.days_after_initiation).into()),
        );
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails,
) {
    if let Some(var_2435) = &input.predicate {
        let mut object_2436 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_details(&mut object_2436, var_2435);
        object_2436.finish();
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_noncurrent_version_transitions_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails,
) {
    if input.days != 0 {
        object.key("Days").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.days).into()),
        );
    }
    if let Some(var_2437) = &input.storage_class {
        object.key("StorageClass").string(var_2437);
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_transitions_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails,
) {
    if let Some(var_2438) = &input.date {
        object.key("Date").string(var_2438);
    }
    if input.days != 0 {
        object.key("Days").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.days).into()),
        );
    }
    if let Some(var_2439) = &input.storage_class {
        object.key("StorageClass").string(var_2439);
    }
}

pub fn serialize_structure_aws_rds_db_subnet_group_subnet_availability_zone(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSubnetGroupSubnetAvailabilityZone,
) {
    if let Some(var_2440) = &input.name {
        object.key("Name").string(var_2440);
    }
}

pub fn serialize_structure_aws_ecs_cluster_configuration_execute_command_configuration_log_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterConfigurationExecuteCommandConfigurationLogConfigurationDetails,
) {
    if input.cloud_watch_encryption_enabled {
        object
            .key("CloudWatchEncryptionEnabled")
            .boolean(input.cloud_watch_encryption_enabled);
    }
    if let Some(var_2441) = &input.cloud_watch_log_group_name {
        object.key("CloudWatchLogGroupName").string(var_2441);
    }
    if let Some(var_2442) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_2442);
    }
    if input.s3_encryption_enabled {
        object
            .key("S3EncryptionEnabled")
            .boolean(input.s3_encryption_enabled);
    }
    if let Some(var_2443) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_2443);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_capabilities_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetails,
) {
    if let Some(var_2444) = &input.add {
        let mut array_2445 = object.key("Add").start_array();
        for item_2446 in var_2444 {
            {
                array_2445.value().string(item_2446);
            }
        }
        array_2445.finish();
    }
    if let Some(var_2447) = &input.drop {
        let mut array_2448 = object.key("Drop").start_array();
        for item_2449 in var_2447 {
            {
                array_2448.value().string(item_2449);
            }
        }
        array_2448.finish();
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_devices_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetails,
) {
    if let Some(var_2450) = &input.container_path {
        object.key("ContainerPath").string(var_2450);
    }
    if let Some(var_2451) = &input.host_path {
        object.key("HostPath").string(var_2451);
    }
    if let Some(var_2452) = &input.permissions {
        let mut array_2453 = object.key("Permissions").start_array();
        for item_2454 in var_2452 {
            {
                array_2453.value().string(item_2454);
            }
        }
        array_2453.finish();
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_tmpfs_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetails,
) {
    if let Some(var_2455) = &input.container_path {
        object.key("ContainerPath").string(var_2455);
    }
    if let Some(var_2456) = &input.mount_options {
        let mut array_2457 = object.key("MountOptions").start_array();
        for item_2458 in var_2456 {
            {
                array_2457.value().string(item_2458);
            }
        }
        array_2457.finish();
    }
    if input.size != 0 {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.size).into()),
        );
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_log_configuration_secret_options_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails,
) {
    if let Some(var_2459) = &input.name {
        object.key("Name").string(var_2459);
    }
    if let Some(var_2460) = &input.value_from {
        object.key("ValueFrom").string(var_2460);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_volumes_efs_volume_configuration_authorization_config_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails,
) {
    if let Some(var_2461) = &input.access_point_id {
        object.key("AccessPointId").string(var_2461);
    }
    if let Some(var_2462) = &input.iam {
        object.key("Iam").string(var_2462);
    }
}

pub fn serialize_structure_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Range,
) {
    if input.start != 0 {
        object.key("Start").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.start).into()),
        );
    }
    if input.end != 0 {
        object.key("End").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.end).into()),
        );
    }
    if input.start_column != 0 {
        object.key("StartColumn").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.start_column).into()),
        );
    }
}

pub fn serialize_structure_page(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Page,
) {
    if input.page_number != 0 {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.page_number).into()),
        );
    }
    if let Some(var_2463) = &input.line_range {
        let mut object_2464 = object.key("LineRange").start_object();
        crate::json_ser::serialize_structure_range(&mut object_2464, var_2463);
        object_2464.finish();
    }
    if let Some(var_2465) = &input.offset_range {
        let mut object_2466 = object.key("OffsetRange").start_object();
        crate::json_ser::serialize_structure_range(&mut object_2466, var_2465);
        object_2466.finish();
    }
}

pub fn serialize_structure_record(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Record,
) {
    if let Some(var_2467) = &input.json_path {
        object.key("JsonPath").string(var_2467);
    }
    if input.record_index != 0 {
        object.key("RecordIndex").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.record_index).into()),
        );
    }
}

pub fn serialize_structure_cell(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Cell,
) {
    if input.column != 0 {
        object.key("Column").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.column).into()),
        );
    }
    if input.row != 0 {
        object.key("Row").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.row).into()),
        );
    }
    if let Some(var_2468) = &input.column_name {
        object.key("ColumnName").string(var_2468);
    }
    if let Some(var_2469) = &input.cell_reference {
        object.key("CellReference").string(var_2469);
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_origin_group_failover_status_codes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroupFailoverStatusCodes,
) {
    if let Some(var_2470) = &input.items {
        let mut array_2471 = object.key("Items").start_array();
        for item_2472 in var_2470 {
            {
                array_2471.value().number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::NegInt((*item_2472).into()),
                );
            }
        }
        array_2471.finish();
    }
    if input.quantity != 0 {
        object.key("Quantity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.quantity).into()),
        );
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetails,
) {
    if let Some(var_2473) = &input.operands {
        let mut array_2474 = object.key("Operands").start_array();
        for item_2475 in var_2473 {
            {
                let mut object_2476 = array_2474.value().start_object();
                crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_details(&mut object_2476, item_2475);
                object_2476.finish();
            }
        }
        array_2474.finish();
    }
    if let Some(var_2477) = &input.prefix {
        object.key("Prefix").string(var_2477);
    }
    if let Some(var_2478) = &input.tag {
        let mut object_2479 = object.key("Tag").start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_tag_details(&mut object_2479, var_2478);
        object_2479.finish();
    }
    if let Some(var_2480) = &input.r#type {
        object.key("Type").string(var_2480);
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsDetails,
) {
    if let Some(var_2481) = &input.prefix {
        object.key("Prefix").string(var_2481);
    }
    if let Some(var_2482) = &input.tag {
        let mut object_2483 = object.key("Tag").start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_tag_details(&mut object_2483, var_2482);
        object_2483.finish();
    }
    if let Some(var_2484) = &input.r#type {
        object.key("Type").string(var_2484);
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_tag_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateTagDetails,
) {
    if let Some(var_2485) = &input.key {
        object.key("Key").string(var_2485);
    }
    if let Some(var_2486) = &input.value {
        object.key("Value").string(var_2486);
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_tag_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsTagDetails,
) {
    if let Some(var_2487) = &input.key {
        object.key("Key").string(var_2487);
    }
    if let Some(var_2488) = &input.value {
        object.key("Value").string(var_2488);
    }
}
